# What is this file?
# This file contains options which allow you to configure your multiworld experience while allowing others
# to play how they want as well.

# How do I use it?
# The options in this file are weighted. This means the higher number you assign to a value, the more
# chances you have for that option to be chosen. For example, an option like this:
#
# map_shuffle:
#   on: 5
#   off: 15
#
# Means you have 5 chances for map shuffle to occur, and 15 chances for map shuffle to be turned off

# I've never seen a file like this before. What characters am I allowed to use?
# This is a .yaml file. You are allowed to use most characters.
# To test if your yaml is valid or not, you can use this website:
# http://www.yamllint.com/

description: Default {{ game }} Template # Used to describe your yaml. Useful if you have multiple files
# Your name in-game. Spaces will be replaced with underscores and there is a 16 character limit
name: YourName{number}
#{player} will be replaced with the player's slot number.
#{PLAYER} will be replaced with the player's slot number if that slot number is greater than 1.
#{number} will be replaced with the counter value of the name.
#{NUMBER} will be replaced with the counter value of the name if the counter value is greater than 1.
game:
  {{ game }}: 1
requires:
  version: {{ __version__ }} # Version of Archipelago required for this yaml to work as expected.
# Shared Options supported by all games:

{%- macro range_option(option) %}
    # you can add additional values between minimum and maximum
    {%- set data, notes = dictify_range(option) %}
    {%- for entry, default in data.items() %}
    {{ entry }}: {{ default }}{% if notes[entry] %} # {{ notes[entry] }}{% endif %}
    {%- endfor -%}
{% endmacro %}
{{ game }}:
  {%- for option_key, option in options.items() %}
  {{ option_key }}:{% if option.__doc__ %} # {{ option.__doc__ | replace('\n', '\n#') | indent(4, first=False) }}{% endif %}
    {%- if option.range_start is defined and option.range_start is number %}
    {{- range_option(option) -}}
    {%- elif option.options -%}
      {%- for suboption_option_id, sub_option_name in option.name_lookup.items() %}
    {{ sub_option_name }}: {% if suboption_option_id == option.default %}50{% else %}0{% endif %}
      {%- endfor -%}
      {% if option.name_lookup[option.default] not in option.options %}
    {{ option.default }}: 50
      {%- endif -%}
    {%- elif option.default is string %}
    {{ option.default }}: 50
    {%- elif option.default is iterable and option.default is not mapping %}
    {{ option.default | list }}
    {%- else %}
    {{ yaml_dump(option.default) | indent(4, first=false) }}
    {%- endif -%}
  {%- endfor %}
  {% if not options %}{}{% endif %}
