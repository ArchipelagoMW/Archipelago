import json
import logging
import os
import typing

import Options
from Utils import local_path
from worlds.AutoWorld import AutoWorldRegister

handled_in_js = {"start_inventory", "local_items", "non_local_items", "start_hints", "start_location_hints",
                 "exclude_locations", "priority_locations"}


def create():
    target_folder = local_path("WebHostLib", "static", "generated")
    yaml_folder = os.path.join(target_folder, "configs")

    Options.generate_yaml_templates(yaml_folder)

    def get_html_doc(option_type: type(Options.Option)) -> str:
        if not option_type.__doc__:
            return "Please document me!"
        return "\n".join(line.strip() for line in option_type.__doc__.split("\n")).strip()

    weighted_options = {
        "baseOptions": {
            "description": "Generated by https://archipelago.gg/",
            "name": "",
            "game": {},
        },
        "games": {},
    }

    for game_name, world in AutoWorldRegister.world_types.items():
        all_options = world.options_dataclass.type_hints
        game_option_groups = {}

        option_groups = {option: option_group.name
                         for option_group in world.web.option_groups
                         for option in option_group.options}
        # ordered_groups = ["Game Options", *[group.name for group in world.web.option_groups]]
        for option_name, option in all_options.items():
            if option_name in handled_in_js:
                continue

            group_name = option_groups.get(option, "Game Options")
            this_option = game_option_groups.setdefault(group_name, {}).setdefault(option_name, {})
            if issubclass(option, Options.Choice) or issubclass(option, Options.Toggle):
                this_option.update({
                    "type": "select",
                    "groupName": group_name,
                    "displayName": getattr(option, "display_name", option_name),
                    "description": get_html_doc(option),
                    "defaultValue": None,
                    "options": [],
                })

                for sub_option_id, sub_option_name in option.name_lookup.items():
                    if sub_option_name != "random":
                        this_option["options"].append({
                            "name": option.get_option_name(sub_option_id),
                            "value": sub_option_name,
                        })
                this_option["defaultValue"] = option.default

            elif issubclass(option, Options.Range):
                this_option.update({
                    "type": "range",
                    "groupName": group_name,
                    "displayName": getattr(option, "display_name", option_name),
                    "description": get_html_doc(option),
                    "defaultValue": getattr(option, "default", option.range_start),
                    "min": option.range_start,
                    "max": option.range_end,
                })

                if issubclass(option, Options.NamedRange):
                    this_option["type"] = 'named_range'
                    this_option["value_names"] = option.special_range_names.copy()

            elif issubclass(option, (Options.ItemSet, Options.LocationSet)):
                this_option.update({
                    "type": "items-list",
                    "groupName": group_name,
                    "displayName": getattr(option, "display_name", option_name),
                    "description": get_html_doc(option),
                    "defaultValue": list(option.default),
                })

            elif issubclass(option, Options.VerifyKeys) and not issubclass(option, Options.OptionDict):
                if option.valid_keys:
                    this_option.update({
                        "type": "custom-list",
                        "groupName": group_name,
                        "displayName": getattr(option, "display_name", option_name),
                        "description": get_html_doc(option),
                        "options": list(option.valid_keys),
                        "defaultValue": list(getattr(option, "default", [])),
                    })
                else:
                    del game_option_groups[group_name][option_name]

            else:
                del game_option_groups[group_name][option_name]
                logging.debug(f"{option} not exported to Web Options.")

        if not world.hidden and world.web.options_page is True:
            for group_name, group_options in game_option_groups.items():
                # Add the random option to Choice, TextChoice, and Toggle options
                for option in group_options.values():
                    if option["type"] == "select":
                        option["options"].append({"name": "Random", "value": "random"})

                        if not option["defaultValue"]:
                            option["defaultValue"] = "random"

                weighted_options["baseOptions"]["game"][game_name] = 0
                weighted_options["games"][game_name] = {
                    "gameOptionGroups": game_option_groups,
                    "gameItems": tuple(world.item_names),
                    "gameItemGroups": [
                        group for group in world.item_name_groups.keys() if group != "Everything"
                    ],
                    "gameItemDescriptions": world.item_descriptions,
                    "gameLocations": tuple(world.location_names),
                    "gameLocationGroups": [
                        group for group in world.location_name_groups.keys() if group != "Everywhere"
                    ],
                    "gameLocationDescriptions": world.location_descriptions,
                }

    with open(os.path.join(target_folder, 'weighted-options.json'), "w") as f:
        json.dump(weighted_options, f, indent=2, separators=(',', ': '))

