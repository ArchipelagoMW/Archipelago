# What is this file?
# This file contains options which allow you to configure your multiworld experience while allowing others
# to play how they want as well.

# How do I use it?
# The options in this file are weighted. This means the higher number you assign to a value, the more
# chances you have for that option to be chosen. For example, an option like this:
#
# map_shuffle:
#   on: 5
#   off: 15
#
# Means you have 5 chances for map shuffle to occur, and 15 chances for map shuffle to be turned off

# I've never seen a file like this before. What characters am I allowed to use?
# This is a .yaml file. You are allowed to use most characters.
# To test if your yaml is valid or not, you can use this website:
# http://www.yamllint.com/

description: Template Name # Used to describe your yaml. Useful if you have multiple files
name: YourName{number} # Your name in-game. Spaces will be replaced with underscores and there is a 16 character limit
#{player} will be replaced with the player's slot number.
#{PLAYER} will be replaced with the player's slot number if that slot number is greater than 1.
#{number} will be replaced with the counter value of the name.
#{NUMBER} will be replaced with the counter value of the name if the counter value is greater than 1.
game: # Pick a game to play
  A Link to the Past: 0
  Factorio: 0
  Minecraft: 0
  Subnautica: 0
  Slay the Spire: 0
requires:
  version: 0.1.6 # Version of Archipelago required for this yaml to work as expected.
# Shared Options supported by all games:
accessibility:
  items: 0 # Guarantees you will be able to acquire all items, but you may not be able to access all locations
  locations: 50 # Guarantees you will be able to access all locations, and therefore all items
  none: 0 # Guarantees only that the game is beatable. You may not be able to access all locations or acquire all items
progression_balancing:
  on: 50 # A system to reduce BK, as in times during which you can't do anything by moving your items into an earlier access sphere to make it likely you have stuff to do
  off: 0 # Turn this off if you don't mind a longer multiworld, or can glitch/sequence break around missing items.
# The following 4 options can be uncommented and moved into a game's section they should affect
# start_inventory: # Begin the file with the listed items/upgrades
  # Please only use items for the correct game, use triggers if need to be have seperated lists.
  # Pegasus Boots: on
  # Bomb Upgrade (+10): 4
  # Arrow Upgrade (+10): 4
# start_hints: # Begin the game with these items' locations revealed to you at the start of the game. Get the info via !hint in your client.
#   - Moon Pearl
# local_items: # Force certain items to appear in your world only, not across the multiworld. Recognizes some group names, like "Swords"
#  - "Moon Pearl"
#  - "Small Keys"
#  - "Big Keys"
# non_local_items: # Force certain items to appear outside your world only, unless in single-player. Recognizes some group names, like "Swords"
#  - "Progressive Weapons"
# exclude_locations: # Force certain locations to never contain progression items, and always be filled with junk. 
#  - "Master Sword Pedestal"

Subnautica: {}
Slay the Spire:
  character: # Pick What Character you wish to play with.
    ironclad: 50
    silent: 50
    defect: 50
    watcher: 50
  ascension: # What Ascension do you wish to play with.
    # you can add additional values between minimum and maximum
    0: 50 # minimum value
    20: 0 # maximum value
    random: 0
    random-low: 0
    random-high: 0
  heart_run: # Whether or not you will need to collect they 3 keys to unlock the final act
    #     and beat the heart to finish the game.
    false: 50
    true: 0
Factorio:
  tech_tree_layout:
    single: 1
    small_diamonds: 1
    medium_diamonds: 1
    large_diamonds: 1
    small_pyramids: 1
    medium_pyramids: 1
    large_pyramids: 1
    small_funnels: 1
    medium_funnels: 1
    large_funnels: 1
  recipe_time: # randomize the time it takes for any recipe to craft, this includes smelting, chemical lab, hand crafting etc.
    vanilla: 1
    fast: 0 # 25% to 100% of original time
    normal: 0 # 50 % to 200% of original time
    slow: 0 # 100% to 400% of original time
    chaos: 0 # 25% to 400% of original time
  recipe_ingredients:
    rocket: 1 # only randomize rocket part recipe
    science_pack: 1 # also randomize science pack ingredients
  max_science_pack:
    automation_science_pack: 0
    logistic_science_pack: 0
    military_science_pack: 0
    chemical_science_pack: 0
    production_science_pack: 0
    utility_science_pack: 0
    space_science_pack: 1
  tech_cost:
    very_easy : 0
    easy : 0
    kind : 0
    normal : 1
    hard : 0
    very_hard : 0
    insane : 0
  silo:
    vanilla: 1
    randomize_recipe: 0
    spawn: 0 # spawn silo near player spawn point
  free_samples:
    none: 1
    single_craft: 0
    half_stack: 0
    stack: 0
  progressive:
    on: 1
    off: 0
    grouped_random: 0
  tech_tree_information:
    none: 0
    advancement: 0 # show which items are a logical advancement
    full: 1 # show full info on each tech node
  imported_blueprints: # can be turned off to prevent access to blueprints created outside the current world
    on: 1
    off: 0
  starting_items:
    burner-mining-drill: 19
    stone-furnace: 19
  # Note: Total amount of traps cannot exceed 4, if the sum of them is higher it will get automatically capped.
  evolution_traps:
    # Trap items that when received increase the enemy evolution.
    0: 1
    1: 0
    2: 0
    3: 0
    4: 0
    random: 0
    random-low: 0
    random-middle: 0
    random-high: 0
  evolution_trap_increase:
    # If present, % increase of Evolution with each trap received.
    5: 0
    10: 1
    15: 0
    20: 0
    100: 0
    random: 0
    random-low: 0
    random-middle: 0
    random-high: 0
  attack_traps:
    # Trap items that when received trigger an attack on your base.
    0: 1
    1: 0
    2: 0
    3: 0
    4: 0
    random: 0
    random-low: 0
    random-middle: 0
    random-high: 0
  world_gen:
    # frequency, size, richness, terrain segmentation, starting area and water are all of https://wiki.factorio.com/Types/MapGenSize
    # inverse of water scale
    terrain_segmentation: 0.5
    water: 1.5
    autoplace_controls:
      # set size to 0 to disable
      coal:
        frequency: 1
        size: 3
        richness: 6
      copper-ore:
        frequency: 1
        size: 3
        richness: 6
      crude-oil:
        frequency: 1
        size: 3
        richness: 6
      enemy-base:
        frequency: 1
        size: 1
        richness: 1
      iron-ore:
        frequency: 1
        size: 3
        richness: 6
      stone:
        frequency: 1
        size: 3
        richness: 6
      trees:
        frequency: 1
        size: 1
        richness: 1
      uranium-ore:
        frequency: 1
        size: 3
        richness: 6
    seed: null # turn into positive number to create specific seed
    starting_area: 1
    peaceful_mode: 0
    cliff_settings:
      name: cliff
      cliff_elevation_0: 10 # base elevation, can't be changed in GUI
      cliff_elevation_interval: 40 # 40/frequency
      richness: 1 # 0: off, >0: continuity
    property_expression_names:
      "control-setting:moisture:bias": 0 # grass bias -0.5 to +0.5
      "control-setting:moisture:frequency:multiplier": 1 # 1/scale in GUI
      "control-setting:aux:bias": 0 # -sand/+red desert bias -0.5 to +0.5
      "control-setting:aux:frequency:multiplier": 1 # 1/scale in GUI
    pollution:
      enabled: true
      diffusion_ratio: 0.02
      ageing: 1 # GUI dissipation factor
      enemy_attack_pollution_consumption_modifier: 1
      min_pollution_to_damage_trees: 60
      pollution_restored_per_tree_damage: 10
    enemy_evolution:
      enabled: true
      time_factor: 40.0e-7 # GUI value * 0.0000001
      destroy_factor: 200.0e-5 # GUI value * 0.00001
      pollution_factor: 9.0e-7 # GUI value * 0.0000001
    enemy_expansion:
      enabled: true
      max_expansion_distance: 7
      settler_group_min_size: 5
      settler_group_max_size: 20
      min_expansion_cooldown: 14400 # 1 to 60 min in ticks
      max_expansion_cooldown: 216000 # 5 to 180 min in ticks
Minecraft:
  advancement_goal: 50 # Number of advancements required (87 max) to spawn the Ender Dragon and complete the game.
  egg_shards_required: # Number of dragon egg shards to collect (30 max) before the Ender Dragon will spawn. 
    0: 1
    5: 0
    10: 0
    20: 0
  egg_shards_available: # Number of egg shards available in the pool (30 max). 
    0: 1
    5: 0
    10: 0
    20: 0
  combat_difficulty: # Modifies the level of items logically required for exploring dangerous areas and fighting bosses.
    easy: 0
    normal: 1
    hard: 0
  include_hard_advancements: # Junk-fills certain RNG-reliant or tedious advancements.
    on: 0
    off: 1
  include_insane_advancements: # Junk-fills extremely difficult advancements; this is only How Did We Get Here? and Adventuring Time.
    on: 0
    off: 1
  include_postgame_advancements: # Some advancements require defeating the Ender Dragon; this will junk-fill them so you won't have to finish to send some items.
    on: 0
    off: 1
  shuffle_structures: # Enables shuffling of villages, outposts, fortresses, bastions, and end cities.
    on: 0
    off: 1
  structure_compasses: # Adds structure compasses to the item pool, which point to the nearest indicated structure.
    on: 0
    off: 1
  bee_traps: # Replaces a percentage of junk items with bee traps, which spawn multiple angered bees around every player when received. 
    0: 1
    25: 0
    50: 0
    75: 0
    100: 0
  send_defeated_mobs: # Send killed mobs to other Minecraft worlds which have this option enabled.
    on: 0
    off: 1
A Link to the Past:
  ### Logic Section ###
  glitches_required: # Determine the logic required to complete the seed
    none: 50 # No glitches required
    minor_glitches: 0 # Puts fake flipper, waterwalk, super bunny shenanigans, and etc into logic
    overworld_glitches: 0 # Assumes the player has knowledge of both overworld major glitches (boots clips, mirror clips) and minor glitches
    hybrid_major_glitches: 0 # In addition to overworld glitches, also requires underworld clips between dungeons.
    no_logic: 0 # Your own items are placed with no regard to any logic; such as your Fire Rod can be on your Trinexx.
    # Other players items are placed into your world under HMG logic
  dark_room_logic: # Logic for unlit dark rooms
    lamp: 50 # require the Lamp for these rooms to be considered accessible.
    torches: 0 # in addition to lamp, allow the fire rod and presence of easily accessible torches for access
    none: 0 # all dark rooms are always considered doable, meaning this may force completion of rooms in complete darkness
  restrict_dungeon_item_on_boss: # aka ambrosia boss items
    on: 0 # prevents unshuffled compasses, maps and keys to be boss drops, they can still drop keysanity and other players' items
    off: 50
  ### End of Logic Section ###
  bigkey_shuffle: # Big Key Placement
    original_dungeon: 50
    own_dungeons: 0
    own_world: 0
    any_world: 0
    different_world: 0
  smallkey_shuffle: # Small Key Placement
    original_dungeon: 50
    own_dungeons: 0
    own_world: 0
    any_world: 0
    different_world: 0
    universal: 0
  compass_shuffle: # Compass Placement
    original_dungeon: 50
    own_dungeons: 0
    own_world: 0
    any_world: 0
    different_world: 0
  map_shuffle: # Map Placement
    original_dungeon: 50
    own_dungeons: 0
    own_world: 0
    any_world: 0
    different_world: 0
  dungeon_counters:
    on: 0 # Always display amount of items checked in a dungeon
    pickup: 50 # Show when compass is picked up
    default: 0 # Show when compass is picked up if the compass itself is shuffled
    off: 0 # Never show item count in dungeons
  progressive: # Enable or disable progressive items (swords, shields, bow)
    on: 50 # All items are progressive
    off: 0 # No items are progressive
    grouped_random: 0 # Randomly decides for all items. Swords could be progressive, shields might not be
  entrance_shuffle:
    none: 50 # Vanilla game map. All entrances and exits lead to their original locations. You probably want this option
    dungeonssimple: 0 # Shuffle just dungeons amongst each other, swapping dungeons entirely, so Hyrule Castle is always 1 dungeon
    dungeonsfull: 0 # Shuffle any dungeon entrance with any dungeon interior, so Hyrule Castle can be 4 different dungeons, but keep dungeons to a specific world
    dungeonscrossed: 0 # like dungeonsfull, but allow cross-world traversal through a dungeon. Warning: May force repeated dungeon traversal
    simple: 0 # Entrances are grouped together before being randomized. Simple uses the most strict grouping rules
    restricted: 0 # Less strict than simple
    full: 0 # Less strict than restricted
    crossed: 0 # Less strict than full
    insanity: 0 # Very few grouping rules. Good luck
    # you can also define entrance shuffle seed, like so:
    crossed-1000: 0 # using this method, you can have the same layout as another player and share entrance information
    # however, many other settings like logic, world state, retro etc. may affect the shuffle result as well.
    crossed-group-myfriends: 0 # using this method, everyone with "group-myfriends" will share the same seed
  goals:
    ganon: 50 # Climb GT, defeat Agahnim 2, and then kill Ganon
    crystals: 0 # Only killing Ganon is required. However, items may still be placed in GT
    bosses: 0 # Defeat the boss of all dungeons, including Agahnim's tower and GT (Aga 2)
    pedestal: 0 # Pull the Triforce from the Master Sword pedestal
    ganon_pedestal: 0 # Pull the Master Sword pedestal, then kill Ganon
    triforce_hunt: 0 # Collect 20 of 30 Triforce pieces spread throughout the worlds, then turn them in to Murahadala in front of Hyrule Castle
    local_triforce_hunt: 0 # Collect 20 of 30 Triforce pieces spread throughout your world, then turn them in to Murahadala in front of Hyrule Castle
    ganon_triforce_hunt: 0 # Collect 20 of 30 Triforce pieces spread throughout the worlds, then kill Ganon
    local_ganon_triforce_hunt: 0 # Collect 20 of 30 Triforce pieces spread throughout your world, then kill Ganon
    ice_rod_hunt: 0 # You start with everything needed to 216 the seed. Find the Ice rod, then kill Trinexx at Turtle rock.
  open_pyramid:
    goal: 50 # Opens the pyramid if the goal requires you to kill Ganon, unless the goal is Slow Ganon or All Dungeons
    auto: 0 # Same as Goal, but also is closed if holes are shuffled and ganon is part of the shuffle pool
    yes: 0 # Pyramid hole is always open. Ganon's vulnerable condition is still required before he can he hurt
    no: 0 # Pyramid hole is always closed until you defeat Agahnim atop Ganon's Tower
  triforce_pieces_mode: #Determine how to calculate the extra available triforce pieces.
    extra: 0 # available = triforce_pieces_extra + triforce_pieces_required
    percentage: 0 # available = (triforce_pieces_percentage /100) * triforce_pieces_required
    available: 50 # available = triforce_pieces_available
  triforce_pieces_extra: # Set to how many extra triforces pieces are available to collect in the world.
    # Format "pieces: chance"
    0: 0
    5: 50
    10: 50
    15: 0
    20: 0
  triforce_pieces_percentage: # Set to how many triforce pieces according to a percentage of the required ones, are available to collect in the world.
    # Format "pieces: chance"
    100: 0 #No extra
    150: 50 #Half the required will be added as extra
    200: 0 #There are the double of the required ones available.
  triforce_pieces_available: # Set to how many triforces pieces are available to collect in the world. Default is 30. Max is 90, Min is 1
    # Format "pieces: chance"
    25: 0
    30: 50
    40: 0
    50: 0
  triforce_pieces_required: # Set to how many out of X triforce pieces you need to win the game in a triforce hunt. Default is 20. Max is 90, Min is 1
    # Format "pieces: chance"
    15: 0
    20: 50
    30: 0
    40: 0
    50: 0
  crystals_needed_for_gt: # Crystals required to open GT
    0: 0
    1: 0
    2: 0
    3: 0
    4: 0
    5: 0
    6: 0
    7: 0
    random: 0
    random-low: 50 # any valid number, weighted towards the lower end
    random-middle: 0 # any valid number, weighted towards the central range
    random-high: 0 # any valid number, weighted towards the higher end
  crystals_needed_for_ganon: # Crystals required to hurt Ganon
    0: 0
    1: 0
    2: 0
    3: 0
    4: 0
    5: 0
    6: 0
    7: 0
    random: 0
    random-low: 0
    random-middle: 0
    random-high: 50
  mode:
    standard: 50 # Begin the game by rescuing Zelda from her cell and escorting her to the Sanctuary
    open: 50 # Begin the game from your choice of Link's House or the Sanctuary
    inverted: 0 # Begin in the Dark World. The Moon Pearl is required to avoid bunny-state in Light World, and the Light World game map is altered
  retro:
    on: 0 # you must buy a quiver to use the bow, take-any caves and an old-man cave are added to the world. You may need to find your sword from the old man's cave
    off: 50
  hints:
    'on': 50 # Hint tiles sometimes give item location hints
    'off': 0 # Hint tiles provide gameplay tips
  swordless:
    on: 0 # Your swords are replaced by rupees. Gameplay changes have been made to accommodate this change
    off: 1
  item_pool:
    easy: 0 # Doubled upgrades, progressives, and etc
    normal: 50 # Item availability remains unchanged from vanilla game
    hard: 0 # Reduced upgrade availability (max: 14 hearts, blue mail, tempered sword, fire shield, no silvers unless swordless)
    expert: 0 # Minimum upgrade availability (max: 8 hearts, green mail, master sword, fighter shield, no silvers unless swordless)
  item_functionality:
    easy: 0 # Allow Hammer to damage ganon, Allow Hammer tablet collection, Allow swordless medallion use everywhere.
    normal: 50 # Vanilla item functionality
    hard: 0 # Reduced helpfulness of items (potions less effective, can't catch faeries, cape uses double magic, byrna does not grant invulnerability, boomerangs do not stun, silvers disabled outside ganon)
    expert: 0 # Vastly reduces the helpfulness of items (potions barely effective, can't catch faeries, cape uses double magic, byrna does not grant invulnerability, boomerangs and hookshot do not stun, silvers disabled outside ganon)
  tile_shuffle: # Randomize the tile layouts in flying tile rooms
    on: 0
    off: 50
  misery_mire_medallion: # required medallion to open Misery Mire front entrance
    random: 50
    Ether: 0
    Bombos: 0
    Quake: 0
  turtle_rock_medallion: # required medallion to open Turtle Rock front entrance
    random: 50
    Ether: 0
    Bombos: 0
    Quake: 0
  ### Enemizer Section ###
  boss_shuffle:
    none: 50 # Vanilla bosses
    basic: 0 # Existing bosses except Ganon and Agahnim are shuffled throughout dungeons
    full: 0 # 3 bosses can occur twice
    chaos: 0 # Any boss can appear any amount of times
    singularity: 0 # Picks a boss, tries to put it everywhere that works, if there's spaces remaining it picks a boss to fill those
  enemy_shuffle: # Randomize enemy placement
    on: 0
    off: 50
  killable_thieves: # Make thieves killable
    on: 0 # Usually turned on together with enemy_shuffle to make annoying thief placement more manageable
    off: 50
  bush_shuffle: # Randomize the chance that bushes have enemies and the enemies under said bush
    on: 0
    off: 50
  enemy_damage:
    default: 50 # Vanilla enemy damage
    shuffled: 0 # Enemies deal 0 to 4 hearts and armor helps
    chaos: 0 # Enemies deal 0 to 8 hearts and armor just reshuffles the damage
  enemy_health:
    default: 50 # Vanilla enemy HP
    easy: 0 # Enemies have reduced health
    hard: 0 # Enemies have increased health
    expert: 0 # Enemies have greatly increased health
  pot_shuffle:
    'on': 0 # Keys, items, and buttons hidden under pots in dungeons are shuffled with other pots in their supertile
    'off': 50 # Default pot item locations
  ### End of Enemizer Section ###
  beemizer: # Remove items from the global item pool and replace them with single bees (fill bottles) and bee traps
    0: 50 # No bee traps are placed
    1: 0 # 25% of rupees, bombs and arrows are replaced with bees, of which 60% are traps and 40% single bees
    2: 0 # 50% of rupees, bombs and arrows are replaced with bees, of which 70% are traps and 30% single bees
    3: 0 # 75% of rupees, bombs and arrows are replaced with bees, of which 80% are traps and 20% single bees
    4: 0 # 100% of rupees, bombs and arrows are replaced with bees, of which 90% are traps and 10% single bees
    5: 0 # 100% of rupees, bombs and arrows are replaced with bees, of which 100% are traps and 0% single bees
  ### Shop Settings ###
  shop_item_slots: # Maximum amount of shop slots to be filled with regular item pool items (such as Moon Pearl)
    0: 50
    5: 0
    15: 0
    30: 0
    random: 0 # 0 to 30 evenly distributed
  shop_shuffle:
    none: 50
    g: 0 # Generate new default inventories for overworld/underworld shops, and unique shops
    f: 0 # Generate new default inventories for every shop independently
    i: 0 # Shuffle default inventories of the shops around
    p: 0 # Randomize the prices of the items in shop inventories
    u: 0 # Shuffle capacity upgrades into the item pool (and allow them to traverse the multiworld)
    w: 0 # Consider witch's hut like any other shop and shuffle/randomize it too
    ip: 0 # Shuffle inventories and randomize prices
    fpu: 0 # Generate new inventories, randomize prices and shuffle capacity upgrades into item pool
    uip: 0 # Shuffle inventories, randomize prices and shuffle capacity upgrades into the item pool
    # You can add more combos
  ### End of Shop Section ###
  shuffle_prizes: # aka drops
    none: 0 # do not shuffle prize packs
    g: 50 # shuffle "general" prize packs, as in enemy, tree pull, dig etc.
    b: 0 # shuffle "bonk" prize packs
    bg: 0 # shuffle both
  timer:
    none: 50 # No timer will be displayed.
    timed: 0 # Starts with clock at zero. Green clocks subtract 4 minutes (total 20). Blue clocks subtract 2 minutes (total 10). Red clocks add two minutes (total 10). Winner is the player with the lowest time at the end.
    timed_ohko: 0 # Starts the clock at ten minutes. Green clocks add five minutes (total 25). As long as the clock as at zero, Link will die in one hit.
    ohko: 0 # Timer always at zero. Permanent OHKO.
    timed_countdown: 0 # Starts the clock with forty minutes. Same clocks as timed mode, but if the clock hits zero you lose. You can still keep playing, though.
    display: 0 # Displays a timer, but otherwise does not affect gameplay or the item pool.
  countdown_start_time: # For timed_ohko and timed_countdown timer modes, the amount of time in minutes to start with
    0: 0 # For timed_ohko, starts in OHKO mode when starting the game
    10: 50
    20: 0
    30: 0
    60: 0
  red_clock_time: # For all timer modes, the amount of time in minutes to gain or lose when picking up a red clock
    -2: 50
    1: 0
  blue_clock_time: # For all timer modes, the amount of time in minutes to gain or lose when picking up a blue clock
    1: 0
    2: 50
  green_clock_time: # For all timer modes, the amount of time in minutes to gain or lose when picking up a green clock
    4: 50
    10: 0
    15: 0
  glitch_boots:
    on: 50 # Start with Pegasus Boots in any glitched logic mode that makes use of them
    off: 0
  # rom options section
  random_sprite_on_event: # An alternative to specifying randomonhit / randomonexit / etc... in sprite down below.
    enabled:  # If enabled, sprite down below is ignored completely, (although it may become the sprite pool)
      on: 0
      off: 1
    on_hit:  # Random sprite on hit. Being hit by things that cause 0 damage still counts.
      on: 1
      off: 0
    on_enter:  # Random sprite on underworld entry. Note that entering hobo counts.
      on: 0
      off: 1
    on_exit:  # Random sprite on underworld exit. Exiting hobo does not count.
      on: 0
      off: 1
    on_slash:  # Random sprite on sword slash. Note, it still counts if you attempt to slash while swordless.
      on: 0
      off: 1
    on_item:  # Random sprite on getting an item.  Anything that causes you to hold an item above your head counts.
      on: 0
      off: 1
    on_bonk:  # Random sprite on bonk.
      on: 0
      off: 1
    on_everything:  # Random sprite on ALL currently implemented events, even if not documented at present time.
      on: 0
      off: 1
    use_weighted_sprite_pool:  # Always on if no sprite_pool exists, otherwise it controls whether to use sprite as a weighted sprite pool
      on: 0
      off: 1
  #sprite_pool: # When specified, limits the pool of sprites used for randomon-event to the specified pool.  Uncomment to use this.
  #  - link
  #  - pride link
  #  - penguin link
  #  - random  # You can specify random multiple times for however many potentially unique random sprites you want in your pool.
  sprite: # Enter the name of your preferred sprite and weight it appropriately
    random: 0
    randomonhit: 0 # Random sprite on hit
    randomonenter: 0 # Random sprite on entering the underworld.
    randomonexit: 0 # Random sprite on exiting the underworld.
    randomonslash: 0 # Random sprite on sword slashes
    randomonitem: 0  # Random sprite on getting items.
    randomonbonk: 0 # Random sprite on bonk.
    # You can combine these events like this.  randomonhit-enter-exit  if you want it on hit, enter, exit.
    randomonall: 0 # Random sprite on any and all currently supported events. Refer to above for the supported events.
    Link: 50 # To add other sprites: open the gui/Creator, go to adjust, select a sprite and write down the name the gui calls it
  music: # If "off", all in-game music will be disabled
    on: 50
    off: 0
  quickswap: # Enable switching items by pressing the L+R shoulder buttons
    on: 50
    off: 0
  triforcehud: # Disable visibility of the triforce hud unless collecting a piece or speaking to Murahadala
    normal: 0 # original behavior (always visible)
    hide_goal: 50 # hide counter until a piece is collected or speaking to Murahadala
    hide_required: 0 # Always visible, but required amount is invisible until determined by Murahadala
    hide_both: 0 # Hide both under above circumstances
  reduceflashing: # Reduces instances of flashing such as lightning attacks, weather, ether and more.
    on: 50
    off: 0
  menuspeed: # Controls how fast the item menu opens and closes
    normal: 50
    instant: 0
    double: 0
    triple: 0
    quadruple: 0
    half: 0
  heartcolor: # Controls the color of your health hearts
    red: 50
    blue: 0
    green: 0
    yellow: 0
    random: 0
  heartbeep: # Controls the frequency of the low-health beeping
    double: 0
    normal: 50
    half: 0
    quarter: 0
    off: 0
  ow_palettes: # Change the colors of the overworld
    default: 50 # No changes
    good: 0 # Shuffle the colors, with harmony in mind
    blackout: 0 # everything black / blind mode
    grayscale: 0
    negative: 0
    classic: 0
    dizzy: 0
    sick: 0
    puke: 0
  uw_palettes: # Change the colors of caves and dungeons
    default: 50 # No changes
    good: 0 # Shuffle the colors, with harmony in mind
    blackout: 0 # everything black / blind mode
    grayscale: 0
    negative: 0
    classic: 0
    dizzy: 0
    sick: 0
    puke: 0
  hud_palettes: # Change the colors of the hud
    default: 50 # No changes
    good: 0 # Shuffle the colors, with harmony in mind
    blackout: 0 # everything black / blind mode
    grayscale: 0
    negative: 0
    classic: 0
    dizzy: 0
    sick: 0
    puke: 0
  sword_palettes: # Change the colors of swords
    default: 50 # No changes
    good: 0 # Shuffle the colors, with harmony in mind
    blackout: 0 # everything black / blind mode
    grayscale: 0
    negative: 0
    classic: 0
    dizzy: 0
    sick: 0
    puke: 0
  shield_palettes: # Change the colors of shields
    default: 50 # No changes
    good: 0 # Shuffle the colors, with harmony in mind
    blackout: 0 # everything black / blind mode
    grayscale: 0
    negative: 0
    classic: 0
    dizzy: 0
    sick: 0
    puke: 0

  # triggers that replace options upon rolling certain options
  legacy_weapons: # this is not an actual option, just a set of weights to trigger from
    trigger_disabled: 50
    randomized: 0 # Swords are placed randomly throughout the world
    assured: 0 # Begin with a sword, the rest are placed randomly throughout the world
    vanilla: 0 # Swords are placed in vanilla locations in your own game (Uncle, Pyramid Fairy, Smiths, Pedestal)
    swordless: 0 # swordless mode

Ocarina of Time:
  logic_rules: # Set the logic used for the generator.
    glitchless: 50
    glitched: 0
    no_logic: 0
  logic_no_night_tokens_without_suns_song: # Nighttime skulltulas will logically require Sun's Song.
    false: 50
    true: 0
  open_forest: # Set the state of Kokiri Forest and the path to Deku Tree.
    open: 50
    closed_deku: 0
    closed: 0
  open_kakariko: # Set the state of the Kakariko Village gate.
    open: 50
    zelda: 0
    closed: 0
  open_door_of_time: # Open the Door of Time by default, without the Song of Time.
    false: 0
    true: 50
  zora_fountain: # Set the state of King Zora, blocking the way to Zora's Fountain.
    open: 0
    adult: 0
    closed: 50
  gerudo_fortress: # Set the requirements for access to Gerudo Fortress.
    normal: 0
    fast: 50
    open: 0
  bridge: # Set the requirements for the Rainbow Bridge.
    open: 0
    vanilla: 0
    stones: 0
    medallions: 50
    dungeons: 0
    tokens: 0
  trials: # Set the number of required trials in Ganon's Castle.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    6: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  starting_age: # Choose which age Link will start as.
    child: 50
    adult: 0
  triforce_hunt: # Gather pieces of the Triforce scattered around the world to complete the game.
    false: 50
    true: 0
  triforce_goal: # Number of Triforce pieces required to complete the game. Total number placed determined by the Item Pool setting.
    # you can add additional values between minimum and maximum
    1: 0 # minimum value
    50: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  bombchus_in_logic: # Bombchus are properly considered in logic. The first found pack will have 20 chus; Kokiri Shop and Bazaar sell refills; bombchus open Bombchu Bowling.
    false: 50
    true: 0
  bridge_stones: # Set the number of Spiritual Stones required for the rainbow bridge.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    3: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  bridge_medallions: # Set the number of medallions required for the rainbow bridge.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    6: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  bridge_rewards: # Set the number of dungeon rewards required for the rainbow bridge.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    9: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  bridge_tokens: # Set the number of Gold Skulltula Tokens required for the rainbow bridge.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    100: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  shuffle_mapcompass: # Control where to shuffle dungeon maps and compasses.
    remove: 0
    startwith: 50
    vanilla: 0
    dungeon: 0
    overworld: 0
    any_dungeon: 0
    keysanity: 0
  shuffle_smallkeys: # Control where to shuffle dungeon small keys.
    remove: 0
    vanilla: 0
    dungeon: 50
    overworld: 0
    any_dungeon: 0
    keysanity: 0
  shuffle_fortresskeys: # Control where to shuffle the Gerudo Fortress small keys.
    vanilla: 50
    overworld: 0
    any_dungeon: 0
    keysanity: 0
  shuffle_bosskeys: # Control where to shuffle boss keys, except the Ganon's Castle Boss Key.
    remove: 0
    vanilla: 0
    dungeon: 50
    overworld: 0
    any_dungeon: 0
    keysanity: 0
  shuffle_ganon_bosskey: # Control where to shuffle the Ganon's Castle Boss Key.
    remove: 50
    vanilla: 0
    dungeon: 0
    overworld: 0
    any_dungeon: 0
    keysanity: 0
    on_lacs: 0
  enhance_map_compass: # Map tells if a dungeon is vanilla or MQ. Compass tells what the dungeon reward is.
    false: 50
    true: 0
  lacs_condition: # Set the requirements for the Light Arrow Cutscene in the Temple of Time.
    vanilla: 50
    stones: 0
    medallions: 0
    dungeons: 0
    tokens: 0
  lacs_stones: # Set the number of Spiritual Stones required for LACS.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    3: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  lacs_medallions: # Set the number of medallions required for LACS.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    6: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  lacs_rewards: # Set the number of dungeon rewards required for LACS.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    9: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  lacs_tokens: # Set the number of Gold Skulltula Tokens required for LACS.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    100: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  shuffle_song_items: # Set where songs can appear.
    song: 50
    dungeon: 0
    any: 0
  shopsanity: # Randomizes shop contents. Set to "off" to not shuffle shops; "0" shuffles shops but does not allow multiworld items in shops.
    off: 50
    "0": 0
    "1": 0
    "2": 0
    "3": 0
    "4": 0
    random_value: 0
  tokensanity: # Token rewards from Gold Skulltulas are shuffled into the pool.
    off: 50
    dungeons: 0
    overworld: 0
    all: 0
  shuffle_scrubs: # Shuffle the items sold by Business Scrubs, and set the prices.
    off: 50
    low: 0
    affordable: 0
    expensive: 0
  shuffle_cows: # Cows give items when Epona's Song is played.
    false: 50
    true: 0
  shuffle_kokiri_sword: # Shuffle Kokiri Sword into the item pool.
    false: 50
    true: 0
  shuffle_ocarinas: # Shuffle the Fairy Ocarina and Ocarina of Time into the item pool.
    false: 50
    true: 0
  shuffle_weird_egg: # Shuffle the Weird Egg from Malon at Hyrule Castle.
    false: 50
    true: 0
  shuffle_gerudo_card: # Shuffle the Gerudo Membership Card into the item pool.
    false: 50
    true: 0
  shuffle_beans: # Adds a pack of 10 beans to the item pool and changes the bean salesman to sell one item for 60 rupees.
    false: 50
    true: 0
  shuffle_medigoron_carpet_salesman: # Shuffle the items sold by Medigoron and the Haunted Wasteland Carpet Salesman.
    false: 50
    true: 0
  skip_child_zelda: # Game starts with Zelda's Letter, the item at Zelda's Lullaby, and the relevant events already completed.
    false: 50
    true: 0
  no_escape_sequence: # Skips the tower collapse sequence between the Ganondorf and Ganon fights.
    false: 0
    true: 50
  no_guard_stealth: # The crawlspace into Hyrule Castle skips straight to Zelda.
    false: 0
    true: 50
  no_epona_race: # Epona can always be summoned with Epona's Song.
    false: 0
    true: 50
  skip_some_minigame_phases: # Dampe Race and Horseback Archery give both rewards if the second condition is met on the first attempt.
    false: 0
    true: 50
  complete_mask_quest: # All masks are immediately available to borrow from the Happy Mask Shop.
    false: 50
    true: 0
  useful_cutscenes: # Reenables the Poe cutscene in Forest Temple, Darunia in Fire Temple, and Twinrova introduction. Mostly useful for glitched.
    false: 50
    true: 0
  fast_chests: # All chest animations are fast. If disabled, major items have a slow animation.
    false: 0
    true: 50
  free_scarecrow: # Pulling out the ocarina near a scarecrow spot spawns Pierre without needing the song.
    false: 50
    true: 0
  fast_bunny_hood: # Bunny Hood lets you move 1.5x faster like in Majora's Mask.
    false: 50
    true: 0
  chicken_count: # Controls the number of Cuccos for Anju to give an item as child.
    # you can add additional values between minimum and maximum
    0: 0 # minimum value
    7: 0 # maximum value
    random: 50
    random-low: 0
    random-high: 0
  hints: # Gossip Stones can give hints about item locations.
    none: 0
    mask: 0
    agony: 0
    always: 50
    false: 0
  hint_dist: # Choose the hint distribution to use. Affects the frequency of strong hints, which items are always hinted, etc.
    balanced: 50
    ddr: 0
    league: 0
    mw2: 0
    scrubs: 0
    strong: 0
    tournament: 0
    useless: 0
    very_strong: 0
  text_shuffle: # Randomizes text in the game for comedic effect.
    none: 50
    except_hints: 0
    complete: 0
  damage_multiplier: # Controls the amount of damage Link takes.
    half: 0
    normal: 50
    double: 0
    quadruple: 0
    ohko: 0
  no_collectible_hearts: # Hearts will not drop from enemies or objects.
    false: 50
    true: 0
  starting_tod: # Change the starting time of day.
    default: 50
    sunrise: 0
    morning: 0
    noon: 0
    afternoon: 0
    sunset: 0
    evening: 0
    midnight: 0
    witching_hour: 0
  start_with_consumables: # Start the game with full Deku Sticks and Deku Nuts.
    false: 50
    true: 0
  start_with_rupees: # Start with a full wallet. Wallet upgrades will also fill your wallet.
    false: 50
    true: 0
  item_pool_value: # Changes the number of items available in the game.
    plentiful: 0
    balanced: 50
    scarce: 0
    minimal: 0
  junk_ice_traps: # Adds ice traps to the item pool.
    off: 0
    normal: 50
    extra: 0
    mayhem: 0
    onslaught: 0
  ice_trap_appearance: # Changes the appearance of ice traps as freestanding items.
    major_only: 50
    junk_only: 0
    anything: 0
  logic_earliest_adult_trade: # Earliest item that can appear in the adult trade sequence.
    pocket_egg: 0
    pocket_cucco: 0
    cojiro: 0
    odd_mushroom: 0
    poachers_saw: 0
    broken_sword: 0
    prescription: 50
    eyeball_frog: 0
    eyedrops: 0
    claim_check: 0
  logic_latest_adult_trade: # Latest item that can appear in the adult trade sequence.
    pocket_egg: 0
    pocket_cucco: 0
    cojiro: 0
    odd_mushroom: 0
    poachers_saw: 0
    broken_sword: 0
    prescription: 0
    eyeball_frog: 0
    eyedrops: 0
    claim_check: 50
  default_targeting: # Default targeting option.
    hold: 50
    switch: 0
  display_dpad: # Show dpad icon on HUD for quick actions (ocarina, hover boots, iron boots).
    false: 0
    true: 50
  correct_model_colors: # Makes in-game models match their HUD element colors.
    false: 0
    true: 50
  background_music: # Randomize or disable background music.
    normal: 50
    off: 0
    randomized: 0
  fanfares: # Randomize or disable item fanfares.
    normal: 50
    off: 0
    randomized: 0
  ocarina_fanfares: # Enable ocarina songs as fanfares. These are longer than usual fanfares. Does nothing without fanfares randomized.
    false: 50
    true: 0
  kokiri_color: # Choose a color. "random_choice" selects a random option. "completely_random" generates a random hex code.
    random_choice: 0
    completely_random: 0
    kokiri_green: 50
    goron_red: 0
    zora_blue: 0
    black: 0
    white: 0
    azure_blue: 0
    vivid_cyan: 0
    light_red: 0
    fuchsia: 0
    purple: 0
    majora_purple: 0
    twitch_purple: 0
    purple_heart: 0
    persian_rose: 0
    dirty_yellow: 0
    blush_pink: 0
    hot_pink: 0
    rose_pink: 0
    orange: 0
    gray: 0
    gold: 0
    silver: 0
    beige: 0
    teal: 0
    blood_red: 0
    blood_orange: 0
    royal_blue: 0
    sonic_blue: 0
    nes_green: 0
    dark_green: 0
    lumen: 0
  goron_color: # Choose a color. Uses the same options as "kokiri_color".
    random_choice: 0
    completely_random: 0
    goron_red: 50
  zora_color: # Choose a color. Uses the same options as "kokiri_color".
    random_choice: 0
    completely_random: 0
    zora_blue: 50
  silver_gauntlets_color: # Choose a color. "random_choice" selects a random option. "completely_random" generates a random hex code.
    random_choice: 0
    completely_random: 0
    silver: 50
    gold: 0
    black: 0
    green: 0
    blue: 0
    bronze: 0
    red: 0
    sky_blue: 0
    pink: 0
    magenta: 0
    orange: 0
    lime: 0
    purple: 0
  golden_gauntlets_color: # Choose a color. Uses the same options as "silver_gauntlets_color".
    random_choice: 0
    completely_random: 0
    gold: 50
  mirror_shield_frame_color: # Choose a color. "random_choice" selects a random option. "completely_random" generates a random hex code.
    random_choice: 0
    completely_random: 0
    red: 50
    green: 0
    blue: 0
    yellow: 0
    cyan: 0
    magenta: 0
    orange: 0
    gold: 0
    purple: 0
    pink: 0
  navi_color_default_inner: # Choose a color. "random_choice" selects a random option. "completely_random" generates a random hex code.
    random_choice: 0
    completely_random: 0
    rainbow: 0
    gold: 0
    white: 50
    green: 0
    light_blue: 0
    yellow: 0
    red: 0
    magenta: 0
    black: 0
    tatl: 0
    tael: 0
    fi: 0
    ciela: 0
    epona: 0
    ezlo: 0
    king_of_red_lions: 0
    linebeck: 0
    loftwing: 0
    midna: 0
    phantom_zelda: 0
  navi_color_default_outer: # Choose a color. Uses the same options as "navi_color_default_inner" plus "match_inner".
    random_choice: 0
    completely_random: 0
    match_inner: 50
  navi_color_enemy_inner: # Choose a color. Uses the same options as "navi_color_default_inner".
    random_choice: 0
    completely_random: 0
    yellow: 50
  navi_color_enemy_outer: # Choose a color. Uses the same options as "navi_color_default_inner" plus "match_inner".
    random_choice: 0
    completely_random: 0
    match_inner: 50
  navi_color_npc_inner: # Choose a color. Uses the same options as "navi_color_default_inner".
    random_choice: 0
    completely_random: 0
    light_blue: 50
  navi_color_npc_outer: # Choose a color. Uses the same options as "navi_color_default_inner" plus "match_inner".
    random_choice: 0
    completely_random: 0
    match_inner: 50
  navi_color_prop_inner: # Choose a color. Uses the same options as "navi_color_default_inner".
    random_choice: 0
    completely_random: 0
    green: 50
  navi_color_prop_outer: # Choose a color. Uses the same options as "navi_color_default_inner" plus "match_inner".
    random_choice: 0
    completely_random: 0
    match_inner: 50
  sword_trail_duration: # Set the duration for sword trails.
    # you can add additional values between minimum and maximum
    4: 50 # minimum value
    20: 0 # maximum value
    random: 0
    random-low: 0
    random-high: 0
  sword_trail_color_inner: # Choose a color. "random_choice" selects a random option. "completely_random" generates a random hex code.
    random_choice: 0
    completely_random: 0
    rainbow: 0
    white: 50
    red: 0
    green: 0
    blue: 0
    cyan: 0
    magenta: 0
    orange: 0
    gold: 0
    purple: 0
    pink: 0
  sword_trail_color_outer: # Uses the same options as "sword_trail_color_inner" plus "match_inner".
    random_choice: 0
    completely_random: 0
    match_inner: 50
  bombchu_trail_color_inner: # Uses the same options as "sword_trail_color_inner".
    random_choice: 0
    completely_random: 0
    red: 50
  bombchu_trail_color_outer: # Uses the same options as "sword_trail_color_inner" plus "match_inner".
    random_choice: 0
    completely_random: 0
    match_inner: 50
  boomerang_trail_color_inner: # Uses the same options as "sword_trail_color_inner".
    random_choice: 0
    completely_random: 0
    yellow: 50
  boomerang_trail_color_outer: # Uses the same options as "sword_trail_color_inner" plus "match_inner".
    random_choice: 0
    completely_random: 0
    match_inner: 50
  heart_color: # Choose a color. "random_choice" selects a random option. "completely_random" generates a random hex code.
    random_choice: 0
    completely_random: 0
    red: 50
    green: 0
    blue: 0
    yellow: 0
  magic_color: # Choose a color. "random_choice" selects a random option. "completely_random" generates a random hex code.
    random_choice: 0
    completely_random: 0
    green: 50
    red: 0
    blue: 0
    purple: 0
    pink: 0
    yellow: 0
    white: 0
  a_button_color: # Choose a color. "random_choice" selects a random option. "completely_random" generates a random hex code.
    random_choice: 0
    completely_random: 0
    n64_blue: 50
    n64_green: 0
    n64_red: 0
    gamecube_green: 0
    gamecube_red: 0
    gamecube_grey: 0
    yellow: 0
    black: 0
    white: 0
    magenta: 0
    ruby: 0
    sapphire: 0
    lime: 0
    cyan: 0
    purple: 0
    orange: 0
  b_button_color: # Choose a color. Uses the same options as "a_button_color".
    random_choice: 0
    completely_random: 0
    n64_green: 50
  c_button_color: # Choose a color. Uses the same options as "a_button_color".
    random_choice: 0
    completely_random: 0
    yellow: 50
  start_button_color: # Choose a color. Uses the same options as "a_button_color".
    random_choice: 0
    completely_random: 0
    n64_red: 50
  sfx_navi_overworld: # Choose a sound effect. "random_choice" selects a random option. "random_ear_safe" selects a random safe option. "completely_random" selects any random sound.
    default: 50
    completely_random: 0
    random_ear_safe: 0
    random_choice: 0
    none: 0
  sfx_navi_enemy: # Choose a sound effect. "random_choice" selects a random option. "random_ear_safe" selects a random safe option. "completely_random" selects any random sound.
    default: 50
    completely_random: 0
    random_ear_safe: 0
    random_choice: 0
    none: 0
  sfx_low_hp: # Choose a sound effect. "random_choice" selects a random option. "random_ear_safe" selects a random safe option. "completely_random" selects any random sound.
    default: 50
    completely_random: 0
    random_ear_safe: 0
    random_choice: 0
    none: 0
  sfx_menu_cursor: # Choose a sound effect. "random_choice" selects a random option. "random_ear_safe" selects a random safe option. "completely_random" selects any random sound.
    default: 50
    completely_random: 0
    random_ear_safe: 0
    random_choice: 0
    none: 0
  sfx_menu_select: # Choose a sound effect. "random_choice" selects a random option. "random_ear_safe" selects a random safe option. "completely_random" selects any random sound.
    default: 50
    completely_random: 0
    random_ear_safe: 0
    random_choice: 0
    none: 0
  sfx_nightfall: # Choose a sound effect. "random_choice" selects a random option. "random_ear_safe" selects a random safe option. "completely_random" selects any random sound.
    default: 50
    completely_random: 0
    random_ear_safe: 0
    random_choice: 0
    none: 0
  sfx_horse_neigh: # Choose a sound effect. "random_choice" selects a random option. "random_ear_safe" selects a random safe option. "completely_random" selects any random sound.
    default: 50
    completely_random: 0
    random_ear_safe: 0
    random_choice: 0
    none: 0
  sfx_hover_boots: # Choose a sound effect. "random_choice" selects a random option. "random_ear_safe" selects a random safe option. "completely_random" selects any random sound.
    default: 50
    completely_random: 0
    random_ear_safe: 0
    random_choice: 0
  sfx_ocarina: # Change the sound of the ocarina.
    ocarina: 50
    malon: 0
    whistle: 0
    harp: 0
    grind_organ: 0
    flute: 0
  logic_tricks:
    []

# meta_ignore, linked_options and triggers work for any game
meta_ignore: # Nullify options specified in the meta.yaml file. Adding an option here guarantees it will not occur in your seed, even if the .yaml file specifies it
  mode:
    - inverted # Never play inverted seeds
  retro:
    - on # Never play retro seeds
  swordless:
    - on # Never play a swordless seed

linked_options:
  - name: crosskeys
    options: # These overwrite earlier options if the percentage chance triggers
      A Link to the Past:
        entrance_shuffle: crossed
        bigkey_shuffle: true
        compass_shuffle: true
        map_shuffle: true
        smallkey_shuffle: true
    percentage: 0 # Set this to the percentage chance you want crosskeys
  - name: localcrosskeys
    options: # These overwrite earlier options if the percentage chance triggers
      A Link to the Past:
        entrance_shuffle: crossed
        bigkey_shuffle: true
        compass_shuffle: true
        map_shuffle: true
        smallkey_shuffle: true
        local_items: # Forces keys to be local to your own world
          - "Small Keys"
          - "Big Keys"
    percentage: 0 # Set this to the percentage chance you want local crosskeys
  - name: enemizer
    options:
      A Link to the Past:
        boss_shuffle: # Subchances can be injected too, which then get rolled
          basic: 1
          full: 1
          chaos: 1
          singularity: 1
        enemy_damage:
          shuffled: 1
          chaos: 1
        enemy_health:
          easy: 1
          hard: 1
          expert: 1
    percentage: 0 # Set this to the percentage chance you want enemizer
triggers:
  # trigger block for legacy weapons mode, to enable these add weights to legacy_weapons
  - option_name: legacy_weapons
    option_result: randomized
    option_category: A Link to the Past
    options:
      A Link to the Past:
        swordless: off
  - option_name: legacy_weapons
    option_result: assured
    option_category: A Link to the Past
    options:
      A Link to the Past:
        swordless: off
        start_inventory:
          Progressive Sword: 1
  - option_name: legacy_weapons
    option_result: vanilla
    option_category: A Link to the Past
    options:
      A Link to the Past:
        swordless: off
        plando_items:
          - items:
              Progressive Sword: 4
            locations:
              - Master Sword Pedestal
              - Pyramid Fairy - Left
              - Blacksmith
              - Link's Uncle
  - option_name: legacy_weapons
    option_result: swordless
    option_category: A Link to the Past
    options:
      A Link to the Past:
        swordless: on
  # end of legacy weapons block
  - option_name: enemy_damage # targets enemy_damage
    option_category: A Link to the Past
    option_result: shuffled # if it rolls shuffled
    percentage: 0 # AND has a 0 percent chance (meaning this is default disabled, just to show how it works)
    options: # then inserts these options
      A Link to the Past:
        swordless: off