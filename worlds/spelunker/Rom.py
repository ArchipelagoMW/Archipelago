import hashlib
import os
import Utils
import typing
from worlds.Files import APProcedurePatch, APTokenMixin, APTokenTypes
from BaseClasses import ItemClassification
from settings import get_settings
from typing import TYPE_CHECKING
from .local_data import local_locations, hidden_locations

if TYPE_CHECKING:
    from . import SpelunkerWorld
USHASH = "4359c225ebcbb1ac66ec889f300f8376"

item_ids = {
    0x696969: 0x01, #Money bag
    0x69696A: 0x02, #Coin
    0x69696B: 0x03, #Miracle
    0x69696C: 0x04, #Diamond
    0x69696D: 0x05, #Dynamite
    0x69696E: 0x06, #Flare
    0x69696F: 0x07, #Blue Key
    0x696970: 0x08, #Red Key
    0x696971: 0x09,
    0x696972: 0x0A,
    0x696973: 0x0B,
    0x696974: 0x0C

}

location_table = {
    0x696969: 0x09,
    0x69696a: 0x0a,
    0x69696B: 0x06,
    0x69696C: 0x0B,
    0x69696D: 0x07,
    0x69696E: 0x08,

    0x69696F: 0x0F,
    0x696970: 0x10,
    0x696971: 0x11,
    0x696972: 0x19,
    0x696973: 0x29,
    0x6969F8: 0x31,
    0x696974: 0x38,
    0x696975: 0x37,

    0x696976: 0x13,
    0x696977: 0x14,
    
    0x696978: 0x1E,
    0x696979: 0x23,
    0x69697A: 0x28,

    0x69697B: 0x16,
    0x69697C: 0x1A,
    0x69697D: 0x18,
    0x69697E: 0x2E,
    0x69697F: 0x36,
    0x696980: 0x32,
    0x696981: 0x26,
    0x696981: 0x27,

    0x696983: 0x35,
    0x696984: 0x41,
    0x696985: 0x40,

    0x696986: 0x46,
    0x696987: 0x42,
    0x696988: 0x43,

    0x696989: 0x44,

    0x69698A: 0x4E,
    0x69698B: 0x58,
    0x69698C: 0x57,
    0x69698D: 0x4D,
    0x69698E: 0x4C,
    0x69698F: 0x59,
    0x696990: 0x56,
    0x696991: 0x5D,
    0x696992: 0x5E,
    
    0x696993: 0x63,
    0x696994: 0x62,
    0x696995: 0x65,
    0x6969F9: 0x68,
    0x696996: 0x69,
    0x696997: 0x6A,
    0x696998: 0x6F,
    0x696999: 0x70,
    0x69699A: 0x6E,
    0x69699B: 0x6D,
    0x69699C: 0x71,

    0x69699D: 0x74,
    0x69699E: 0x75,
    0x69699F: 0x76,

    0x6969A0: 0x7A,
    0x6969A1: 0x79,
    0x6969A2: 0x77,
    0x6969A3: 0x78,
    0x6969A4: 0x7D,
    0x6969FA: 0x80,
    0x6969A5: 0x82,
    0x6969A6: 0x7F,
    0x6969A7: 0x7E,
    0x6969A8: 0x83,
    0x6969A9: 0x8C,
    0x6969AA: 0x8E,
    0x6969AB: 0x84,
    0x6969AC: 0x85,
    0x6969AD: 0x86,
    0x6969AE: 0x87,
    0x6969AF: 0x88,
    0x6969B0: 0x90,
    0x6969B1: 0x92,
    0x6969B2: 0x98,
    0x6969B3: 0x96,
    0x6969B4: 0x95,
    0x6969B5: 0x94,
    0x6969B6: 0x99,
    0x6969B7: 0x9B,
    0x6969B8: 0x9E,
    0x6969B9: 0x9F,
    0x6969BA: 0xA0,
    0x6969BB: 0xA1,
    0x6969BC: 0xB0,
    0x6969BD: 0xB1,
    0x6969BF: 0xB2,
    0x6969C0: 0xAA,
    0x6969C1: 0xA5,
    0x6969C2: 0xA4,
    0x6969C3: 0xA9,
    0x6969C4: 0xAC,
    0x6969C5: 0xAB,
    0x6969C6: 0xAD,
    0x6969C7: 0xAE,
    0x6969C8: 0xBB,
    0x6969C9: 0xB9,
    0x6969CA: 0xB8,
    0x6969CB: 0xB4,
    0x6969CC: 0xB3,
    0x6969CD: 0xBA,
    0x6969D0: 0xBF,
    0x6969D1: 0xBC,
    0x6969D2: 0xC4,
    0x6969D3: 0xC5,
    0x6969D4: 0xC2,
    0x6969D5: 0xC1,
    0x6969D6: 0xC8,
    0x6969D7: 0xCB,
    0x6969D8: 0xCC,
    0x6969D9: 0xCD,
    
    0x6969DA: 0xD0,
    0x6969DB: 0xD1,
    0x6969DC: 0xD4,
    0x6969DD: 0xD2,
    0x6969DE: 0xCF,
    0x6969DF: 0xDB,
    0x6969E0: 0xDA,
    0x6969E1: 0xD9,
    0x6969FB: 0xBD,
    0x6969E2: 0xDE,
    0x6969E3: 0xDC,
    0x6969E4: 0xDD,
    0x6969FC: 0xC3,
    0x6969E5: 0xE6,
    0x6969E6: 0xE7,
    0x6969E7: 0xE4,
    0x6969E8: 0xE5,
    0x6969E9: 0xE2,
    0x6969EA: 0xE1,
    0x6969EB: 0xE0,
    0x6969EC: 0xEC,
    0x6969ED: 0xF2,
    0x6969EE: 0xF3,
    0x6969EF: 0xEB,

    0x6969F0: 0xF0,
    0x6969F1: 0xEE,
    0x6969F2: 0xED,
    0x6969F2: 0xEA,
    0x6969F4: 0xF7,
    0x6969F5: 0xF6,
    0x6969F6: 0xF9,
    0x6969F7: 0xFA
}

hidden_table = {
    0x6969FD: 0x0D,
    0x6969FE: 0x1D,
    0x6969FF: 0x55,
    0x696A00: 0x66,
    0x696A01: 0x8F,
    0x696A02: 0xA2,
    0x696A03: 0xC6,
    0x696A04: 0xCA
}

class LocalRom(object):

    def __init__(self, file: str) -> None:
        self.name = None
        self.hash = hash
        self.orig_buffer = None

        with open(file, "rb") as stream:
            self.buffer = Utils.read_snes_rom(stream)

    def read_bit(self, address: int, bit_number: int) -> bool:
        bitflag = 1 << bit_number
        return (self.buffer[address] & bitflag) != 0

    def read_byte(self, address: int) -> int:
        return self.buffer[address]

    def read_bytes(self, startaddress: int, length: int) -> bytes:
        return self.buffer[startaddress:startaddress + length]

    def write_byte(self, address: int, value: int) -> None:
        self.buffer[address] = value

    def write_bytes(self, startaddress: int, values: bytearray) -> None:
        self.buffer[startaddress:startaddress + len(values)] = values

    def write_to_file(self, file: str) -> None:
        with open(file, "wb") as outfile:
            outfile.write(self.buffer)

    def read_from_file(self, file: str) -> None:
        with open(file, "rb") as stream:
            self.buffer = bytearray(stream.read())

def code_main(rom: LocalRom) -> None:
    rom.write_bytes(0x1B72, bytearray([0x45, 0x9C]))#Disable Blue Key
    rom.write_bytes(0x1B74, bytearray([0x45, 0x9C]))#Disable Red Key
    rom.write_bytes(0x1B76, bytearray([0x88, 0x9C]))#Disable Money Bag
    rom.write_bytes(0x1B78, bytearray([0x45, 0x9C]))#Disable Coin
    rom.write_bytes(0x1B7A, bytearray([0x45, 0x9C]))#Disable Dynamite
    rom.write_bytes(0x1B7C, bytearray([0x74, 0x9C]))#Disable Flare
    #rom.write_bytes(0x1B7E, bytearray([0x09, 0x9C]))Air refill, ignore
    rom.write_bytes(0x1B80, bytearray([0x45, 0x9C]))#Disable Miracle
    rom.write_bytes(0x1B90, bytearray([0x24, 0x9D]))#Disable Diamond
    
    rom.write_bytes(0x1C66, bytearray([0xF0, 0x13]))#Disable Speedup
    rom.write_bytes(0x1C6A, bytearray([0xF0, 0x0F]))#Disable Invincibility
    rom.write_bytes(0x1C64, bytearray([0x90, 0xE9]))#Disable 1-Up
    rom.write_bytes(0x1C6F, bytearray([0x6B, 0x9C]))#Disable Points

    rom.write_bytes(0x65D2, bytearray([0x8A, 0x48, 0xAD, 0x80, 0x07, 0xF0, 0x11, 0x0A, 0xAA, 0xBD, 0x40, 0xE8, 0x8D, 0x90, 0x07, 0xBD]))
    rom.write_bytes(0x65E2, bytearray([0x41, 0xE8, 0x8D, 0x91, 0x07, 0x20, 0xE9, 0xE5, 0x68, 0xAA, 0xA9, 0x00, 0x8D, 0x80, 0x07, 0xA4]))
    rom.write_bytes(0x65F2, bytearray([0x17, 0xB9, 0x00, 0x05, 0x4C, 0xF3, 0x96, 0xA2, 0xFF, 0x6C, 0x90, 0x07, 0xA0, 0x00, 0xA2, 0x00]))
    rom.write_bytes(0x6602, bytearray([0xCA, 0xD0, 0x11, 0x88, 0xD0, 0x0C, 0x60]))

    rom.write_bytes(0x6610, bytearray([0xAD, 0x50, 0xF0, 0x8D, 0x3D, 0x02, 0x4C, 0xA5, 0x81]))

    rom.write_bytes(0x6632, bytearray([0xA9, 0x00, 0x85, 0xFE, 0x8D, 0x80, 0x07, 0x8D, 0x81, 0x07, 0x4C, 0xD9, 0x81]))

    rom.write_bytes(0x6642, bytearray([0xAD, 0x80, 0x07, 0xD0, 0x07, 0xA5, 0x4D, 0x85, 0x92, 0x4C, 0x4C, 0x9B, 0x60]))
    
    rom.write_bytes(0x6650, bytearray([0xA9, 0x01, 0x8D, 0x83, 0x07, 0x4C, 0x40 ,0xA0]))

    rom.write_bytes(0x1B9E, bytearray([0x05]))


def data_main(rom: LocalRom) -> None:
    rom.write_bytes(0x6852, bytearray([0x88, 0x9C, 0x74, 0x9C, 0x27, 0x9C, 0x16, 0x9D, 0xE1, 0x9B, 0xF8, 0x9B, 0xBA, 0x9B, 0xCA, 0x9B]))
    rom.write_bytes(0x6862, bytearray([0x3F, 0x9C, 0x5C, 0x9C, 0x61, 0x9C, 0x66, 0x9C, 0x36, 0x95]))

    rom.write_bytes(0x8D50, bytearray([0x00, 0x42, 0xE7, 0xE7, 0x06, 0x1F, 0x3E, 0x1E, 0x18, 0x3C, 0x18, 0x00, 0xE7, 0xEF, 0x46, 0x06]))
    rom.write_bytes(0x8E30, bytearray([0x00, 0x42, 0xE7, 0xE7, 0x00, 0x18, 0x3C, 0x18, 0x18, 0x3C, 0x18, 0x00, 0xE7, 0xE7, 0x42, 0x00]))


def code_handlers(rom: LocalRom) -> None:
    rom.write_bytes(0x16FE, bytearray([0x4C, 0xC2, 0xE5]))  #Get Item
    rom.write_bytes(0x01E5, bytearray([0x4C, 0x22, 0xE6]))  #Init memory
    rom.write_bytes(0x01AF, bytearray([0x4C, 0x00, 0xE6]))  #Set starting difficulty
    rom.write_bytes(0x1B58, bytearray([0x4C, 0x32, 0xE6]))  #Dont set checkpoint when receiving an item
    rom.write_bytes(0x2A8D, bytearray([0x20, 0x40, 0xE6]))  #Write goal


def patch_rom(world, rom, player: int, multiworld):
    code_main(rom)
    data_main(rom)
    code_handlers(rom)

    for location in world.multiworld.get_locations(player):
        if location.address and location.name not in hidden_locations: #dont write local data for events
            if location.item.classification in [ItemClassification.progression, ItemClassification.progression_skip_balancing]:
                rom.write_bytes(local_locations[location.name], bytearray([0x05]))
            else:
                rom.write_bytes(local_locations[location.name], bytearray([0x02]))

    rom.write_bytes(0x7060, bytearray([world.options.cave_difficulty.value + 1]))
    rom.write_bytes(0x7061, bytearray([world.options.hidden_items.value]))
    rom.write_bytes(0x7062, bytearray([world.options.death_link.value]))

    from Main import __version__
    rom.name = bytearray(f'SPELUNKERAP{__version__.replace(".", "")[0:3]}_{player}_{world.multiworld.seed:11}\0', "utf8")[:21]
    rom.name.extend([0] * (21 - len(rom.name)))
    rom.write_bytes(0x007040, rom.name)

    player_name_length = 0
    for i, byte in enumerate(world.multiworld.player_name[player].encode("utf-8")):
        rom.write_byte(0x7051 + i, byte)
        player_name_length += 1
    rom.write_byte(0x7050, player_name_length)

    rom.write_file("token_patch.bin", rom.get_token_binary())


class SpelunkerProcPatch(APProcedurePatch, APTokenMixin):
    hash = [USHASH]
    game = "Spelunker"
    patch_file_ending = ".apsplunker"
    result_file_ending = ".nes"
    name: bytearray
    procedure = [
        ("apply_tokens", ["token_patch.bin"]),
    ]

    @classmethod
    def get_source_data(cls) -> bytes:
        return get_base_rom_bytes()

    def write_byte(self, offset, value):
        self.write_token(APTokenTypes.WRITE, offset, value.to_bytes(1, "little"))

    def write_bytes(self, offset, value: typing.Iterable[int]):
        self.write_token(APTokenTypes.WRITE, offset, bytes(value))


def get_base_rom_bytes(file_name: str = "") -> bytes:
    base_rom_bytes = getattr(get_base_rom_bytes, "base_rom_bytes", None)
    if not base_rom_bytes:
        file_name = get_base_rom_path(file_name)
        base_rom_bytes = bytes(Utils.read_snes_rom(open(file_name, "rb")))

        basemd5 = hashlib.md5()
        basemd5.update(base_rom_bytes)
        if USHASH != basemd5.hexdigest():
            raise Exception('Supplied Base Rom does not match known MD5 for US(1.0) release. '
                            'Get the correct game and version, then dump it')
        get_base_rom_bytes.base_rom_bytes = base_rom_bytes
    return base_rom_bytes

def get_base_rom_path(file_name: str = "") -> str:
    options: Utils.OptionsType = Utils.get_options()
    if not file_name:
        file_name = options["spelunker_options"]["rom_file"]
    if not os.path.exists(file_name):
        file_name = Utils.user_path(file_name)
    return file_name
