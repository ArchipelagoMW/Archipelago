import hashlib
import os
import typing
import Utils
from BaseClasses import ItemClassification
from worlds.Files import APProcedurePatch, APTokenMixin, APTokenTypes
from .local_data import local_locations, local_items, shop_items
USHASH = 'b4e732b3d742af1791605bcd7aa4a1c4'

input_item_ids = {
    0x5A1000: [0x0485, 0x01], #Silver Sword
    0x5A1001: [0x0485, 0x02], #Fire Sword
    0x5A1002: [0x0485, 0x03], #Ice Sword
    0x5A1003: [0x0485, 0x04], #Thunder Sword
    0x5A1004: [0x0485, 0x05], #Crystal Sword
    0x5A1005: [0x0485, 0x06], #Power Sword
    0x5A1006: [0x0485, 0x07], #Light Sword
    0x5A1007: [0x0485, 0x08], #Dagger
    0x5A1008: [0x0485, 0x09], #Fireballs
    0x5A1009: [0x0485, 0x0A], #Boomerang
    0x5A100A: [0x0485, 0x0B], #Ax
    0x5A100B: [0x0485, 0x0C], #Shovel
    0x5A100C: [0x0485, 0x0D], #Fire Armor
    0x5A100D: [0x0485, 0x0E], #Ice Armor
    0x5A100E: [0x0485, 0x0F], #Aqua Armor
    0x5A100F: [0x0485, 0x10], #Light Armor
    0x5A1010: [0x0485, 0x11], #Fire Shield
    0x5A1011: [0x0485, 0x12], #Ice Shield
    0x5A1012: [0x0485, 0x13], #Aqua Shield
    0x5A1013: [0x0485, 0x14], #Light Shield
    0x5A1014: [0x0485, 0x15], #Magic Wand
    0x5A1015: [0x0485, 0x16], #Ice Bell
    0x5A1016: [0x0485, 0x17], #Sun Ring
    0x5A1017: [0x0485, 0x18], #Power Fan
    0x5A1018: [0x0485, 0x19], #Elven Flute
    0x5A1019: [0x0485, 0x1A], #Sky Bell
    0x5A101A: [0x0485, 0x1B], #Light Stone
    0x5A101B: [0x0485, 0x1C], #Sun Stone
    0x5A101C: [0x0485, 0x1D], #Star Stone
    0x5A101D: [0x0485, 0x1E], #Aqua Stone
    0x5A101E: [0x0485, 0x1F], #Moon Stone
    0x5A101F: [0x0485, 0x20], #Light Spell
    0x5A1020: [0x0485, 0x22], #Sun Spell
    0x5A1021: [0x0485, 0x23], #Star Spell
    0x5A1022: [0x0485, 0x23], #Aqua Spell
    0x5A1023: [0x0485, 0x24], #Moon Spell

    0x5A1024: [0x0485, 0x26], #Shove
    0x5A1025: [0x0485, 0x27], #Up Jab
    0x5A1026: [0x0485, 0x28], #Down Jab

    0x5A1027: [0x0485, 0xE0], #Life Bottle
    0x5A1028: [0x0485, 0xE1], #Magic Bottle

    0x5A1029: [0x0485, 0xE2], #500 Coins
    0x5A102A: [0x0485, 0xE3], #1000 Coins
    0x5A102B: [0x0485, 0xE4], #2000 Coins
    0x5A102C: [0x0485, 0xE5], #5000 Coins

}

location_flag_table = {
    #Poka-Poka
    0x5A1000: [0x491, 0], #Poka-Poka Lake
    0x5A1001: [0x497, 0], #Poka-Poka Tree Chest
    0x5A1002: [0x492, 0], #Poka-Poka Digging Chest
    0x5A1003: [0x493, 0], #Poka-Poka Shove
    0x5A1004: [0x496, 0], #Sun Chest
    0x5A1005: [0x53E, 0], #Poka-Poka Elven Flute 1
    0x5A1006: [0x490, 0], #First Chest
    0x5A1007: [0x494, 0], #Moon Chest
    0x5A1008: [0x495, 0], #Poka-Poka Down Stab
    0x5A1009: [0x480, 0], #Poka-Poka Elven Flute 2
    0x5A100A: [0x487, 0], #Poka-Poka Boss
    ###################################################
    #Boa-Boa
    0x5A100B: [0x53D, 0], #First room clouds
    0x5A100C: [0x4EE, 0], #First room sun bridge
    0x5A100D: [0x4EF, 0], #Elven Flute 1
    0x5A100E: [0x4F0, 0], #Dig Chest
    0x5A100F: [0x4F1, 0], #Lava Lake
    0x5A1010: [0x4F2, 0], #West Shaft
    0x5A1011: [0x4F3, 0], #East Shaft
    0x5A1012: [0x488, 0], #Elven Flute 2
    0x5A1013: [0x48A, 0], #Boss
    ##################################################
    #Hiya-Hiya
    0x5A1014: [0x4A9, 0], #Cloud Chest
    0x5A1015: [0x4AA, 0], #Dig Chest
    0x5A1016: [0x4AB, 0], #Sun Chest
    0x5A1017: [0x4AC, 0], #West Tower Fall
    0x5A1018: [0x4AD, 0], #Up Block Chest
    0x5A1019: [0x4AE, 0], #Trap Chest
    0x5A101A: [0x4AF, 0], #Ice Cube Chest
    0x5A101B: [0x4B0, 0], #East Tower Fall
    0x5A101C: [0x53F, 0], #Elven Flute 1
    0x5A101D: [0x48D, 0], #Elven Flute 2
    0x5A101E: [0x48B, 0], #Boss
    ###################################################
    #Puka-Puka
    0x5A101F: [0x4C6, 0], #Light Block Chest
    0x5A1020: [0x4C7, 0], #Down Jab Chest
    0x5A1021: [0x4C8, 0], #Star Block Chest
    0x5A1022: [0x4C9, 0], #Up Jab Chest
    0x5A1023: [0x4CA, 0], #Middle at the Fork
    0x5A1024: [0x4CB, 0], #Aqua Blocks
    0x5A1025: [0x4CD, 0], #Elven Flute 2
    0x5A1026: [0x4CE, 0], #Elven Flute 1
    0x5A1027: [0x4F5, 0], #Platform Room
    0x5A1028: [0x4F6, 0], #Spring Room
    0x5A1029: [0x51E, 0], #Elven Flute 3
    0x5A102A: [0x489, 0], #Boss
    ###################################################
    #Sala-Sala
    0x5A102B: [0x504, 0], #Lowest Level Left Chest
    0x5A102C: [0x505, 0], #Statue and up blocks
    0x5A102D: [0x506, 0], #Pyramid Star Chest
    0x5A102E: [0x507, 0], #Top of the Pyramid
    0x5A102F: [0x508, 0], #All Switches Chest
    0x5A1030: [0x509, 0], #Elven Flute 1
    0x5A1031: [0x50A, 0], #Lower Right Pyramid Chest
    0x5A1032: [0x50B, 0], #Secret Elevator Chest
    0x5A1033: [0x482, 0], #Elven Flute 2
    0x5A1034: [0x484, 0], #Boss
    ####################################################
    #Fuwa-Fuwa
    0x5A1035: [0x515, 0], #Block Maze
    0x5A1036: [0x516, 0], #First Plant Room
    0x5A1037: [0x517, 0], #Light Block Chest
    0x5A1038: [0x518, 0], #Dig Chest
    0x5A1039: [0x519, 0], #Final Chest
    0x5A103A: [0x483, 0], #Boss
    ####################################################
    #Overworld
    0x5A103B: [0x4D8, 0], #Muscle Lizard
    0x5A103C: [0x4DD, 0], #Ice Cave
    0x5A103D: [0x4E0, 0], #100 Coins
    0x5A103E: [0x4DC, 0], #Desert Island
    0x5A103F: [0x4DE, 0], #Tomb
    0x5A1040: [0x4E3, 0], #Saber Tooth
    0x5A1041: [0x4DF, 0], #North Cave
    0x5A1042: [0x4E8, 0], #300 Coins
    0x5A1043: [0x4EA, 0], #500 Coins
    #################################################
    #Casino
    0x5A1045: [0x4E6, 0], #Casino 500 Coins
    0x5A1046: [0x4EB, 0], #Casino 1000 Coins
    0x5A1047: [0x4E1, 0], #Casino 2000 Coins
    0x5A1048: [0x4E2, 0], #Casino 3000 Coins
    0x5A1049: [0x4E4, 0], #Casino 5000 Coins
}

class LocalRom(object):

    def __init__(self, file, vanillaRom=None, name=None):
        self.name = name
        self.hash = hash
        self.orig_buffer = None

        with open(file, 'rb') as stream:
            self.buffer = Utils.read_snes_rom(stream)

    def read_bit(self, address: int, bit_number: int) -> bool:
        bitflag = 1 << bit_number
        return (self.buffer[address] & bitflag) != 0

    def read_byte(self, address: int) -> int:
        return self.buffer[address]

    def read_bytes(self, startaddress: int, length: int) -> bytes:
        return self.buffer[startaddress:startaddress + length]

    def write_byte(self, address: int, value: int):
        self.buffer[address] = value

    def write_bytes(self, startaddress: int, values):
        self.buffer[startaddress:startaddress + len(values)] = values

    def write_to_file(self, file):
        with open(file, 'wb') as outfile:
            outfile.write(self.buffer)

    def read_from_file(self, file):
        with open(file, 'rb') as stream:
            self.buffer = bytearray(stream.read())

def data_main(rom):
    rom.write_bytes(0x05B3B0, bytearray([0xff, 0xff, 0x4e, 0x04, 0x4f, 0x04, 0x50, 0x04, 0x51, 0x04, 0x52, 0x04, 0x53, 0x04, 0x54, 0x04]))
    rom.write_bytes(0x05B3C0, bytearray([0x55, 0x04, 0x56, 0x04, 0x57, 0x04, 0x58, 0x04, 0x59, 0x04, 0x5b, 0x04, 0x5c, 0x04, 0x5d, 0x04]))
    rom.write_bytes(0x05B3D0, bytearray([0x5e, 0x04, 0x60, 0x04, 0x61, 0x04, 0x62, 0x04, 0x63, 0x04, 0x64, 0x04, 0x66, 0x04, 0x67, 0x04]))
    rom.write_bytes(0x05B3E0, bytearray([0x68, 0x04, 0x69, 0x04, 0x6a, 0x04, 0x6b, 0x04, 0x6c, 0x04, 0x6d, 0x04, 0x6e, 0x04, 0x6f, 0x04]))
    rom.write_bytes(0x05B3F0, bytearray([0x70, 0x04, 0x71, 0x04, 0x72, 0x04, 0x73, 0x04, 0x74, 0x04, 0x75, 0x04, 0x7d, 0x04, 0x7e, 0x04]))
    rom.write_bytes(0x05B400, bytearray([0x7F, 0x04]))

    rom.write_bytes(0x082630, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x04, 0x88, 0x04]))
    rom.write_bytes(0x082640, bytearray([0x8a, 0x04, 0x8d, 0x04, 0x89, 0x04, 0x82, 0x04, 0x84, 0x04, 0x83, 0x04, 0xd8, 0x04, 0xdd, 0x04]))
    rom.write_bytes(0x082650, bytearray([0xdc, 0x04, 0xde, 0x04, 0xdf, 0x04, 0xe3, 0x04, 0xe8, 0x04, 0xea, 0x04, 0xe0, 0x04, 0xe4, 0x04]))
    rom.write_bytes(0x082660, bytearray([0xe2, 0x04, 0xe1, 0x04, 0xeB, 0x04, 0xE6, 0x05, 0x10, 0x15, 0x6b, 0x04, 0x72, 0x04, 0x6e, 0x04]))
    rom.write_bytes(0x082670, bytearray([0x6d, 0x04, 0x6f, 0x04, 0x74, 0x04, 0x69, 0x04, 0x6a, 0x04, 0x6c, 0x04, 0x66, 0x04, 0x64, 0x04]))
    rom.write_bytes(0x082680, bytearray([0x67, 0x04, 0x59, 0x04, 0x68, 0x04, 0x7f, 0x04, 0x7e, 0x04, 0x7d, 0x04, 0x54, 0x04, 0x5e, 0x04]))
    rom.write_bytes(0x082690, bytearray([0x63, 0x04, 0x57, 0x04, 0x3c, 0x05, 0x20, 0x00, 0x03, 0x00, 0x00, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x0826A0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x0826B0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x0826C0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x0826D0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x0826E0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x62, 0x2c, 0x54, 0x2c, 0x5d, 0x2c, 0x63]))
    rom.write_bytes(0x0826F0, bytearray([0x2c, 0x6d, 0x2c, 0x50, 0x2c, 0x61, 0x2c, 0x52, 0x2c, 0x57, 0x2c, 0x58, 0x2c, 0x5f, 0x2c, 0x54]))
    rom.write_bytes(0x082700, bytearray([0x2c, 0x5b, 0x2c, 0x50, 0x2c, 0x56, 0x2c, 0x5e, 0x2c, 0x90, 0x28, 0x58, 0x2c, 0x63, 0x2c, 0x54]))
    rom.write_bytes(0x082710, bytearray([0x2c, 0x5c, 0x2c, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x082720, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x082730, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x082740, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x082750, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0xf0, 0xef, 0x0a, 0xf0, 0x20]))
    rom.write_bytes(0x082760, bytearray([0xf0, 0x34, 0xf0, 0x50, 0xf0, 0x6c, 0xf0, 0x84, 0xf0, 0x9c, 0xf0, 0xaa, 0xf0, 0xbe, 0xf0, 0xd2]))
    rom.write_bytes(0x082770, bytearray([0xf0, 0xd8, 0xf0, 0xe6, 0xf0, 0xfc, 0xf0, 0x10, 0xf1, 0x26, 0xf1, 0x3e, 0xf1, 0x56, 0xf1, 0x6c]))
    rom.write_bytes(0x082780, bytearray([0xf1, 0x84, 0xf1, 0x9e, 0xf1, 0xa8, 0xf1, 0xba, 0xf1, 0xcc, 0xf1, 0xe0, 0xf1, 0xf8, 0xf1, 0x0a]))
    rom.write_bytes(0x082790, bytearray([0xf2, 0x22, 0xf2, 0x36, 0xf2, 0x4c, 0xf2, 0x62, 0xf2, 0x78, 0xf2, 0x90, 0xf2, 0xa6, 0xf2, 0xba]))
    rom.write_bytes(0x0827A0, bytearray([0xf2, 0xd0, 0xf2, 0xe6, 0xf2, 0xf2, 0xf2, 0x00, 0xf3, 0x12, 0xf3, 0x2a, 0xf3, 0x44, 0xf3, 0x58]))
    rom.write_bytes(0x0827B0, bytearray([0xf3, 0x70, 0xf3, 0x88, 0xf3, 0x50, 0xf6, 0xda, 0xf7, 0x15, 0xf7, 0x31, 0x05, 0x32, 0x05, 0x33]))
    rom.write_bytes(0x0827C0, bytearray([0x05, 0x34, 0x05, 0x35, 0x05, 0x8f, 0x04, 0xa5, 0x04, 0xd5, 0x04, 0xcc, 0x04, 0xf7, 0x04, 0x20]))
    rom.write_bytes(0x0827D0, bytearray([0x05, 0x28, 0x05, 0x29, 0x05, 0x2B, 0x05, 0x2A, 0x05, 0x27, 0x05])) #Contest 052A

    rom.write_bytes(0x04F580, bytearray([0x50, 0xF6])) #Special chest flag values, puts them at actual flags instead of their vanilla item
    rom.write_bytes(0x01911A, bytearray([0x80, 0x04]))
    rom.write_bytes(0x018C5A, bytearray([0x87, 0x04]))
    rom.write_bytes(0x01025E, bytearray([0x87, 0x04]))
    rom.write_bytes(0x0FC85D, bytearray([0x88, 0x04]))
    rom.write_bytes(0x01A7D0, bytearray([0x8A, 0x04]))
    rom.write_bytes(0x016CD2, bytearray([0x8A, 0x04]))
    rom.write_bytes(0x019B04, bytearray([0x8D, 0x04]))
    rom.write_bytes(0x011651, bytearray([0x8D, 0x04]))
    rom.write_bytes(0x038364, bytearray([0x89, 0x04]))
    rom.write_bytes(0x0179F6, bytearray([0x89, 0x04]))
    rom.write_bytes(0x0FE6CD, bytearray([0x82, 0x04]))
    rom.write_bytes(0x03CB8A, bytearray([0x84, 0x04]))
    rom.write_bytes(0x0140CB, bytearray([0x84, 0x04]))
    rom.write_bytes(0x02EDD5, bytearray([0x83, 0x04]))
    rom.write_bytes(0x014BC2, bytearray([0x83, 0x04]))
    rom.write_bytes(0x02F942, bytearray([0xD8, 0x04]))
    rom.write_bytes(0x039312, bytearray([0xDD, 0x04]))
    rom.write_bytes(0x0394A1, bytearray([0xDC, 0x04]))
    rom.write_bytes(0x039142, bytearray([0xDE, 0x04]))
    rom.write_bytes(0x039D83, bytearray([0xDF, 0x04]))
    rom.write_bytes(0x02FA1D, bytearray([0xE3, 0x04]))
    rom.write_bytes(0x0395CC, bytearray([0xE8, 0x04]))
    rom.write_bytes(0x039886, bytearray([0xEA, 0x04]))
    rom.write_bytes(0x039ACD, bytearray([0xE0, 0x04]))
    rom.write_bytes(0x01FC1F, bytearray([0xE4, 0x04]))
    rom.write_bytes(0x01FBA5, bytearray([0xE2, 0x04]))
    rom.write_bytes(0x01FB2B, bytearray([0xE1, 0x04]))
    rom.write_bytes(0x01FAB1, bytearray([0xEB, 0x04]))

    rom.write_byte(0x030485, 0x4D)#Map tile overrides
    rom.write_byte(0x030BCE, 0x4D)
    rom.write_byte(0x030CDE, 0x4D)
    rom.write_byte(0x030E8C, 0x4D)
    rom.write_byte(0x0311A5, 0x4D)
    rom.write_byte(0x030F92, 0x4D)
    rom.write_byte(0x0310B2, 0x4D)
    rom.write_byte(0x030DB5, 0x4D)
    rom.write_byte(0x030782, 0x4D)
    rom.write_byte(0x030941, 0x4D)
    rom.write_byte(0x03086D, 0x4D)
    rom.write_byte(0x030A23, 0x4D)
    rom.write_byte(0x032BEE, 0x4D)
    rom.write_byte(0x032D75, 0x4D)
    rom.write_byte(0x033032, 0x4D)
    rom.write_byte(0x032F85, 0x4D)
    rom.write_byte(0x0330E3, 0x4D)
    rom.write_byte(0x033194, 0x4D)
    rom.write_byte(0x033450, 0x4D)
    rom.write_byte(0x0337C5, 0x4D)
    rom.write_byte(0x033923, 0x4D)
    rom.write_byte(0x033241, 0x4D)
    rom.write_byte(0x0335B2, 0x4D)
    rom.write_byte(0x033663, 0x4D)
    rom.write_byte(0x0339D4, 0x4D)
    rom.write_byte(0x0332EF, 0x4D)
    rom.write_byte(0x03339F, 0x4D)
    rom.write_byte(0x033501, 0x4D)
    rom.write_byte(0x01FC9A, 0x4D)
    rom.write_byte(0x01FCA0, 0x4D)
    rom.write_byte(0x035833, 0x4D)
    rom.write_byte(0x0363F3, 0x4D)
    rom.write_byte(0x0362B7, 0x4D)
    rom.write_byte(0x0364A4, 0x4D)
    rom.write_byte(0x036555, 0x4D)
    rom.write_byte(0x036602, 0x4D)
    rom.write_byte(0x03E35A, 0x83)

    rom.write_bytes(0x082210, bytearray([0x00, 0x00, 0x03, 0x03, 0x04, 0x05, 0x3c, 0x05, 0x5e, 0x1a, 0x7f, 0x3b, 0x7a, 0x47, 0x44, 0x0b]))
    rom.write_bytes(0x082220, bytearray([0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x3f, 0x01, 0x7f, 0x20, 0x7e, 0x01, 0x46, 0x00, 0x2a, 0x30]))
    rom.write_bytes(0x082230, bytearray([0x00, 0x00, 0xc0, 0xc0, 0x60, 0xe0, 0x78, 0xc4, 0x44, 0x1a, 0xc4, 0xba, 0x38, 0xc6, 0x54, 0x8a]))
    rom.write_bytes(0x082240, bytearray([0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xb8, 0xc4, 0xe4, 0x3a, 0x44, 0xba, 0x40, 0x02, 0x2a, 0x30]))
    rom.write_bytes(0x082250, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082260, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082270, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082280, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082290, bytearray([0x00, 0x00, 0x03, 0x03, 0x04, 0x05, 0x3c, 0x05, 0x5e, 0x1a, 0x7f, 0x3b, 0x7a, 0x47, 0x44, 0x0b]))
    rom.write_bytes(0x0822a0, bytearray([0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x3f, 0x01, 0x7f, 0x20, 0x7e, 0x01, 0x46, 0x00, 0x2a, 0x30]))
    rom.write_bytes(0x0822b0, bytearray([0x00, 0x00, 0xc0, 0xc0, 0x60, 0xe0, 0x78, 0xc4, 0x44, 0x1a, 0xc4, 0xba, 0x38, 0xd6, 0x5c, 0x9a]))
    rom.write_bytes(0x0822c0, bytearray([0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xb8, 0xc4, 0xe4, 0x3a, 0x44, 0xba, 0x50, 0x02, 0x3a, 0x20]))
    rom.write_bytes(0x0822d0, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x0822e0, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x0822f0, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082300, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082310, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082320, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082330, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082340, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082350, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082360, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082370, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082380, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082390, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x0823a0, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x0823b0, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x0823c0, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x0823d0, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x0823e0, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x0823f0, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082400, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082410, bytearray([0x44, 0x00, 0x41, 0x29, 0x33, 0x0b, 0x03, 0x41, 0x04, 0x3c, 0x03, 0x07, 0x00, 0x03, 0x00, 0x00]))
    rom.write_bytes(0x082420, bytearray([0x03, 0x38, 0x2e, 0x12, 0x0c, 0x40, 0x06, 0x3a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082430, bytearray([0x7c, 0x42, 0xb6, 0x28, 0xbe, 0xa0, 0x7c, 0x22, 0xa0, 0x3c, 0xc0, 0xe0, 0x00, 0xc0, 0x00, 0x00]))
    rom.write_bytes(0x082440, bytearray([0x82, 0x38, 0xc8, 0x92, 0x40, 0x02, 0xc0, 0x4c, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082450, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082460, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082470, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082480, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x082490, bytearray([0x44, 0x00, 0x41, 0x29, 0x33, 0x0b, 0x03, 0x41, 0x04, 0x3c, 0x03, 0x07, 0x00, 0x03, 0x00, 0x00]))
    rom.write_bytes(0x0824a0, bytearray([0x03, 0x38, 0x2e, 0x12, 0x0c, 0x40, 0x06, 0x3a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x0824b0, bytearray([0x3c, 0x3e, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x7e, 0xfc, 0x7c, 0xfc, 0xfc, 0x00, 0xc0, 0x00, 0x00]))
    rom.write_bytes(0x0824c0, bytearray([0xfe, 0x40, 0xfe, 0x00, 0xfe, 0xc6, 0xfc, 0x44, 0xfc, 0xc4, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00]))
    
    rom.write_bytes(0x082C50, bytearray([0x00, 0x00, 0x6c, 0x5d, 0xe9, 0x18, 0x5e, 0x05, 0xb2, 0x04, 0x93, 0x06, 0xf3, 0x6d, 0x5d, 0x3f]))
    rom.write_bytes(0x082C60, bytearray([0xee, 0x7e, 0x1a, 0x5e, 0xf4, 0x3f, 0x56, 0x08, 0xff, 0x7f, 0x56, 0x09, 0x5f, 0x29, 0x77, 0x22]))#Ap Item Palette

    rom.write_bytes(0x0cb0ae, bytearray([0x2f, 0x00, 0x01, 0x01, 0x0e, 0x01, 0x14, 0x01, 0x00, 0x01, 0x14, 0x01, 0x0f, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cb0be, bytearray([0x02, 0x01, 0x15, 0x01, 0x19, 0x01, 0x00, 0x01, 0x0d, 0x01, 0x19, 0x01, 0x00, 0x01, 0x03, 0x01]))
    rom.write_bytes(0x0cb0ce, bytearray([0x0f, 0x01, 0x0f, 0x01, 0x0c, 0x01, 0x00, 0x01, 0x81, 0x00, 0x00, 0x03, 0x81, 0x00, 0x06, 0x01]))
    rom.write_bytes(0x0cb0de, bytearray([0x0f, 0x01, 0x12, 0x01, 0x00, 0x01, 0xfe, 0x03, 0x1c, 0x01, 0x81, 0x00, 0x21, 0x00, 0x14, 0x01]))
    rom.write_bytes(0x0cb0ee, bytearray([0x21, 0x01, 0x13, 0x01, 0x00, 0x01, 0x19, 0x01, 0x0f, 0x01, 0x15, 0x01, 0x12, 0x01, 0x13, 0x01]))
    rom.write_bytes(0x0cb0fe, bytearray([0x00, 0x01, 0x06, 0x01, 0x0f, 0x01, 0x12, 0x01, 0x00, 0x01, 0x0a, 0x01, 0x15, 0x01, 0x13, 0x01]))
    rom.write_bytes(0x0cb10e, bytearray([0x14, 0x01, 0x00, 0x01, 0x04, 0x00, 0x01, 0x00, 0x01, 0x00, 0x81, 0x00, 0x03, 0x01, 0x0f, 0x01]))
    rom.write_bytes(0x0cb11e, bytearray([0x09, 0x01, 0x0e, 0x01, 0x13, 0x01, 0x27, 0x01, 0xf5, 0x00, 0x80, 0x00, 0x0c, 0x01, 0x0f, 0x01]))
    rom.write_bytes(0x0cb12e, bytearray([0x03, 0x01, 0x0b, 0x01, 0x13, 0x01, 0x81, 0x00, 0x17, 0x01, 0x09, 0x01, 0x14, 0x01, 0x08, 0x01]))
    rom.write_bytes(0x0cb13e, bytearray([0x00, 0x01, 0x10, 0x01, 0x15, 0x01, 0x0e, 0x01, 0x09, 0x01, 0x13, 0x01, 0x08, 0x01, 0x09, 0x01]))
    rom.write_bytes(0x0cb14e, bytearray([0x0e, 0x01, 0x07, 0x01, 0x00, 0x01, 0x02, 0x01, 0x0c, 0x01, 0x0f, 0x01, 0x17, 0x01, 0x13, 0x01]))
    rom.write_bytes(0x0cb15e, bytearray([0x27, 0x01, 0x81, 0x00, 0x19, 0x00, 0x0c, 0x01, 0x0c, 0x01, 0x00, 0x01, 0x06, 0x01, 0x0f, 0x01]))
    rom.write_bytes(0x0cb16e, bytearray([0x12, 0x01, 0x00, 0x01, 0x0f, 0x01, 0x0e, 0x01, 0x0c, 0x01, 0x19, 0x01, 0x00, 0x01, 0x04, 0x00]))
    rom.write_bytes(0x0cb17e, bytearray([0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x03, 0x01, 0x0f, 0x01, 0x09, 0x01, 0x0e, 0x01, 0x13, 0x01]))
    rom.write_bytes(0x0cb18e, bytearray([0x27, 0x01, 0xf5, 0x00, 0x80, 0x00]))

    rom.write_bytes(0x0cb194, bytearray([0x2c, 0x00, 0x08, 0x01, 0x01, 0x01, 0x0e, 0x01, 0x0b, 0x01, 0x13, 0x01, 0x00, 0x01, 0x06, 0x01]))
    rom.write_bytes(0x0cb1a4, bytearray([0x0f, 0x01, 0x12, 0x01, 0x00, 0x01, 0x14, 0x01, 0x08, 0x01, 0x05, 0x01, 0x00, 0x01, 0x0d, 0x01]))
    rom.write_bytes(0x0cb1b4, bytearray([0x0f, 0x01, 0x0e, 0x01, 0x05, 0x01, 0x19, 0x01, 0x26, 0x01, 0x81, 0x00, 0x13, 0x01, 0x15, 0x01]))
    rom.write_bytes(0x0cb1c4, bytearray([0x03, 0x01, 0x0b, 0x01, 0x05, 0x01, 0x12, 0x01, 0x1b, 0x01, 0xf4, 0x00]))

    rom.write_bytes(0x0cba3a, bytearray([0x2f, 0x00, 0x01, 0x01, 0x0e, 0x01, 0x14, 0x01, 0x00, 0x01, 0x14, 0x01, 0x0f, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cba4a, bytearray([0x02, 0x01, 0x15, 0x01, 0x19, 0x01, 0x00, 0x01, 0x0d, 0x01, 0x19, 0x01, 0x00, 0x01, 0x03, 0x01]))
    rom.write_bytes(0x0cba5a, bytearray([0x0f, 0x01, 0x0f, 0x01, 0x0c, 0x01, 0x00, 0x01, 0x81, 0x00, 0x00, 0x03, 0x81, 0x00, 0x06, 0x01]))
    rom.write_bytes(0x0cba6a, bytearray([0x0f, 0x01, 0x12, 0x01, 0x00, 0x01, 0xfe, 0x03, 0x1c, 0x01, 0x81, 0x00, 0x21, 0x00, 0x14, 0x01]))
    rom.write_bytes(0x0cba7a, bytearray([0x21, 0x01, 0x13, 0x01, 0x00, 0x01, 0x19, 0x01, 0x0f, 0x01, 0x15, 0x01, 0x12, 0x01, 0x13, 0x01]))
    rom.write_bytes(0x0cba8a, bytearray([0x00, 0x01, 0x06, 0x01, 0x0f, 0x01, 0x12, 0x01, 0x00, 0x01, 0x14, 0x01, 0x08, 0x01, 0x05, 0x01]))
    rom.write_bytes(0x0cba9a, bytearray([0x00, 0x01, 0x0c, 0x01, 0x0f, 0x01, 0x17, 0x01, 0x26, 0x01, 0x81, 0x00, 0x0c, 0x01, 0x0f, 0x01]))
    rom.write_bytes(0x0cbaaa, bytearray([0x17, 0x01, 0x00, 0x01, 0x10, 0x01, 0x12, 0x01, 0x09, 0x01, 0x03, 0x01, 0x05, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cbaba, bytearray([0x0f, 0x01, 0x06, 0x01, 0x00, 0x01, 0x06, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x03, 0x01]))
    rom.write_bytes(0x0cbaca, bytearray([0x0f, 0x01, 0x09, 0x01, 0x0e, 0x01, 0x13, 0x01, 0x27, 0x01, 0xf5, 0x00, 0x80, 0x00]))

    rom.write_bytes(0x0cbAE0, bytearray([0x2c, 0x00, 0x08, 0x01, 0x01, 0x01, 0x0e, 0x01, 0x0b, 0x01, 0x13, 0x01, 0x00, 0x01, 0x06, 0x01]))
    rom.write_bytes(0x0cbAF0, bytearray([0x0f, 0x01, 0x12, 0x01, 0x00, 0x01, 0x14, 0x01, 0x08, 0x01, 0x05, 0x01, 0x00, 0x01, 0x0d, 0x01]))
    rom.write_bytes(0x0cbB00, bytearray([0x0f, 0x01, 0x0e, 0x01, 0x05, 0x01, 0x19, 0x01, 0x26, 0x01, 0x81, 0x00, 0x13, 0x01, 0x15, 0x01]))
    rom.write_bytes(0x0cbB10, bytearray([0x03, 0x01, 0x0b, 0x01, 0x05, 0x01, 0x12, 0x01, 0x1b, 0x01, 0xf4, 0x00]))

    rom.write_bytes(0x0cac34, bytearray([0x2f, 0x00, 0x01, 0x01, 0x0e, 0x01, 0x14, 0x01, 0x00, 0x01, 0x14, 0x01, 0x0f, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cac44, bytearray([0x02, 0x01, 0x15, 0x01, 0x19, 0x01, 0x00, 0x01, 0x0d, 0x01, 0x19, 0x01, 0x00, 0x01, 0x03, 0x01]))
    rom.write_bytes(0x0cac54, bytearray([0x0f, 0x01, 0x0f, 0x01, 0x0c, 0x01, 0x00, 0x01, 0x81, 0x00, 0x00, 0x03, 0x81, 0x00, 0x06, 0x01]))
    rom.write_bytes(0x0cac64, bytearray([0x0f, 0x01, 0x12, 0x01, 0x00, 0x01, 0xfe, 0x03, 0x1c, 0x01, 0x81, 0x00, 0x21, 0x00, 0x14, 0x01]))
    rom.write_bytes(0x0cac74, bytearray([0x21, 0x01, 0x13, 0x01, 0x00, 0x01, 0x19, 0x01, 0x0f, 0x01, 0x15, 0x01, 0x12, 0x01, 0x13, 0x01]))
    rom.write_bytes(0x0cac84, bytearray([0x00, 0x01, 0x06, 0x01, 0x0f, 0x01, 0x12, 0x01, 0x00, 0x01, 0x0f, 0x01, 0x0e, 0x01, 0x05, 0x01]))
    rom.write_bytes(0x0cac94, bytearray([0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x13, 0x01, 0x19, 0x01, 0x00, 0x01, 0x81, 0x00, 0x10, 0x01]))
    rom.write_bytes(0x0caca4, bytearray([0x01, 0x01, 0x19, 0x01, 0x0d, 0x01, 0x05, 0x01, 0x0e, 0x01, 0x14, 0x01, 0x00, 0x01, 0x0f, 0x01]))
    rom.write_bytes(0x0cacb4, bytearray([0x06, 0x01, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x03, 0x01, 0x0f, 0x01]))
    rom.write_bytes(0x0cacc4, bytearray([0x09, 0x01, 0x0e, 0x01, 0x13, 0x01, 0x27, 0x01, 0xf5, 0x00, 0x80, 0x00]))

    rom.write_bytes(0x0cAD1C, bytearray([0x2c, 0x00, 0x08, 0x01, 0x01, 0x01, 0x0e, 0x01, 0x0b, 0x01, 0x13, 0x01, 0x00, 0x01, 0x06, 0x01]))
    rom.write_bytes(0x0cAD2C, bytearray([0x0f, 0x01, 0x12, 0x01, 0x00, 0x01, 0x14, 0x01, 0x08, 0x01, 0x05, 0x01, 0x00, 0x01, 0x0d, 0x01]))
    rom.write_bytes(0x0cAD3C, bytearray([0x0f, 0x01, 0x0e, 0x01, 0x05, 0x01, 0x19, 0x01, 0x26, 0x01, 0x81, 0x00, 0x13, 0x01, 0x15, 0x01]))
    rom.write_bytes(0x0cAD4C, bytearray([0x03, 0x01, 0x0b, 0x01, 0x05, 0x01, 0x12, 0x01, 0x1b, 0x01, 0xf4, 0x00]))

    rom.write_bytes(0x0ceff0, bytearray([0x2b, 0x00, 0x09, 0x01, 0x0c, 0x01, 0x16, 0x01, 0x05, 0x01, 0x12, 0x01, 0x00, 0x01, 0x2b, 0x00]))
    rom.write_bytes(0x0cf000, bytearray([0x17, 0x01, 0x0f, 0x01, 0x12, 0x01, 0x04, 0x01, 0xff, 0x03, 0x1e, 0x00, 0x09, 0x01, 0x12, 0x01]))
    rom.write_bytes(0x0cf010, bytearray([0x05, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x17, 0x01, 0x0f, 0x01, 0x12, 0x01, 0x04, 0x01, 0xff, 0x03]))
    rom.write_bytes(0x0cf020, bytearray([0x21, 0x00, 0x03, 0x01, 0x05, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x17, 0x01, 0x0f, 0x01, 0x12, 0x01]))
    rom.write_bytes(0x0cf030, bytearray([0x04, 0x01, 0xff, 0x03, 0x2c, 0x00, 0x08, 0x01, 0x15, 0x01, 0x0e, 0x01, 0x04, 0x01, 0x05, 0x01]))
    rom.write_bytes(0x0cf040, bytearray([0x12, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x17, 0x01, 0x0f, 0x01, 0x12, 0x01, 0x04, 0x01, 0xff, 0x03]))
    rom.write_bytes(0x0cf050, bytearray([0x1b, 0x00, 0x12, 0x01, 0x19, 0x01, 0x13, 0x01, 0x14, 0x01, 0x01, 0x01, 0x0c, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cf060, bytearray([0x2b, 0x00, 0x17, 0x01, 0x0f, 0x01, 0x12, 0x01, 0x04, 0x01, 0xff, 0x03, 0x28, 0x00, 0x0f, 0x01]))
    rom.write_bytes(0x0cf070, bytearray([0x17, 0x01, 0x05, 0x01, 0x12, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x17, 0x01, 0x0f, 0x01, 0x12, 0x01]))
    rom.write_bytes(0x0cf080, bytearray([0x04, 0x01, 0xff, 0x03, 0x24, 0x00, 0x09, 0x01, 0x07, 0x01, 0x08, 0x01, 0x14, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cf090, bytearray([0x2b, 0x00, 0x17, 0x01, 0x0f, 0x01, 0x12, 0x01, 0x04, 0x01, 0xff, 0x03, 0x1c, 0x00, 0x01, 0x01]))
    rom.write_bytes(0x0cf0a0, bytearray([0x07, 0x01, 0x07, 0x01, 0x05, 0x01, 0x12, 0x01, 0xff, 0x03, 0x1e, 0x00, 0x09, 0x01, 0x12, 0x01]))
    rom.write_bytes(0x0cf0b0, bytearray([0x05, 0x01, 0x02, 0x01, 0x01, 0x01, 0x0c, 0x01, 0x0c, 0x01, 0x13, 0x01, 0xff, 0x03, 0x1a, 0x00]))
    rom.write_bytes(0x0cf0c0, bytearray([0x0f, 0x01, 0x0f, 0x01, 0x0d, 0x01, 0x05, 0x01, 0x12, 0x01, 0x01, 0x01, 0x0e, 0x01, 0x07, 0x01]))
    rom.write_bytes(0x0cf0d0, bytearray([0xff, 0x03, 0x19, 0x00, 0x18, 0x01, 0xff, 0x03, 0x2b, 0x00, 0x08, 0x01, 0x0f, 0x01, 0x16, 0x01]))
    rom.write_bytes(0x0cf0e0, bytearray([0x05, 0x01, 0x0c, 0x01, 0xff, 0x03, 0x1e, 0x00, 0x09, 0x01, 0x12, 0x01, 0x05, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cf0f0, bytearray([0x19, 0x00, 0x12, 0x01, 0x0d, 0x01, 0x0f, 0x01, 0x12, 0x01, 0xff, 0x03, 0x21, 0x00, 0x03, 0x01]))
    rom.write_bytes(0x0cf100, bytearray([0x05, 0x01, 0x00, 0x01, 0x19, 0x00, 0x12, 0x01, 0x0d, 0x01, 0x0f, 0x01, 0x12, 0x01, 0xff, 0x03]))
    rom.write_bytes(0x0cf110, bytearray([0x19, 0x00, 0x11, 0x01, 0x15, 0x01, 0x01, 0x01, 0x00, 0x01, 0x19, 0x00, 0x12, 0x01, 0x0d, 0x01]))
    rom.write_bytes(0x0cf120, bytearray([0x0f, 0x01, 0x12, 0x01, 0xff, 0x03, 0x24, 0x00, 0x09, 0x01, 0x07, 0x01, 0x08, 0x01, 0x14, 0x01]))
    rom.write_bytes(0x0cf130, bytearray([0x00, 0x01, 0x19, 0x00, 0x12, 0x01, 0x0d, 0x01, 0x0f, 0x01, 0x12, 0x01, 0xff, 0x03, 0x1e, 0x00]))
    rom.write_bytes(0x0cf140, bytearray([0x09, 0x01, 0x12, 0x01, 0x05, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x08, 0x01, 0x09, 0x01, 0x05, 0x01]))
    rom.write_bytes(0x0cf150, bytearray([0x0c, 0x01, 0x04, 0x01, 0xff, 0x03, 0x21, 0x00, 0x03, 0x01, 0x05, 0x01, 0x00, 0x01, 0x2b, 0x00]))
    rom.write_bytes(0x0cf160, bytearray([0x08, 0x01, 0x09, 0x01, 0x05, 0x01, 0x0c, 0x01, 0x04, 0x01, 0xff, 0x03, 0x19, 0x00, 0x11, 0x01]))
    rom.write_bytes(0x0cf170, bytearray([0x15, 0x01, 0x01, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x08, 0x01, 0x09, 0x01, 0x05, 0x01, 0x0c, 0x01]))
    rom.write_bytes(0x0cf180, bytearray([0x04, 0x01, 0xff, 0x03, 0x24, 0x00, 0x09, 0x01, 0x07, 0x01, 0x08, 0x01, 0x14, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cf190, bytearray([0x2b, 0x00, 0x08, 0x01, 0x09, 0x01, 0x05, 0x01, 0x0c, 0x01, 0x04, 0x01, 0xff, 0x03, 0x2f, 0x00]))
    rom.write_bytes(0x0cf1a0, bytearray([0x01, 0x01, 0x0e, 0x01, 0x04, 0x01, 0xff, 0x03, 0x21, 0x00, 0x03, 0x01, 0x05, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cf1b0, bytearray([0x1a, 0x00, 0x05, 0x01, 0x0c, 0x01, 0x0c, 0x01, 0xff, 0x03, 0x2b, 0x00, 0x15, 0x01, 0x0e, 0x01]))
    rom.write_bytes(0x0cf1c0, bytearray([0x00, 0x01, 0x2a, 0x00, 0x09, 0x01, 0x0e, 0x01, 0x07, 0x01, 0xff, 0x03, 0x28, 0x00, 0x0f, 0x01]))
    rom.write_bytes(0x0cf1d0, bytearray([0x17, 0x01, 0x05, 0x01, 0x12, 0x01, 0x00, 0x01, 0x1e, 0x00, 0x01, 0x01, 0x0e, 0x01, 0xff, 0x03]))
    rom.write_bytes(0x0cf1e0, bytearray([0x1d, 0x00, 0x0c, 0x01, 0x16, 0x01, 0x05, 0x01, 0x0e, 0x01, 0x00, 0x01, 0x1e, 0x00, 0x0c, 0x01]))
    rom.write_bytes(0x0cf1f0, bytearray([0x15, 0x01, 0x14, 0x01, 0x05, 0x01, 0xff, 0x03, 0x2b, 0x00, 0x0b, 0x01, 0x19, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cf200, bytearray([0x1a, 0x00, 0x05, 0x01, 0x0c, 0x01, 0x0c, 0x01, 0xff, 0x03, 0x24, 0x00, 0x09, 0x01, 0x07, 0x01]))
    rom.write_bytes(0x0cf210, bytearray([0x08, 0x01, 0x14, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x14, 0x01, 0x0f, 0x01, 0x0e, 0x01, 0x05, 0x01]))
    rom.write_bytes(0x0cf220, bytearray([0xff, 0x03, 0x2b, 0x00, 0x15, 0x01, 0x0e, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x14, 0x01, 0x0f, 0x01]))
    rom.write_bytes(0x0cf230, bytearray([0x0e, 0x01, 0x05, 0x01, 0xff, 0x03, 0x2b, 0x00, 0x14, 0x01, 0x01, 0x01, 0x12, 0x01, 0x00, 0x01]))
    rom.write_bytes(0x0cf240, bytearray([0x2b, 0x00, 0x14, 0x01, 0x0f, 0x01, 0x0e, 0x01, 0x05, 0x01, 0xff, 0x03, 0x19, 0x00, 0x11, 0x01]))
    rom.write_bytes(0x0cf250, bytearray([0x15, 0x01, 0x01, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x14, 0x01, 0x0f, 0x01, 0x0e, 0x01, 0x05, 0x01]))
    rom.write_bytes(0x0cf260, bytearray([0xff, 0x03, 0x25, 0x00, 0x0f, 0x01, 0x0f, 0x01, 0x0e, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x14, 0x01]))
    rom.write_bytes(0x0cf270, bytearray([0x0f, 0x01, 0x0e, 0x01, 0x05, 0x01, 0xff, 0x03, 0x24, 0x00, 0x09, 0x01, 0x07, 0x01, 0x08, 0x01]))
    rom.write_bytes(0x0cf280, bytearray([0x14, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x10, 0x01, 0x05, 0x01, 0x0c, 0x01, 0x0c, 0x01, 0xff, 0x03]))
    rom.write_bytes(0x0cf290, bytearray([0x2b, 0x00, 0x14, 0x01, 0x01, 0x01, 0x12, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x10, 0x01, 0x05, 0x01]))
    rom.write_bytes(0x0cf2a0, bytearray([0x0c, 0x01, 0x0c, 0x01, 0xff, 0x03, 0x2b, 0x00, 0x15, 0x01, 0x0e, 0x01, 0x00, 0x01, 0x2b, 0x00]))
    rom.write_bytes(0x0cf2b0, bytearray([0x10, 0x01, 0x05, 0x01, 0x0c, 0x01, 0x0c, 0x01, 0xff, 0x03, 0x19, 0x00, 0x11, 0x01, 0x15, 0x01]))
    rom.write_bytes(0x0cf2c0, bytearray([0x01, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x10, 0x01, 0x05, 0x01, 0x0c, 0x01, 0x0c, 0x01, 0xff, 0x03]))
    rom.write_bytes(0x0cf2d0, bytearray([0x25, 0x00, 0x0f, 0x01, 0x0f, 0x01, 0x0e, 0x01, 0x00, 0x01, 0x2b, 0x00, 0x10, 0x01, 0x05, 0x01]))
    rom.write_bytes(0x0cf2e0, bytearray([0x0c, 0x01, 0x0c, 0x01, 0xff, 0x03, 0x2b, 0x00, 0x08, 0x01, 0x0f, 0x01, 0x16, 0x01, 0x05, 0x01]))
    rom.write_bytes(0x0cf2f0, bytearray([0xff, 0x03, 0x2d, 0x00, 0x10, 0x01, 0x00, 0x01, 0x22, 0x00, 0x01, 0x01, 0x02, 0x01, 0xff, 0x03]))
    rom.write_bytes(0x0cf300, bytearray([0x1c, 0x00, 0x0f, 0x01, 0x17, 0x01, 0x0e, 0x01, 0x00, 0x01, 0x22, 0x00, 0x01, 0x01, 0x02, 0x01]))
    rom.write_bytes(0x0cf310, bytearray([0xff, 0x03, 0x24, 0x00, 0x09, 0x01, 0x06, 0x01, 0x05, 0x01, 0x00, 0x01, 0x1a, 0x00, 0x0f, 0x01]))
    rom.write_bytes(0x0cf320, bytearray([0x14, 0x01, 0x14, 0x01, 0x0c, 0x01, 0x05, 0x01, 0xff, 0x03, 0x25, 0x00, 0x01, 0x01, 0x07, 0x01]))
    rom.write_bytes(0x0cf330, bytearray([0x09, 0x01, 0x03, 0x01, 0x00, 0x01, 0x1a, 0x00, 0x0f, 0x01, 0x14, 0x01, 0x14, 0x01, 0x0c, 0x01]))
    rom.write_bytes(0x0cf340, bytearray([0x05, 0x01, 0xff, 0x03, 0x06, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x1b, 0x00, 0x0f, 0x01]))
    rom.write_bytes(0x0cf350, bytearray([0x09, 0x01, 0x0e, 0x01, 0x13, 0x01, 0xff, 0x03, 0x02, 0x00, 0x26, 0x01, 0x01, 0x00, 0x01, 0x00]))
    rom.write_bytes(0x0cf360, bytearray([0x01, 0x00, 0x00, 0x01, 0x1b, 0x00, 0x0f, 0x01, 0x09, 0x01, 0x0e, 0x01, 0x13, 0x01, 0xff, 0x03]))
    rom.write_bytes(0x0cf370, bytearray([0x03, 0x00, 0x26, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x1b, 0x00, 0x0f, 0x01]))
    rom.write_bytes(0x0cf380, bytearray([0x09, 0x01, 0x0e, 0x01, 0x13, 0x01, 0xff, 0x03, 0x06, 0x00, 0x26, 0x01, 0x01, 0x00, 0x01, 0x00]))
    rom.write_bytes(0x0cf390, bytearray([0x01, 0x00, 0x00, 0x01, 0x1b, 0x00, 0x0f, 0x01, 0x09, 0x01, 0x0e, 0x01, 0x13, 0x01, 0xff, 0x03]))
    rom.write_bytes(0x0cf3a0, bytearray([0x19, 0x01, 0x0f, 0x01, 0x15, 0x01, 0x12, 0x01, 0x13, 0x01, 0x05, 0x01, 0x0c, 0x01, 0x06, 0x01]))
    rom.write_bytes(0x0cf3b0, bytearray([0xff, 0x03]))

def code_main(rom):
    rom.write_bytes(0x17ad40, bytearray([0xe0, 0x58, 0x01, 0xb0, 0x08, 0xbf, 0x80, 0x5c, 0xc0, 0x5c, 0x44, 0x5c, 0xc0, 0xa9, 0x10, 0x22]))
    rom.write_bytes(0x17ad50, bytearray([0x85, 0x0e, 0xa9, 0xc8, 0x00, 0x85, 0x10, 0xa9, 0x50, 0x2c, 0x85, 0x12, 0xa9, 0xc8, 0x00, 0x85]))
    rom.write_bytes(0x17ad60, bytearray([0x14, 0xa9, 0x00, 0x44, 0x85, 0x0a, 0xa9, 0x00, 0x04, 0x85, 0x0c, 0xe0, 0x68, 0x01, 0xf0, 0x0f]))
    rom.write_bytes(0x17ad70, bytearray([0xe0, 0x60, 0x01, 0xf0, 0x05, 0xa9, 0x12, 0x00, 0x80, 0x08, 0xa9, 0x0e, 0x00, 0x80, 0x03, 0xa9]))
    rom.write_bytes(0x17ad80, bytearray([0x10, 0x00, 0x8d, 0x52, 0x22, 0x5c, 0x6b, 0x5c, 0xc0, 0x60, 0xda, 0x5a, 0x8b, 0x38, 0xe9, 0x7d]))
    rom.write_bytes(0x17ad90, bytearray([0x04, 0x0a, 0xaa, 0xbf, 0xb5, 0x27, 0xc8, 0xaa, 0xa9, 0xc5, 0x00, 0xa0, 0xf0, 0x7d, 0x54, 0x20]))
    rom.write_bytes(0x17ada0, bytearray([0xc4, 0xab, 0x7a, 0xfa, 0x68, 0x60, 0xda, 0xa2, 0x00, 0x00, 0xdf, 0x6a, 0x26, 0xc8, 0xf0, 0x17]))
    rom.write_bytes(0x17adb0, bytearray([0xe8, 0xe8, 0xe0, 0x2c, 0x00, 0xf0, 0x02, 0x80, 0xf1, 0xfa, 0xe6, 0x40, 0xe6, 0x40, 0x48, 0xa9]))
    rom.write_bytes(0x17adc0, bytearray([0x00, 0x00, 0x68, 0x5c, 0x41, 0x42, 0xc0, 0xbf, 0x3c, 0x26, 0xc8, 0x99, 0x39, 0x0c, 0x85, 0x0a]))
    rom.write_bytes(0x17add0, bytearray([0xbf, 0x10, 0x26, 0xc8, 0x99, 0x79, 0x0c, 0xc9, 0x4e, 0x04, 0x90, 0x16, 0x38, 0xe9, 0x4a, 0x04]))
    rom.write_bytes(0x17ade0, bytearray([0x8d, 0x54, 0x22, 0xfa, 0x22, 0xe4, 0x5a, 0xc0, 0xe6, 0x40, 0xe6, 0x40, 0xc2, 0x20, 0x5c, 0xC3]))
    rom.write_bytes(0x17adf0, bytearray([0xb2, 0x17, 0xc9, 0x04, 0x00, 0xb0, 0x02, 0x80, 0xe7, 0xe2, 0x20, 0x38, 0xe9, 0x04, 0xaa, 0xbf]))
    rom.write_bytes(0x17ae00, bytearray([0x68, 0x26, 0xc8, 0xc2, 0x20, 0x80, 0xd9, 0xe2, 0x20, 0xaf, 0xe0, 0x7d, 0x20, 0xc9, 0x05, 0xb0]))
    rom.write_bytes(0x17ae10, bytearray([0x07, 0x1a, 0x8f, 0xe0, 0x7d, 0x20, 0x80, 0x07, 0xad, 0x85, 0x04, 0xd0, 0x0e, 0x80, 0x00, 0xc2]))
    rom.write_bytes(0x17ae20, bytearray([0x20, 0xad, 0xa0, 0x05, 0xc9, 0x00, 0x01, 0x5c, 0x95, 0x0a, 0xc2, 0xc2, 0x20, 0xb9, 0x39, 0x0c]))
    rom.write_bytes(0x17ae30, bytearray([0x48, 0xa9, 0x4d, 0x04, 0x99, 0x39, 0x0c, 0xad, 0x85, 0x04, 0xc9, 0xe0, 0x00, 0x90, 0x06, 0x38]))
    rom.write_bytes(0x17ae40, bytearray([0xe9, 0xe0, 0x00, 0x80, 0x06, 0x0a, 0xaa, 0xbf, 0xb0, 0xb3, 0xc5, 0x48, 0x22, 0xe9, 0x5a, 0xc0]))
    rom.write_bytes(0x17ae50, bytearray([0xc2, 0x20, 0x68, 0x22, 0x18, 0x5c, 0xc0, 0xa9, 0x03, 0x00, 0x8d, 0x02, 0x0a, 0x22, 0xab, 0xb0]))
    rom.write_bytes(0x17ae60, bytearray([0x17, 0x22, 0xd8, 0x5d, 0xc0, 0x68, 0x99, 0x39, 0x0c, 0x9c, 0x85, 0x04, 0x80, 0xb1]))

    rom.write_bytes(0x17b010, bytearray([0xb9, 0xda, 0x06, 0x1a, 0x1a, 0x99, 0xda, 0x06, 0x5c, 0x94, 0xc5, 0xc2, 0xb9, 0xda, 0x06, 0x3a]))
    rom.write_bytes(0x17b020, bytearray([0x3a, 0x99, 0xda, 0x06, 0x5c, 0x75, 0xc5, 0xc2, 0xe2, 0x20, 0xbd, 0xbe, 0x33, 0xc9, 0x05, 0xd0]))
    rom.write_bytes(0x17b030, bytearray([0x21, 0xad, 0xd3, 0x00, 0xc9, 0x21, 0xd0, 0x21, 0xaf, 0x90, 0xae, 0x17, 0xf0, 0x1b, 0xda, 0xa2]))
    rom.write_bytes(0x17b040, bytearray([0x00, 0x00, 0xbd, 0x70, 0x04, 0xf0, 0x08, 0xe0, 0x05, 0x00, 0xf0, 0x0c, 0xe8, 0x80, 0xf3, 0xfa]))
    rom.write_bytes(0x17b050, bytearray([0xa9, 0x01, 0xc2, 0x20, 0x5c, 0x4f, 0x6f, 0xc0, 0xfa, 0xc2, 0x20, 0xa9, 0x05, 0x00, 0x5c, 0x4f]))
    rom.write_bytes(0x17b060, bytearray([0x6f, 0xc0, 0x48, 0xa9, 0x69, 0x8d, 0x34, 0x00, 0x68, 0xa2, 0x16, 0xf0, 0x86, 0x56, 0x5c, 0x69]))
    rom.write_bytes(0x17b070, bytearray([0xb8, 0xc1, 0xad, 0x02, 0x0a, 0xf0, 0x11, 0xc9, 0x01, 0xf0, 0x05, 0xce, 0x02, 0x0a, 0x80, 0x0d]))
    rom.write_bytes(0x17b080, bytearray([0xce, 0x02, 0x0a, 0x20, 0x96, 0xb0, 0x80, 0x05, 0xad, 0x13, 0x0a, 0xf0, 0x00, 0xc2, 0x20, 0xa9]))
    rom.write_bytes(0x17b090, bytearray([0x86, 0x3e, 0x5c, 0x88, 0x40, 0xc0, 0xc2, 0x20, 0xa2, 0x10, 0x10, 0xa0, 0x53, 0x17, 0xa9, 0x0f]))
    rom.write_bytes(0x17b0a0, bytearray([0x00, 0x54, 0x7e, 0xc8, 0x9c, 0x88, 0x05, 0x9c, 0x5e, 0x22, 0x60, 0xc2, 0x20, 0xa9, 0x08, 0x00]))
    rom.write_bytes(0x17b0b0, bytearray([0x0c, 0x04, 0x01, 0x6b, 0xc9, 0x75, 0x04, 0x90, 0x09, 0xc9, 0x7d, 0x04, 0xb0, 0x0c, 0x5c, 0xf6]))
    rom.write_bytes(0x17b0c0, bytearray([0x5a, 0xc0, 0xe2, 0x20, 0xa9, 0x01, 0x5c, 0xf3, 0x5a, 0xc0, 0x20, 0x89, 0xad, 0x80, 0xf3, 0xe0]))
    rom.write_bytes(0x17b0d0, bytearray([0x58, 0x00, 0xb0, 0x08, 0xbf, 0x00, 0x00, 0xc5, 0x5c, 0xf3, 0x5d, 0xc0, 0x4C, 0x68, 0xB2, 0xe2]))
    rom.write_bytes(0x17b0e0, bytearray([0x20, 0x8b, 0xa9, 0x20, 0x5c, 0xf9, 0x5d, 0xc0, 0xa7, 0x40, 0xc9, 0x76, 0x04, 0xb0, 0x08, 0xe6]))
    rom.write_bytes(0x17b0f0, bytearray([0x40, 0xe6, 0x40, 0x5c, 0x4b, 0x44, 0xc0, 0x48, 0xad, 0x40, 0x00, 0x8f, 0xF9, 0x04, 0x7E, 0x8b]))
    rom.write_bytes(0x17b100, bytearray([0xda, 0x5a, 0xa9, 0xc5, 0x00, 0xa2, 0x96, 0x26, 0xa0, 0xf0, 0x7d, 0x54, 0x20, 0xc8, 0x7a, 0xfa]))
    rom.write_bytes(0x17b110, bytearray([0xab, 0x68, 0x80, 0xdb, 0xa7, 0xe9, 0xc9, 0x00, 0x03, 0xb0, 0x07, 0x8d, 0x0f, 0x1c, 0x5c, 0xe0]))
    rom.write_bytes(0x17b120, bytearray([0xed, 0xc0, 0x29, 0xff, 0x00, 0xc9, 0xff, 0x00, 0xf0, 0x34, 0xc9, 0xfd, 0x00, 0xf0, 0x41, 0xc9]))
    rom.write_bytes(0x17b130, bytearray([0xfe, 0x00, 0xf0, 0x4e, 0x48, 0xa5, 0xe9, 0x8f, 0xe5, 0x7d, 0x20, 0x68, 0xda, 0x0a, 0xaa, 0xbf]))
    rom.write_bytes(0x17b140, bytearray([0x5b, 0x27, 0xc8, 0x85, 0xe9, 0xfa, 0x8b, 0x48, 0xda, 0x5a, 0xa9, 0x12, 0x00, 0xa2, 0xa0, 0xf3]))
    rom.write_bytes(0x17b150, bytearray([0xa0, 0x44, 0x7e, 0x54, 0x20, 0xcc, 0x7a, 0xfa, 0x68, 0xab, 0x5c, 0xdb, 0xed, 0xc0, 0xaf, 0xe5]))
    rom.write_bytes(0x17b160, bytearray([0x7d, 0x20, 0x1a, 0x1a, 0x85, 0xe9, 0xe2, 0x20, 0xa9, 0xcc, 0x85, 0xeb, 0xc2, 0x20, 0x80, 0xea]))
    rom.write_bytes(0x17b170, bytearray([0xa5, 0xe9, 0x8f, 0xe5, 0x7d, 0x20, 0xa9, 0xF0, 0x00, 0x85, 0xe9, 0xa9, 0x7d, 0x20, 0x85, 0xea]))
    rom.write_bytes(0x17b180, bytearray([0x80, 0xd8, 0xa5, 0xe9, 0x8f, 0xe5, 0x7d, 0x20, 0xa9, 0x44, 0x44, 0x85, 0xe9, 0xa9, 0x7e, 0x20]))
    rom.write_bytes(0x17b190, bytearray([0x85, 0xea, 0x80, 0xc6, 0xad, 0x1e, 0x01, 0xc9, 0x60, 0x00, 0xb0, 0x07, 0x18, 0x69, 0x08, 0x00]))
    rom.write_bytes(0x17b1a0, bytearray([0x8d, 0x1e, 0x01, 0x5c, 0x21, 0x5b, 0xc0, 0xad, 0x20, 0x01, 0x29, 0xff, 0x00, 0xc9, 0x0e, 0x00]))
    rom.write_bytes(0x17b1b0, bytearray([0xb0, 0x03, 0xee, 0x20, 0x01, 0xee, 0x1c, 0x01, 0x5c, 0x3b, 0x5b, 0xc0, 0xb9, 0x00, 0x00, 0x8f]))
    rom.write_bytes(0x17b1c0, bytearray([0x8e, 0x05, 0x7e, 0xa9, 0x00, 0x00, 0x8f, 0xe0, 0x7d, 0x20, 0x5c, 0x11, 0x78, 0xc0, 0xc2, 0x20]))
    rom.write_bytes(0x17b1d0, bytearray([0xa5, 0x0a, 0xc9, 0xbc, 0x8b, 0xf0, 0x06, 0xe2, 0x20, 0x5c, 0x87, 0x3e, 0xc0, 0xa2, 0x00, 0x00]))
    rom.write_bytes(0x17b1e0, bytearray([0xbf, 0xbb, 0x27, 0xc8, 0xa8, 0xe2, 0x20, 0xbf, 0xd0, 0x24, 0xc8, 0x99, 0x00, 0x00, 0xc2, 0x20]))
    rom.write_bytes(0x17b1f0, bytearray([0xe8, 0xe8, 0xe0, 0x20, 0x00, 0xf0, 0x02, 0x80, 0xe7, 0xa2, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa9])) #Number of starting flags
    rom.write_bytes(0x17b200, bytearray([0x4d, 0x04, 0x8d, 0x39, 0x0c, 0xbf, 0xF7, 0x24, 0xc8, 0xf0, 0x0c, 0xda, 0x22, 0xe9, 0x5a, 0xc0]))
    rom.write_bytes(0x17b210, bytearray([0xc2, 0x20, 0xfa, 0xe8, 0xe8, 0x80, 0xee, 0xa2, 0x00, 0x00, 0xe2, 0x20, 0xbf, 0xF0, 0x24, 0xc8]))
    rom.write_bytes(0x17b220, bytearray([0xc2, 0x20, 0xa8, 0xc0, 0x00, 0x00, 0xf0, 0x14, 0x8a, 0x5a, 0xda, 0xa0, 0x00, 0x00, 0x22, 0xe9]))
    rom.write_bytes(0x17b230, bytearray([0x5a, 0xc0, 0xc2, 0x20, 0x29, 0xff, 0x00, 0xfa, 0x7a, 0x88, 0x80, 0xe7, 0xe0, 0x05, 0x00, 0xf0]))
    rom.write_bytes(0x17b240, bytearray([0x03, 0xe8, 0x80, 0xd6, 0xa9, 0xb4, 0x8b, 0x8d, 0x0a, 0x00, 0xa9, 0x2d, 0x2d, 0x8d, 0x0d, 0x00]))
    rom.write_bytes(0x17b250, bytearray([0xa9, 0x04, 0x7e, 0x8d, 0x0f, 0x00, 0x4c, 0xd7, 0xb1, 0x8a, 0x8f, 0xe7, 0x7d, 0x20, 0xe2, 0x20]))
    rom.write_bytes(0x17b260, bytearray([0x9b, 0x20, 0xA0, 0xB2, 0x5c, 0xfa, 0x77, 0xc0, 0xe0, 0x66, 0x00, 0xb0, 0x06, 0xa2, 0xf0, 0x7d]))
    rom.write_bytes(0x17b270, bytearray([0x4c, 0xDF, 0xb0, 0x8a, 0x38, 0xe9, 0x66, 0x00, 0xaa, 0xbf, 0xb5, 0x27, 0xc8, 0xaa, 0xe2, 0x20]))
    rom.write_bytes(0x17b280, bytearray([0x8b, 0xa9, 0xc4, 0x5c, 0xf9, 0x5d, 0xc0, 0xAD, 0xFB, 0x04, 0x29, 0xFF, 0x00, 0xF0, 0x08, 0xAD]))
    rom.write_bytes(0x17b290, bytearray([0xfc, 0x04, 0x9c, 0xfb, 0x04, 0x80, 0x03, 0xad, 0x54, 0x22, 0x0a, 0x0a, 0x5c, 0x3e, 0x5c, 0xc0]))
    rom.write_bytes(0x17b2a0, bytearray([0xc2, 0x20, 0xa2, 0x00, 0x00, 0x48, 0xaf, 0x00, 0x7E, 0x20, 0xc9, 0x90, 0x28, 0xf0, 0x12, 0x8b]))
    rom.write_bytes(0x17b2b0, bytearray([0xda, 0x5a, 0xa9, 0xc5, 0x00, 0xa2, 0x96, 0x26, 0xa0, 0xf0, 0x7d, 0x54, 0x20, 0xc8, 0x7a, 0xfa]))
    rom.write_bytes(0x17b2c0, bytearray([0xab, 0x68, 0x60, 0xA9, 0x01, 0x01, 0x8D, 0x0F, 0x00, 0xA9, 0xDC, 0x04, 0x8D, 0x0A, 0x00, 0x5C]))
    rom.write_bytes(0x17b2D0, bytearray([0x43, 0x42, 0xC0]))

    rom.write_bytes(0x04f650, bytearray([0x20, 0x00, 0x03, 0x00, 0x00, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f660, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f670, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f680, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f690, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f6a0, bytearray([0x28, 0x90, 0x28, 0x55, 0x2c, 0x5e, 0x2c, 0x64, 0x2c, 0x5d, 0x2c, 0x53, 0x2c, 0x6d, 0x2c, 0x62]))
    rom.write_bytes(0x04f6b0, bytearray([0x2c, 0x57, 0x2c, 0x5e, 0x2c, 0x65, 0x2c, 0x54, 0x2c, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f6c0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f6d0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x04f6e0, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x04f6f0, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x04f700, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x04f710, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x20, 0x00, 0x03, 0x00, 0x00, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28]))
    rom.write_bytes(0x04f720, bytearray([0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28]))
    rom.write_bytes(0x04f730, bytearray([0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28]))
    rom.write_bytes(0x04f740, bytearray([0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28]))
    rom.write_bytes(0x04f750, bytearray([0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28]))
    rom.write_bytes(0x04f760, bytearray([0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x55, 0x2c, 0x5e, 0x2c, 0x64, 0x2c, 0x5d, 0x2c]))
    rom.write_bytes(0x04f770, bytearray([0x53, 0x2c, 0x6d, 0x2c, 0x53, 0x2c, 0x5e, 0x2c, 0x66, 0x2c, 0x5d, 0x2c, 0x90, 0x28, 0x59, 0x2c]))
    rom.write_bytes(0x04f780, bytearray([0x50, 0x2c, 0x51, 0x2c, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28]))
    rom.write_bytes(0x04f790, bytearray([0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28]))
    rom.write_bytes(0x04f7a0, bytearray([0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28]))
    rom.write_bytes(0x04f7b0, bytearray([0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28]))
    rom.write_bytes(0x04f7c0, bytearray([0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28]))
    rom.write_bytes(0x04f7d0, bytearray([0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x20, 0x00, 0x03, 0x00, 0x00, 0x90]))
    rom.write_bytes(0x04f7e0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f7f0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f800, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f810, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f820, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x55, 0x2c, 0x5e]))
    rom.write_bytes(0x04f830, bytearray([0x2c, 0x64, 0x2c, 0x5d, 0x2c, 0x53, 0x2c, 0x6d, 0x2c, 0x64, 0x2c, 0x5f, 0x2c, 0x90, 0x28, 0x59]))
    rom.write_bytes(0x04f840, bytearray([0x2c, 0x50, 0x2c, 0x51, 0x2c, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x04f850, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x97]))
    rom.write_bytes(0x04f860, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x04f870, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x04f880, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x04f890, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28]))

    rom.write_bytes(0x00FBA4, bytearray([0xAD, 0x58, 0x00, 0x29, 0xFF, 0x00, 0xC9, 0xCE, 0x00, 0xD0, 0x07, 0xAD, 0x56, 0x00, 0x8F, 0xE7]))
    rom.write_bytes(0x00FBB4, bytearray([0x7D, 0x20, 0xA7, 0x56, 0x85, 0x0A, 0x4C, 0x08, 0x25, 0x00]))

def code_handlers(rom):
    rom.write_bytes(0x020A8F, bytearray([0x5C, 0x07, 0xAe, 0x17]))#Get item from server

    rom.write_bytes(0x004083, bytearray([0x5C, 0x72, 0xB0, 0x17]))#Hide item menu sometimes

    rom.write_bytes(0x006F49, bytearray([0x5C, 0x28, 0xB0, 0x17]))#Lock Phantom behind spells

    rom.write_bytes(0x00423D, bytearray([0x5C, 0xA6, 0xAD, 0x17]))#Fix special chests

    #ORG $C05AF1
    #NOP #5 ;Don't write items from chests, use for remote items

    rom.write_bytes(0x016197, bytearray([0xEA, 0xEA]))#Unlock all maps

    rom.write_bytes(0x01B864, bytearray([0x5C, 0x62, 0xB0, 0x17]))#Send Goal

    rom.write_bytes(0x00FBA0, bytearray([0x5C, 0xCe, 0xB1, 0x17]))#Initalize starting variables

    rom.write_bytes(0x005AEF, bytearray([0x5C, 0xB4, 0xB0, 0x17]))#Prevent 'Archipelago Items' from writing inventory flags

    rom.write_bytes(0x005DEF, bytearray([0x5C, 0xCF, 0xB0, 0x17]))#Redirect AP item names to writable memory

    rom.write_bytes(0x004445, bytearray([0x5C, 0xE8, 0xB0, 0x17]))#Signal to get scout data for normal chests

    rom.write_bytes(0x00EDDB, bytearray([0x5C, 0x14, 0xB1, 0x17]))#Special text pointer for shops

    rom.write_bytes(0x005B1A, bytearray([0x5C, 0x94, 0xB1, 0x17]))#Cap health

    rom.write_bytes(0x005B35, bytearray([0x5C, 0xA7, 0xB1, 0x17]))#Cap magic

    rom.write_bytes(0x00780A, bytearray([0x5C, 0xBC, 0xB1, 0x17]))#Zero screen transition counter

    rom.write_bytes(0x0043B9, bytearray([0x4C, 0xA0, 0xFB]))

    rom.write_bytes(0x0077F4, bytearray([0x5C, 0x59, 0xB2, 0x17]))#Scout special chests

    rom.write_bytes(0x005C40, bytearray([0x5C, 0x40, 0xAD, 0x17]))#Render AP sprites

    rom.write_bytes(0x005C39, bytearray([0x5C, 0x87, 0xB2, 0x17]))#Sprite override

    rom.write_bytes(0x002504, bytearray([0x4C, 0xA4, 0xFB]))

def casino_text_pointers(rom):
    rom.write_bytes(0x050014, bytearray([0xF0, 0xFA])) #Light Sword
    rom.write_bytes(0x050028, bytearray([0xC0, 0xFB])) #Light Armor
    rom.write_bytes(0x050032, bytearray([0x90, 0xFC])) #Light Shield
    rom.write_bytes(0x05001A, bytearray([0x80, 0xFD])) #Boomerang


def casino_text(rom):
    rom.write_bytes(0x05FAF0, bytearray([0x20, 0x00, 0x03, 0x00, 0x00, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FB00, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FB10, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FB20, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FB30, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FB40, bytearray([0x28, 0x90, 0x28, 0x55, 0x2C, 0x5E, 0x2C, 0x64, 0x2C, 0x5D, 0x2C, 0x53, 0x2C, 0x6D, 0x2C, 0x5B]))
    rom.write_bytes(0x05FB50, bytearray([0x2C, 0x58, 0x2C, 0x56, 0x2C, 0x57, 0x2C, 0x63, 0x2c, 0x90, 0x28, 0x62, 0x2C, 0x66, 0x2C, 0x5E]))
    rom.write_bytes(0x05FB60, bytearray([0x2C, 0x61, 0x2C, 0x53, 0x2C, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FB70, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FB80, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FB90, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FBA0, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FBB0, bytearray([0x28, 0x97, 0x28, 0x97, 0x28]))

    rom.write_bytes(0x05FBC0, bytearray([0x20, 0x00, 0x03, 0x00, 0x00, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FBD0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FBE0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FBF0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FC00, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FC10, bytearray([0x28, 0x90, 0x28, 0x55, 0x2C, 0x5E, 0x2C, 0x64, 0x2C, 0x5D, 0x2C, 0x53, 0x2C, 0x6D, 0x2C, 0x5B]))
    rom.write_bytes(0x05FC20, bytearray([0x2C, 0x58, 0x2C, 0x56, 0x2C, 0x57, 0x2C, 0x63, 0x2c, 0x90, 0x28, 0x50, 0x2C, 0x61, 0x2C, 0x5C]))
    rom.write_bytes(0x05FC30, bytearray([0x2C, 0x5E, 0x2C, 0x61, 0x2C, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FC40, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FC50, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FC60, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FC70, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FC80, bytearray([0x28, 0x97, 0x28, 0x97, 0x28]))

    rom.write_bytes(0x05FC90, bytearray([0x20, 0x00, 0x03, 0x00, 0x00, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FCA0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FCB0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FCC0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FCD0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FCE0, bytearray([0x28, 0x90, 0x28, 0x55, 0x2C, 0x5E, 0x2C, 0x64, 0x2C, 0x5D, 0x2C, 0x53, 0x2C, 0x6D, 0x2C, 0x5B]))
    rom.write_bytes(0x05FCF0, bytearray([0x2C, 0x58, 0x2C, 0x56, 0x2C, 0x57, 0x2C, 0x63, 0x2c, 0x90, 0x28, 0x62, 0x2C, 0x57, 0x2C, 0x58]))
    rom.write_bytes(0x05FD00, bytearray([0x2C, 0x54, 0x2C, 0x5B, 0x2C, 0x53, 0x2C, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FD10, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FD20, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FD30, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FD40, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FD50, bytearray([0x28, 0x97, 0x28, 0x97, 0x28]))

    rom.write_bytes(0x05FD80, bytearray([0x20, 0x00, 0x03, 0x00, 0x00, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FD90, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FDA0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FDB0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FDC0, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FDD0, bytearray([0x28, 0x90, 0x28, 0x55, 0x2C, 0x5E, 0x2C, 0x64, 0x2C, 0x5D, 0x2C, 0x53, 0x2C, 0x6D, 0x2C, 0x51]))
    rom.write_bytes(0x05FDE0, bytearray([0x2C, 0x5E, 0x2C, 0x5E, 0x2C, 0x5C, 0x2C, 0x54, 0x2c, 0x61, 0x2C, 0x50, 0x2C, 0x5D, 0x2C, 0x56]))
    rom.write_bytes(0x05FDF0, bytearray([0x2C, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90, 0x28, 0x90]))
    rom.write_bytes(0x05FE00, bytearray([0x28, 0x90, 0x28, 0x90, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FE10, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FE20, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FE30, bytearray([0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97, 0x28, 0x97]))
    rom.write_bytes(0x05FE40, bytearray([0x28, 0x97, 0x28, 0x97, 0x28]))

def overworld_speed(rom):
    rom.write_bytes(0x02C58D, bytearray([0x5C, 0xC0, 0xB3, 0x17]))
    rom.write_bytes(0x02C56E, bytearray([0x5C, 0xCC, 0xB3, 0x17]))
    rom.write_bytes(0x02C559, bytearray([0x5C, 0xD8, 0xB3, 0x17]))
    rom.write_bytes(0x02C53A, bytearray([0x5C, 0xE4, 0xB3, 0x17]))
    

    rom.write_bytes(0x17B3C0, bytearray([0xB9, 0xDA, 0x06, 0x1A, 0x1A, 0x99, 0xDA, 0x06, 0x5C, 0x94, 0xC5, 0xC2]))
    rom.write_bytes(0x17B3CC, bytearray([0xB9, 0xDA, 0x06, 0x3A, 0x3A, 0x99, 0xDA, 0x06, 0x5C, 0x75, 0xC5, 0xC2]))
    rom.write_bytes(0x17B3D8, bytearray([0xB9, 0x5A, 0x06, 0x1A, 0x1A, 0x99, 0x5A, 0x06, 0x5C, 0x60, 0xC5, 0xC2]))
    rom.write_bytes(0x17B3E4, bytearray([0xB9, 0x5A, 0x06, 0x3A, 0x3A, 0x99, 0x5A, 0x06, 0x5C, 0x41, 0xC5, 0xC2]))

def quick_magic(rom):
     rom.write_bytes(0x021129, bytearray([0x22, 0x40, 0xB3, 0x17, 0xEA, 0xEA]))

     rom.write_bytes(0x17B340, bytearray([0xAD, 0x64, 0x04, 0xF0, 0x60, 0xAD, 0xFB, 0x05, 0x89, 0x03, 0x00, 0xF0, 0x58, 0x22, 0x4B, 0x6D]))
     rom.write_bytes(0x17B350, bytearray([0xC0, 0xC2, 0x20, 0xAD, 0xFB, 0x05, 0x89, 0x02, 0x00, 0xD0, 0x07, 0x89, 0x01, 0x00, 0xD0, 0x22]))
     rom.write_bytes(0x17B360, bytearray([0x80, 0x43, 0xAE, 0x08, 0x01, 0xCA, 0xE0, 0x03, 0x00, 0xF0, 0xFA, 0xE0, 0x08, 0x00, 0x90, 0x03]))
     rom.write_bytes(0x17B370, bytearray([0xA2, 0x07, 0x00, 0xE0, 0x00, 0x00, 0xF0, 0x2A, 0xBD, 0x75, 0x04, 0x29, 0xFF, 0x00, 0xF0, 0xE5]))
     rom.write_bytes(0x17B380, bytearray([0x80, 0x20, 0xAE, 0x08, 0x01, 0xE8, 0xE0, 0x03, 0x00, 0xF0, 0xFA, 0xE0, 0x08, 0x00, 0x90, 0x03]))
     rom.write_bytes(0x17B390, bytearray([0xA2, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xF0, 0x0A, 0xBD, 0x75, 0x04, 0x29, 0xFF, 0x00, 0xF0, 0xE5]))
     rom.write_bytes(0x17B3A0, bytearray([0x80, 0x00, 0x8E, 0x08, 0x01, 0xAD, 0xFB, 0x05, 0x2D, 0x14, 0x01, 0x6B]))

def disable_encounters(rom):
    rom.write_bytes(0x003022, bytearray([0x22, 0xB0, 0xB3, 0x17]))
    rom.write_bytes(0x003026, bytearray([0xC9, 0x01]))
    rom.write_bytes(0x003028, bytearray([0xD0, 0x03]))
    rom.write_bytes(0x00302A, bytearray([0xA9, 0x00, 0xEA]))
    rom.write_bytes(0x00302D, bytearray([0xEA, 0xEA]))

    rom.write_bytes(0x17B3B0, bytearray([0xEA, 0xEA, 0xEA, 0xEA]))
    rom.write_bytes(0x17B3B4, bytearray([0xEA, 0xEA, 0xEA, 0xEA]))
    rom.write_bytes(0x17B3B8, bytearray([0xEA]))
    rom.write_bytes(0x17B3B9, bytearray([0xAF, 0x16, 0x42, 0x00]))
    rom.write_bytes(0x17B3BD, bytearray([0x6B]))

def quick_shovel(rom):
    rom.write_bytes(0x001CBF, bytearray([0x22, 0xF0, 0xB2, 0xD7]))

    rom.write_bytes(0x17B2F0, bytearray([0xDA, 0xAD, 0xFB, 0x05, 0xC9, 0x00, 0x02, 0xD0, 0x36, 0xAD, 0x59, 0x04, 0x89, 0x01, 0x00, 0xF0]))
    rom.write_bytes(0x17B300, bytearray([0x2E, 0xAD, 0x0C, 0x01, 0xC9, 0x0C, 0x00, 0xF0, 0x19, 0xE2, 0x20, 0x8D, 0x28, 0x04, 0xC2, 0x20]))
    rom.write_bytes(0x17B310, bytearray([0x22, 0xCE, 0x65, 0xC0, 0x9C, 0x0A, 0x01, 0x9C, 0x0E, 0x01, 0xA9, 0x0C, 0x00, 0x8D, 0x0C, 0x01]))
    rom.write_bytes(0x17B320, bytearray([0x80, 0x0D, 0xAD, 0x28, 0x04, 0x29, 0xFF, 0x00, 0x8D, 0x0C, 0x01, 0x22, 0x3B, 0x68, 0xC0, 0xFA]))
    rom.write_bytes(0x17B330, bytearray([0xBF, 0xFB, 0x05, 0x7E, 0x6B]))

    rom.write_bytes(0x0065CE, bytearray([0x5C, 0x60, 0xAF, 0xD7]))

    rom.write_bytes(0x17AF90, bytearray([0xC2, 0x20, 0xAD, 0x0C, 0x01, 0xC9, 0x0C, 0x00, 0xF0, 0x10, 0xAD, 0x0A, 0x01, 0xE2, 0x20, 0x8D]))
    rom.write_bytes(0x17AFA0, bytearray([0x27, 0x04, 0xC2, 0x20, 0xAD, 0x0E, 0x01, 0x8D, 0x29, 0x04, 0x6B]))

    rom.write_bytes(0x17AFB0, bytearray([0xAD, 0x27, 0x04, 0x29, 0xFF, 0x00, 0x8D, 0x0A, 0x01, 0xAD, 0x29, 0x04, 0x8D, 0x0E, 0x01, 0x6B]))

    rom.write_bytes(0x00683B, bytearray([0x5c, 0xB0, 0xAF, 0xD7]))

def fix_prices(rom):
    #C1FCA7 Life Bottle
    #C1FCB2 Boomerang
    #C1FCBB Light Shield
    #C1FCBF Light Armor
    #C1FCC7 Light Sword
    rom.write_bytes(0x01FCAB, bytearray([0x00, 0x05, 0x00]))
    rom.write_bytes(0x01FCB2, bytearray([0x00, 0x01, 0x00, 0x00]))
    rom.write_bytes(0x01FCBB, bytearray([0x02, 0x00, 0x00]))
    rom.write_bytes(0x01FCC2, bytearray([0x00, 0x03, 0x00, 0x00, 0x00]))
    rom.write_bytes(0x01FCCA, bytearray([0x00, 0x05, 0x00, 0x00, 0x00]))

def patch_rom(world, rom, player: int, multiworld):
    data_main(rom) #Values and pointers
    code_main(rom) #code execution
    code_handlers(rom) #Jumps to my code
    overworld_speed(rom)
    casino_text(rom)
    casino_text_pointers(rom)
    rom.write_bytes(0x00EDCC, bytearray([0xA9, 0x01, 0x00])) #Fast text patch
    #rom.write_bytes(0x006D5A, bytearray([0x08]))
    #rom.write_bytes(0x02E605, bytearray([0x00]))
    rom.write_bytes(0x17AE90, ([world.options.phantom_spells]))
    if world.options.disable_encounters == 1:
        disable_encounters(rom)

    if world.options.fast_shovel == 1:
        quick_shovel(rom)

    if world.options.magic_swap == 1:
        quick_magic(rom)

    if world.options.casino_checks == 1:
        fix_prices(rom)

    local_start_items = []
    class_map = {
        ItemClassification.progression: [0x77, 0x04],
        ItemClassification.progression_skip_balancing: [0x77, 0x04],
        ItemClassification.filler: [0x76, 0x04],
        ItemClassification.useful: [0x76, 0x04],
        ItemClassification.trap: [0x76, 0x04]
    }
    
    unique_starting_items = []

    shop_names = [
        0x0CAC5E,
        0x0CB0D8,
        0x0CBA64
    ]
    
    shop_checks = [
        "100 Coin Shop",
        "300 Coin Shop",
        "500 Coin Shop"
    ]

    inv_address = 0
    
    for location in world.multiworld.get_locations(player):
        if location.address: #dont write local data for events
            if location.item.player != location.player:
                ap_item = class_map[location.item.classification]
                rom.write_bytes(local_locations[location.name], bytearray(ap_item))
            else:
                rom.write_bytes(local_locations[location.name], bytearray(local_items[location.item.name]))

    rom.write_byte(0x0824F0, sum(item.name == "Life Bottle" for item in world.multiworld.precollected_items[player])) #The type of item doesn't matter; just count how many they have
    rom.write_byte(0x0824F1, sum(item.name == "Magic Bottle" for item in world.multiworld.precollected_items[player]))
    rom.write_byte(0x0824F2, sum(item.name == "500 Coins" for item in world.multiworld.precollected_items[player]))
    rom.write_byte(0x0824F3, sum(item.name == "1000 Coins" for item in world.multiworld.precollected_items[player]))
    rom.write_byte(0x0824F4, sum(item.name == "2000 Coins" for item in world.multiworld.precollected_items[player]))
    rom.write_byte(0x0824F5, sum(item.name == "5000 Coins" for item in world.multiworld.precollected_items[player]))

    for item in world.multiworld.precollected_items[player]:
        if item.name not in ["Life Bottle", "Magic Bottle", "500 Coins", "1000 Coins", "2000 Coins", "5000 Coins", "Light Gate Lowered", "Sun Gate Lowered", "Star Gate Lowered", "Sun Gate Lowered", "Aqua Gate Lowered", "Moon Gate Lowered"] and item.name not in unique_starting_items:
            unique_starting_items.append(item.name)
            index = unique_starting_items.index(item.name) + inv_address
            rom.write_bytes(0x0824F5 + (index + 2), bytearray(local_items[item.name])) #Major items do literally nothing if the player has more than one, so ignore major items that have more than one copy precollected
            inv_address += 1
    for i in range(3):
        if world.multiworld.get_location(shop_checks[i], player).item.player != world.player:
            rom.write_bytes(shop_names[i], bytearray([0xFD, 0x03]))
        else:
            rom.write_bytes(shop_names[i], bytearray(shop_items[world.multiworld.get_location(shop_checks[i], player).item.name]))

    rom.write_byte(0x0824D0, world.light_gate)
    rom.write_byte(0x0824D2, world.sun_gate)
    rom.write_byte(0x0824D4, world.star_gate)
    rom.write_byte(0x0824D6, world.aqua_gate)
    rom.write_byte(0x0824D8, world.moon_gate)
    rom.write_byte(0x0824DA, world.light_switch_default)
    rom.write_byte(0x0824DC, world.sun_switch_default)
    rom.write_byte(0x0824DE, world.star_switch_default)
    rom.write_byte(0x0824E0, world.aqua_switch_default)
    rom.write_byte(0x0824E2, world.moon_switch_default)
    rom.write_byte(0x0824E4, world.options.early_fuwa)
    rom.write_byte(0x0824E6, world.boa_hiya_shortcut)
    rom.write_byte(0x0824E8, world.sala_hiya_shortcut)
    rom.write_byte(0x0824EA, world.sala_puka_shortcut)
    rom.write_byte(0x0824EC, world.fuwa_puka_shortcut)
    rom.write_byte(0x0824EE, world.fuwa_poka_shortcut)

    from Main import __version__
    rom.name = bytearray(f'SAI2AP{__version__.replace(".", "")[0:3]}_{player}_{world.multiworld.seed:11}\0', "utf8")[:21]
    rom.name.extend([0] * (21 - len(rom.name)))
    rom.write_bytes(0x00FFC0, rom.name)

class SAI2ProcedurePatch(APProcedurePatch, APTokenMixin):
    hash = [USHASH]
    game = "Super Adventure Island II"
    patch_file_ending = ".apsai2"
    result_file_ending = ".sfc"
    name: bytearray
    procedure = [
        ("apply_tokens", ["token_patch.bin"]),
        ("apply_bsdiff4", ["mmx3_basepatch.bsdiff4"]),
    ]

    @classmethod
    def get_source_data(cls) -> bytes:
        return get_base_rom_bytes()

    def write_byte(self, offset, value):
        self.write_token(APTokenTypes.WRITE, offset, value.to_bytes(1, "little"))

    def write_bytes(self, offset, value: typing.Iterable[int]):
        self.write_token(APTokenTypes.WRITE, offset, bytes(value))



def get_base_rom_bytes(file_name: str = "") -> bytes:
    base_rom_bytes = getattr(get_base_rom_bytes, "base_rom_bytes", None)
    if not base_rom_bytes:
        file_name = get_base_rom_path(file_name)
        base_rom_bytes = bytes(Utils.read_snes_rom(open(file_name, "rb")))

        basemd5 = hashlib.md5()
        basemd5.update(base_rom_bytes)
        if USHASH != basemd5.hexdigest():
            raise Exception('Supplied Base Rom does not match known MD5 for US(1.0) release. '
                            'Get the correct game and version, then dump it')
        get_base_rom_bytes.base_rom_bytes = base_rom_bytes
    return base_rom_bytes

def get_base_rom_path(file_name: str = "") -> str:
    options: Utils.OptionsType = Utils.get_options()
    if not file_name:
        file_name = options["sai2_options"]["rom_file"]
    if not os.path.exists(file_name):
        file_name = Utils.user_path(file_name)
    return file_name
