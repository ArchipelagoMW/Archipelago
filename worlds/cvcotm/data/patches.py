remote_textbox_shower = [
    # Pops up the textbox(s) of whatever textbox IDs is written at 0x02025300 and 0x02025302 and increments the current
    # received item index at 0x020253D0 if a number to increment it by is written at 0x02025304.
    #
    # This will NOT give any items on its own; that has to be done alongside writing the above-mentioned things.
    0x0C, 0xB4,
    0x0F, 0x4A,
    0x10, 0x88,
    0x00, 0x28,
    0x13, 0xD0,
    0x93, 0x88,
    0xD0, 0x32,
    0x11, 0x88,
    0xC9, 0x18,
    0x11, 0x80,
    0xD0, 0x3A,
    0x51, 0x88,
    0x00, 0x29,
    0x01, 0xD0,
    0x09, 0x4A,
    0x00, 0xE0,
    0x09, 0x4A,
    0x7B, 0x46,
    0x05, 0x33,
    0x9E, 0x46,
    0x97, 0x46,
    0x05, 0x48,
    0x00, 0x21,
    0x01, 0x60,
    0x41, 0x60,
    0x07, 0x48,
    0x07, 0x49,
    0x40, 0x18,
    0x01, 0x88,
    0x0C, 0xBC,
    0x03, 0x48,
    0x87, 0x46,
    # LDR number pool
    0x00, 0x53, 0x02, 0x02,
    0x04, 0xF1, 0x05, 0x08,
    0xC8, 0xF0, 0x05, 0x08,
    0x00, 0xB2, 0x06, 0x08,
    0x90, 0x1E, 0x02, 0x02,
    0x6E, 0x14, 0x00, 0x00,
]

missing_char_data = {
    # The data for all missing ASCII characters from the game's dialogue textbox font.

    # Each character consists of 8 bytes, with each byte representing one row of pixels in the character. The bytes are
    # arranged from top to bottom row going from left to right.

    # Each bit within each byte represents the following pixels within that row:
    # 8- = -+------
    # 4- = +-------
    # 2- = ---+----
    # 1- = --+-----
    # -8 = -----+--
    # -4 = ----+---
    # -2 = -------+
    # -1 = ------+-
    0x396C54: [0x00, 0x9C, 0x9C, 0x18, 0x84, 0x00, 0x00, 0x00],  # "
    0x396C5C: [0x00, 0x18, 0xBD, 0x18, 0x18, 0x18, 0xBD, 0x18],  # #
    0x396C64: [0x00, 0x0C, 0x2D, 0x0C, 0x21, 0x00, 0x00, 0x00],  # *
    0x396C6C: [0x00, 0x20, 0x3C, 0xA0, 0x34, 0x28, 0xB4, 0x20],  # $
    0x396C74: [0x00, 0x34, 0x88, 0x80, 0xB4, 0x88, 0x88, 0x34],  # 6
    0x396C7C: [0x00, 0xBC, 0x88, 0x04, 0x04, 0x20, 0x20, 0x20],  # 7
    0x396CBC: [0x00, 0x34, 0x88, 0x88, 0x3C, 0x08, 0x88, 0x34],  # 9
    0x396CC4: [0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0xC0],  # :
    0x396CCC: [0x00, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0x80, 0x40],  # ;
    0x396D0C: [0x00, 0x00, 0x09, 0x24, 0x90, 0x24, 0x09, 0x00],  # <
    0x396D14: [0x00, 0x00, 0xFD, 0x00, 0x00, 0x00, 0xFD, 0x00],  # =
    0x396D1C: [0x00, 0x00, 0xC0, 0x30, 0x0C, 0x30, 0xC0, 0x00],  # >
    0x396D54: [0x00, 0x34, 0x88, 0xAC, 0xA8, 0xAC, 0x80, 0x34],  # @
    0x396D5C: [0x00, 0x34, 0x88, 0x88, 0xA8, 0x8C, 0x88, 0x35],  # Q
    0x396D64: [0x00, 0x40, 0x80, 0x10, 0x20, 0x04, 0x08, 0x01],  # \
    0x396D6C: [0x00, 0x20, 0x14, 0x88, 0x00, 0x00, 0x00, 0x00],  # ^
    0x396D9C: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD],  # _
    0x396DA4: [0x00, 0x90, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00],  # `
    0x396DAC: [0x00, 0x08, 0x04, 0x04, 0x20, 0x04, 0x04, 0x08],  # {
    0x396DB4: [0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20],  # |
    0x396DBC: [0x00, 0x80, 0x10, 0x10, 0x20, 0x10, 0x10, 0x80],  # }
    0x396DF4: [0x00, 0x00, 0x00, 0x90, 0x61, 0x0C, 0x00, 0x00],  # ~
}
