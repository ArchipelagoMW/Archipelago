normal_door_hook = [
    0x00, 0x86, 0x20, 0x21,  # ADDU  A0, A0, A2
    0x80, 0x84, 0x9C, 0x60,  # LB    A0, 0x9C60 (A0)
    0x0C, 0x0F, 0xF1, 0x74,  # JAL   0x803FC5D0
    0x30, 0x89, 0x00, 0x01   # ANDI  T1, A0, 0x0001
]

normal_door_code = [
    0x00, 0x02, 0x40, 0x80,  # SLL   T0, V0, 2
    0x3C, 0x04, 0x80, 0x39,  # LUI   A0, 0x8039
    0x00, 0x88, 0x20, 0x21,  # ADDU  A0, A0, T0
    0x8C, 0x84, 0x9B, 0xE4,  # LW    A0, 0x9BE4 (A0)
    0x8C, 0x6A, 0x00, 0x08,  # LW    T2, 0x0008 (V1)
    0x00, 0x8A, 0x58, 0x24,  # AND   T3, A0, T2
    0x11, 0x60, 0x00, 0x03,  # BEQZ  T3, [forward 0x03]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x24, 0x02, 0x00, 0x03,  # ADDIU V0, R0, 0x0003
    0x27, 0xFF, 0x00, 0x6C,  # ADDIU RA, RA, 0x006C
    0x03, 0xE0, 0x00, 0x08   # JR    RA
]

ct_door_hook = [
    0x0C, 0x0F, 0xF1, 0x82,  # JAL	 0x803FC608
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x31, 0x59, 0x00, 0x01   # ANDI  T9, V0, 0x0001
]

ct_door_code = [
    0x3C, 0x0A, 0x80, 0x39,  # LUI   T2, 0x8039
    0x8D, 0x42, 0x9B, 0xF8,  # LW    V0, 0x9BF8 (T2)
    0x01, 0x46, 0x50, 0x21,  # ADDU  T2, T2, A2
    0x81, 0x4A, 0x9C, 0x60,  # LB    T2, 0x9C60 (T2)
    0x00, 0x49, 0x58, 0x24,  # AND   T3, V0, T1
    0x55, 0x60, 0x00, 0x01,  # BNEZL T3, [forward 0x01]
    0x27, 0xFF, 0x00, 0x10,  # ADDIU RA, RA, 0x0010
    0x03, 0xE0, 0x00, 0x08   # JR    RA
]

stage_select_overwrite = [
    # Replacement for the "wipe world state" function when using the warp menu. Now it's the "Special1 jewel checker"
    # to see how many destinations can be selected on it with the current count.
    0x8F, 0xA6, 0x00, 0x18,  # LW	 A2, 0x0018 (SP)
    0xA0, 0x60, 0x64, 0x37,  # SB	 R0, 0x6437 (V1)
    0x10, 0x00, 0x00, 0x29,  # B	 [forward 0x29]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x3C, 0x0A, 0x80, 0x39,  # LUI	 T2, 0x8039
    0x25, 0x4A, 0x9C, 0x4B,  # ADDIU T2, T2, 0x9C4B
    0x81, 0x4B, 0x00, 0x00,  # LB	 T3, 0x0000 (T2)
    0x24, 0x0C, 0x00, 0x0A,  # ADDIU T4, R0, 0x000A
    0x01, 0x6C, 0x00, 0x1B,  # DIVU	 T3, T4
    0x00, 0x00, 0x30, 0x12,  # MFLO	 A2
    0x24, 0xC6, 0x00, 0x01,  # ADDIU A2, A2, 0x0001
    0x28, 0xCA, 0x00, 0x09,  # SLTI	 T2, A2, 0x0009
    0x51, 0x40, 0x00, 0x01,  # BEQZL T2, 0x8012AC7C
    0x24, 0x06, 0x00, 0x08,  # ADDIU A2, R0, 0x0008
    0x03, 0x20, 0x00, 0x08,  # JR	 T9
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x00, 0x00, 0x00, 0x00   # NOP
]

custom_code_loader = [
    # On boot, when the company logos show up, this will trigger and load most of the custom ASM data in this module
    # off from ROM offsets 0xBFC000-0xBFFFFF and into the 803FC000-803FFFFF range in RAM.
    0x3C, 0x08, 0x0C, 0x10,  # LUI   T0, 0x0C10
    0x25, 0x08, 0xF1, 0x02,  # ADDIU T0, T0, 0xF102
    0x3C, 0x09, 0x80, 0x00,  # LUI   T1, 0x8000
    0xAD, 0x28, 0x24, 0x38,  # SW    T0, 0x2438 (T1)
    0x3C, 0x08, 0x80, 0x40,  # LUI   T0, 0x8040
    0x91, 0x08, 0xC0, 0x00,  # ADDIU T0, 0xC000 (T0)
    0x15, 0x00, 0x00, 0x07,  # BNEZ  T0, [forward 0x07]
    0x3C, 0x04, 0x00, 0xC0,  # LUI   A0, 0x00C0
    0x24, 0x84, 0xC0, 0x00,  # ADDIU A0, A0, 0xC000
    0x3C, 0x05, 0x80, 0x40,  # LUI   A1, 0x8040
    0x24, 0xA5, 0xC0, 0x00,  # ADDIU A1, A1, 0xC000
    0x24, 0x06, 0x40, 0x00,  # ADDIU A2, R0, 0x4000
    0x08, 0x00, 0x5D, 0xFB,  # J     0x800177EC
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x03, 0xE0, 0x00, 0x08   # JR    RA
]

remote_item_and_warp = [
    # The essential multiworld function. Every frame wherein the player is in control and not in a custcene or text
    # dialogue, this thing will check some bytes in RAM to see if an item or DeathLink has been received, and trigger
    # the right code accordingly. Opening the warp menu is also handled here.

    # Stage Select menu checks
    0x3C, 0x08, 0x80, 0x34,  # LUI   T0, 0x8034
    0x95, 0x09, 0x24, 0x4A,  # LHU   T1, 0x244A (T0)
    0x3C, 0x08, 0x80, 0x39,  # LUI   T0, 0x8039
    0x91, 0x0A, 0x9E, 0xFB,  # LBU   T2, 0x9EFF (T0)
    0x01, 0x2A, 0x48, 0x21,  # ADDU  T1, T1, T2
    0x91, 0x0A, 0x9E, 0xFF,  # LBU   T2, 0x9EFF (T0)
    0x01, 0x2A, 0x48, 0x21,  # ADDU  T1, T1, T2
    0x91, 0x0A, 0x9C, 0xCF,  # LBU   T2, 0x9CCF (T0)
    0x01, 0x2A, 0x48, 0x21,  # ADDU	 T1, T1, T2
    0x91, 0x0A, 0x9E, 0xEF,  # LBU	 T2, 0x9EEF (T0)
    0x01, 0x2A, 0x48, 0x21,  # ADDU	 T1, T1, T2
    0x91, 0x0A, 0x9C, 0xD3,  # LBU	 T2, 0x9CD3 (T0)
    0x01, 0x2A, 0x48, 0x21,  # ADDU	 T1, T1, T2
    0x3C, 0x08, 0x80, 0x38,  # LUI	 T0, 0x8038
    0x91, 0x0A, 0x7A, 0xDD,  # LBU	 T2, 0x7ADD (T0)
    0x01, 0x2A, 0x48, 0x21,  # ADDU	 T1, T1, T2
    0x15, 0x20, 0x00, 0x16,  # BNEZ	 T1, [forward 0x16]
    0x3C, 0x08, 0x80, 0x34,  # LUI	 T0, 0x8034
    0x91, 0x09, 0x27, 0xA9,  # LBU	 T1, 0x27A9 (T0)
    0x24, 0x0A, 0x00, 0x01,  # ADDIU T2, R0, 0x0001
    0x15, 0x2A, 0x00, 0x14,  # BNE	 T1, T2, [forward 0x14]
    0x3C, 0x08, 0x80, 0x0D,  # LUI	 T0, 0x800D
    0x85, 0x09, 0x5E, 0x20,  # LH	 T1, 0x5E20 (T0)
    0x24, 0x08, 0x30, 0x10,  # ADDIU T0, R0, 0x3010
    0x15, 0x09, 0x00, 0x10,  # BNE	 T0, T1, [forward 0x10]
    0x3C, 0x08, 0x80, 0x35,  # LUI	 T0, 0x8035
    0x91, 0x08, 0xF7, 0xD8,  # LBU	 T0, 0xF7D8 (T0)
    0x24, 0x09, 0x00, 0x20,  # ADDIU T1, R0, 0x0020
    0x11, 0x09, 0x00, 0x0C,  # BEQ	 T0, T1, [forward 0x0C]
    0x3C, 0x08, 0x80, 0x39,  # LUI	 T0, 0x8039
    0x91, 0x09, 0x9C, 0x88,  # LBU	 T1, 0x9C88 (T0)
    0x31, 0x29, 0x00, 0x80,  # ANDI	 T1, T1, 0x0080
    0x91, 0x0A, 0x9B, 0xFA,  # LBU	 T1, 0x9BFA (T0)
    0x31, 0x4A, 0x00, 0x01,  # ANDI	 T1, T1, 0x0001
    0x01, 0x2A, 0x48, 0x21,  # ADDU	 T1, T1, T2
    0x15, 0x20, 0x00, 0x05,  # BNEZ	 T1, [forward 0x05]
    0x24, 0x08, 0xFF, 0xFC,  # ADDIU T0, R0, 0xFFFC
    0x3C, 0x09, 0x80, 0x34,  # LUI	 T1, 0x8034
    0xAD, 0x28, 0x20, 0x84,  # SW	 T0, 0x2084 (T1)
    0x03, 0xE0, 0x00, 0x08,  # JR	 RA
    # Item-rewarding byte checks
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x3C, 0x0B, 0x80, 0x39,  # LUI	 T3, 0x8039
    0x91, 0x69, 0x9B, 0xE0,  # LBU	 T1, 0x9BE0 (T3)
    0x11, 0x20, 0x00, 0x05,  # BEQZ	 T1, [forward 0x05]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x25, 0x29, 0xFF, 0xFF,  # ADDIU T1, T1, 0xFFFF
    0xA1, 0x69, 0x9B, 0xE0,  # SB	 T1, 0x9BE0 (T3)
    0x03, 0xE0, 0x00, 0x08,  # JR    RA
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x3C, 0x08, 0x80, 0x34,  # LUI 	 T0, 0x8034
    0x91, 0x08, 0x28, 0x91,  # LBU	 T0, 0x2891 (T0)
    0x24, 0x09, 0x00, 0x02,  # ADDIU T1, R0, 0x0002
    0x15, 0x09, 0x00, 0x16,  # BNE	 T0, T1, [forward 0x16]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x25, 0x6B, 0x9B, 0xDF,  # ADDIU T3, T3, 0x9BDF
    0x91, 0x64, 0x00, 0x00,  # LBU	 A0, 0x0000 (T3)
    0x14, 0x80, 0x00, 0x03,  # BNEZ	 A0, [forward 0x03]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x10, 0x00, 0x00, 0x05,  # B	 [forward 0x05]
    0x25, 0x6B, 0x00, 0x02,  # ADDIU T3, T3, 0x0002
    0x24, 0x09, 0x00, 0x0F,  # ADDIU T1, R0, 0x000F
    0xA1, 0x69, 0x00, 0x01,  # SB	 T1, 0x0001 (T3)
    0x08, 0x04, 0xED, 0xCE,  # J	 0x8013B738
    0xA1, 0x60, 0x00, 0x00,  # SB	 R0, 0x0000 (T3)
    0x91, 0x64, 0x00, 0x00,  # LBU	 A0, 0x0000 (T3)
    0x14, 0x80, 0x00, 0x02,  # BNEZ	 A0, [forward 0x02]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x10, 0x00, 0x00, 0x07,  # BNE	 T0, T1, [forward 0x07]
    0x24, 0x09, 0x00, 0x0F,  # ADDIU T1, R0, 0x000F
    0xA1, 0x69, 0xFF, 0xFF,  # SB	 T1, 0xFFFF (T3)
    0xA1, 0x60, 0x00, 0x00,  # SB	 R0, 0x0000 (T3)
    0x95, 0x6C, 0x00, 0xDD,  # LHU	 T4, 0x00DD (T3)
    0x25, 0x8C, 0x00, 0x01,  # ADDIU T4, T4, 0x0001
    0x08, 0x04, 0xED, 0xCE,  # J	 0x8013B738
    0xA5, 0x6C, 0x00, 0xDD,  # SH	 T4, 0x00DD (T3)
    # DeathLink half-word checks
    0x3C, 0x0B, 0x80, 0x39,  # LUI   T3, 0x8039
    0x25, 0x6B, 0x9B, 0xE1,  # ADDIU T3, T3, 0x9BE1
    0x95, 0x64, 0x00, 0x01,  # LHU   A0, 0x0001 (T3)
    0x14, 0x80, 0x00, 0x02,  # BNEZ  A0, [forward 0x02]
    0x91, 0x69, 0x00, 0xA7,  # LBU   T1, 0x00A7 (T3)
    0x03, 0xE0, 0x00, 0x08,  # JR    RA
    0x31, 0x2A, 0x00, 0x80,  # ANDI  T2, T1, 0x0080
    0x11, 0x40, 0x00, 0x02,  # BEQZ  T2, [forward 0x02]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x03, 0xE0, 0x00, 0x08,  # JR    RA
    0x35, 0x29, 0x00, 0x80,  # ORI   T1, T1, 0x0080
    0xA1, 0x69, 0x00, 0xA7,  # SB    T1, 0x00A7 (T3)
    0x24, 0x84, 0xFF, 0xFF,  # ADDIU A0, A0, 0xFFFF
    0xA5, 0x64, 0x00, 0x01,  # SH    A0, 0x0001 (T3)
    0x03, 0xE0, 0x00, 0x08,  # JR    RA
]

give_subweapon_stopper = [
    # Extension to "give subweapon" function to not change the player's weapon if the received item is a Stake or Rose
    0x24, 0x09, 0x00, 0x11,  # ADDIU T1, R0, 0x0011
    0x11, 0x24, 0x00, 0x04,  # BEQ   T1, A0, [forward 0x04]
    0x24, 0x09, 0x00, 0x12,  # ADDIU T1, R0, 0x0012
    0x11, 0x24, 0x00, 0x02,  # BEQ   T1, A0, [forward 0x02]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0xA4, 0x6D, 0x61, 0x8A,  # SH    T5, 0x618A (V1)
    0x08, 0x04, 0xF0, 0xBF,  # J     0x8013C2FC
]

give_powerup_stopper = [
    # Extension to "give PowerUp" function to not increase the player's PowerUp count beyond 2
    0x24, 0x0D, 0x00, 0x02,  # ADDIU T5, R0, 0x0002
    0x55, 0x6D, 0x00, 0x01,  # BNEL  T3, T5, [forward 1]
    0xA4, 0x6C, 0x62, 0x34,  # SH    T4, 0x6234 (V1)
    0x08, 0x04, 0xF0, 0xBF   # J     0x8013C2FC
]

npc_item_hack = [
    # Hack to make NPC/shelf items show item textboxes when received.
    0x3C, 0x09, 0x80, 0x39,  # LUI   T1, 0x8039
    0x24, 0x0A, 0x00, 0x20,  # ADDIU T2, R0, 0x0020
    0xA1, 0x2A, 0x9B, 0xE0,  # SB    T2, 0x9BE0 (T1)
    0x00, 0x1F, 0x56, 0x02,  # SRL   T2, RA, 24
    0x24, 0x0B, 0x00, 0x80,  # ADDIU T3, R0, 0x0080
    0x11, 0x4B, 0x00, 0x19,  # BEQ   T2, T3, [forward 0x19]
    0xAF, 0xBF, 0x00, 0x14,  # SW    RA, 0x0014 (SP)
    0x24, 0x0A, 0x00, 0x15,  # ADDIU T2, R0, 0x0015
    0x15, 0x44, 0x00, 0x06,  # BNE   T2, A0, [forward 0x06]
    0x24, 0x0B, 0x00, 0x15,  # ADDIU T3, R0, 0x0015
    0xA1, 0x2B, 0x9B, 0xDF,  # SB    T3, 0x9BDF (T1)
    0x91, 0x2C, 0x9B, 0xF0,  # LBU   T4, 0x9BF0 (T1)
    0x35, 0x8C, 0x00, 0x80,  # ORI   T4, T4, 0x0080
    0xA1, 0x2C, 0x9B, 0xF0,  # SB    T4, 0x9BF0 (T1)
    0x08, 0x04, 0xF0, 0xBF,  # J     0x8013C2FC
    0x24, 0x0A, 0x00, 0x16,  # ADDIU T2, R0, 0x0016
    0x15, 0x44, 0x00, 0x06,  # BNE   T2, A0, [forward 0x06]
    0x24, 0x0B, 0x00, 0x16,  # ADDIU T3, R0, 0x0016
    0xA1, 0x2B, 0x9B, 0xDF,  # SB    T3, 0x9BDF (T1)
    0x91, 0x2C, 0x9C, 0x18,  # LBU   T4, 0x9C18 (T1)
    0x35, 0x8C, 0x00, 0x80,  # ORI   T4, T4, 0x0080
    0xA1, 0x2C, 0x9C, 0x18,  # SB    T4, 0x9C18 (T1)
    0x08, 0x04, 0xF0, 0xBF,  # J     0x8013C2FC
    0x24, 0x0A, 0x00, 0x1A,  # ADDIU T2, R0, 0x001A
    0x15, 0x44, 0x00, 0x03,  # BNE   T2, A0, [forward 0x03]
    0x24, 0x0B, 0x00, 0x1A,  # ADDIU T3, R0, 0x001A
    0xA1, 0x2B, 0x9B, 0xDF,  # SB    T3, 0x9BDF (T1)
    0x08, 0x04, 0xF0, 0xBF,  # J     0x8013C2FC
    0x24, 0x0B, 0x00, 0x1F,  # ADDIU T3, R0, 0x001F
    0x08, 0x04, 0xF0, 0xBF,  # J     0x8013C2FC
    0xA1, 0x2B, 0x9B, 0xDF,  # SB    T3, 0x9BDF (T1)
    0x08, 0x04, 0xEF, 0xFD,  # J     0x8013C2FC
]

tlb_modifiers = [
    # Whenever a TLB script loads, this thing will check the number ID in the T0 register to tell which script it is and
    # overwrite some instructions in it on-the-fly accordingly to said number before it runs.

    # Prevent vampires from despawning while holding Nitro
    0x24, 0x09, 0x00, 0x83,  # ADDIU T1, R0, 0x0083
    0x3C, 0x0A, 0x24, 0x02,  # LUI   T2, 0x2402
    0x25, 0x4A, 0x00, 0x01,  # ADDIU T2, T2, 0x0001
    0x15, 0x09, 0x00, 0x03,  # BNE   T0, T1, [forward 0x03]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    0xAF, 0x2A, 0x00, 0xC8,  # SW    T2, 0x00C8 (T9)
    # Prevent being able to throw Nitro into the Hazardous Waste Disposals
    0x24, 0x09, 0x00, 0x23,  # ADDIU T1, R0, 0x0023
    0x15, 0x09, 0x00, 0x03,  # BNE   T0, T1, [forward 0x03]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    0xAF, 0x2A, 0x01, 0xD4,  # SW    T2, 0x01D4 (T9)
    # Make it so exactly one item can be taken from the Nitro shelf, regardless of the inventory and cracked walls
    0x24, 0x0B, 0x00, 0x80,  # ADDIU T3, R0, 0x0080
    0x24, 0x0C, 0x00, 0x17,  # ADDIU T4, R0, 0x0017
    0x24, 0x09, 0x00, 0x22,  # ADDIU T1, R0, 0x0022
    0x15, 0x09, 0x00, 0x09,  # BNE   T0, T1, [forward 0x09]
    0x3C, 0x0D, 0x80, 0x78,  # LUI   T5, 0x8078
    0x25, 0xAD, 0x61, 0x38,  # ADDIU T5, T5, 0x6138
    0xAF, 0x2A, 0x01, 0x80,  # SW    T2, 0x0180 (T9)
    0xAF, 0x2A, 0x01, 0x94,  # SW    T2, 0x0194 (T9)
    0xAF, 0x2D, 0x01, 0xB0,  # SW    T5, 0x01B0 (T9)
    0xA3, 0x2B, 0x01, 0xB7,  # SB    T3, 0x01B7 (T9)
    0xA3, 0x2C, 0x01, 0xBB,  # SB    T4, 0x01BB (T9)
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    0xAF, 0x20, 0x01, 0xCC,  # SW    R0, 0x01CC (T9)
    # Make it so exactly one item can be taken from the Mandragora shelf, regardless of the inventory and cracked walls
    0x24, 0x09, 0x00, 0x21,  # ADDIU T1, R0, 0x0021
    0x15, 0x09, 0x00, 0x09,  # BNE   T0, T1, [forward 0x09]
    0x3C, 0x0D, 0x10, 0x00,  # LUI   T5, 0x1000
    0x25, 0xAD, 0x00, 0x0F,  # ADDIU T5, T5, 0x000F
    0xAF, 0x2A, 0x01, 0x80,  # SW    T2, 0x0180 (T9)
    0xAF, 0x2A, 0x01, 0x94,  # SW    T2, 0x0194 (T9)
    0xA3, 0x2B, 0x01, 0xD4,  # SB    T3, 0x01D4 (T9)
    0xA3, 0x2B, 0x01, 0xE3,  # SB    T3, 0x01E3 (T9)
    0xA3, 0x2C, 0x01, 0xE7,  # SB    T4, 0x01E7 (T9)
    0xAF, 0x2D, 0x01, 0xF8,  # SW    T5, 0x01F8 (T9)
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    # Fix to allow placing both bomb components at a cracked wall at once while having multiple copies of each, and
    # prevent placing them at the downstairs crack altogether until the seal is removed
    0x24, 0x09, 0x00, 0x24,  # ADDIU T1, R0, 0x0024
    0x15, 0x09, 0x00, 0x0F,  # BNE   T0, T1, [forward 0x0F]
    0x24, 0x0A, 0x00, 0x40,  # ADDIU T2, R0, 0x0040
    0x24, 0x0B, 0xC3, 0x38,  # ADDIU T3, R0, 0xC338
    0x24, 0x0C, 0xC3, 0xD4,  # ADDIU T4, R0, 0xC3D4
    0x24, 0x0D, 0xC3, 0x8C,  # ADDIU T5, R0, 0xC38C
    0xA3, 0x2A, 0x03, 0x0F,  # SB    T2, 0x030F (T9)
    0xA7, 0x2B, 0x03, 0x12,  # SH    T3, 0x0312 (T9)
    0xA3, 0x2A, 0x03, 0x3F,  # SB    T2, 0x033F (T9)
    0xA7, 0x2B, 0x03, 0x42,  # SH    T3, 0x0342 (T9)
    0xA3, 0x2A, 0x03, 0xE3,  # SB    T2, 0x03E3 (T9)
    0xA7, 0x2C, 0x03, 0xE6,  # SH    T4, 0x03E6 (T9)
    0xA3, 0x2A, 0x03, 0x9F,  # SB    T2, 0x039F (T9)
    0xA7, 0x2D, 0x03, 0xA2,  # SH    T5, 0x03A2 (T9)
    0xA3, 0x2A, 0x03, 0xCB,  # SB    T2, 0x03CB (T9)
    0xA7, 0x2D, 0x03, 0xCE,  # SH    T5, 0x03CE (T9)
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    # Disable the "costume unlocked" flag checks so that pressing Up on the Player Select screen will always allow the
    # characters' alternate costumes to be used
    0x24, 0x09, 0x01, 0x2E,  # ADDIU T1, R0, 0x012E
    0x15, 0x09, 0x00, 0x07,  # BNE   T0, T1, [forward 0x07]
    0x3C, 0x0A, 0x3C, 0x0B,  # LUI   T2, 0x3C0B
    0x25, 0x4A, 0x80, 0x00,  # ADDIU T2, T2, 0x8000
    0x24, 0x0B, 0x24, 0x0E,  # ADDIU T3, R0, 0x240E
    0x24, 0x0C, 0x24, 0x0F,  # ADDIU T4, R0, 0x240F
    0xAF, 0x2A, 0x0C, 0x78,  # SW    T2, 0x0C78 (T9)
    0xA7, 0x2B, 0x0C, 0xA0,  # SH    T3, 0x0CA0 (T9)
    0xA7, 0x2C, 0x0C, 0xDC,  # SH    T4, 0x0CDC (T9)
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    0x00, 0x00, 0x00, 0x00
]

double_component_checker = [
    # When checking to see if a bomb component can be placed at a cracked wall, this will run if the code lands at the
    # "no need to set 2" outcome to see if the other can be set.

    # Mandragora checker
    0x10, 0x40, 0x00, 0x07,  # BEQZ  V0, [forward 0x07]
    0x3C, 0x0A, 0x80, 0x39,  # LUI   T2, 0x8039
    0x31, 0x09, 0x80, 0x00,  # ANDI  T1, T0, 0x8000
    0x15, 0x20, 0x00, 0x08,  # BNEZ  T1, [forward 0x08]
    0x91, 0x49, 0x9C, 0x5D,  # LBU   T1, 0x9C5D (T2)
    0x11, 0x20, 0x00, 0x06,  # BEQZ  T1, 0x80183938
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x10, 0x00, 0x00, 0x07,  # B     [forward 0x07]
    0x31, 0xE9, 0x01, 0x00,  # ANDI  T1, T7, 0x0100
    0x15, 0x20, 0x00, 0x02,  # BNEZ  T1, [forward 0x02]
    0x91, 0x49, 0x9C, 0x5D,  # LBU   T1, 0x9C5D (T2)
    0x15, 0x20, 0x00, 0x03,  # BNEZ  T1, [forward 0x03]
    0x3C, 0x19, 0x80, 0x00,  # LUI   T9, 0x8000
    0x27, 0x39, 0x15, 0x90,  # ADDIU T9, T9, 0x1590
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    0x24, 0x09, 0x00, 0x01,  # ADDIU T1, R0, 0x0001
    0xA4, 0xE9, 0x00, 0x4C,  # SH    T1, 0x004C (A3)
    0x3C, 0x19, 0x0E, 0x00,  # LUI   T9, 0x0E00
    0x27, 0x39, 0x03, 0xE0,  # ADDIU T9, T9, 0x03E0
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    0x00, 0x00, 0x00, 0x00,  # NOP
    # Nitro checker
    0x10, 0x40, 0x00, 0x07,  # BEQZ  V0, [forward 0x07]
    0x3C, 0x0A, 0x80, 0x39,  # LUI   T2, 0x8039
    0x31, 0x69, 0x40, 0x00,  # ANDI  T1, T3, 0x4000
    0x15, 0x20, 0x00, 0x08,  # BNEZ  T1, [forward 0x08]
    0x91, 0x49, 0x9C, 0x5C,  # LBU   T1, 0x9C5C
    0x11, 0x20, 0x00, 0x06,  # BEQZ  T1, [forward 0x06]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x10, 0x00, 0xFF, 0xF4,  # B     [backward 0x0B]
    0x91, 0x4F, 0x9C, 0x18,  # LBU   T7, 0x9C18 (T2)
    0x31, 0xE9, 0x00, 0x02,  # ANDI  T1, T7, 0x0002
    0x15, 0x20, 0xFF, 0xEC,  # BNEZ  T1, [backward 0x13]
    0x91, 0x49, 0x9C, 0x5C,  # LBU   T1, 0x9C5C (T2)
    0x15, 0x20, 0xFF, 0xEF,  # BNEZ  T1, [backward 0x15]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x10, 0x00, 0xFF, 0xE8,  # B     [backward 0x17]
    0x00, 0x00, 0x00, 0x00,  # NOP
]

downstairs_seal_checker = [
    # This will run specifically for the downstairs crack to see if the seal has been removed before then deciding to
    # let the player set the bomb components or not. An anti-dick measure, since there is a limited number of each
    # component per world.
    0x14, 0x40, 0x00, 0x04,  # BNEZ  V0, [forward 0x04]
    0x3C, 0x0A, 0x80, 0x39,  # LUI   T2, 0x8039
    0x91, 0x4A, 0x9C, 0x18,  # LBU   T2, 0x9C18 (T2)
    0x31, 0x4A, 0x00, 0x01,  # ANDI  T2, T2, 0x0001
    0x11, 0x40, 0x00, 0x03,  # BEQZ  T2, [forward 0x03]
    0x3C, 0x19, 0x80, 0x00,  # LUI   T9, 0x8000
    0x27, 0x39, 0x14, 0x48,  # ADDIU T9, T9, 0x1448
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    0x3C, 0x19, 0x0E, 0x00,  # LUI   T9, 0x0E00
    0x27, 0x39, 0x02, 0xB4,  # ADDIU T9, T9, 0x02B4
    0x03, 0x20, 0x00, 0x08,  # JR    T9
    0x00, 0x00, 0x00, 0x00,  # NOP
]

scene_data_modifiers = [
    # Overwrites the scene data on-the-fly after it loads and before the game reads it to load objects. Good for
    # changing anything that is part of a compression chain in the ROM data, including some freestanding item IDs.

    # Demo checker (if we're in a title demo, don't do any of this)
    0x3C, 0x08, 0x80, 0x34,  # LUI   T0, 0x8034
    0x95, 0x09, 0x24, 0x4A,  # LHU   T1, 0x244A (T0)
    0x15, 0x20, 0x00, 0x3C,  # BNEZ  T1, [forward 0x3C]
    0x3C, 0x08, 0x80, 0x39,  # LUI   T0, 0x8039
    0x91, 0x08, 0x9E, 0xE1,  # LBU   T0, 0x9EE1 (T0)
    # Forest of Silence (replaces 1 invisible chicken)
    0x15, 0x00, 0x00, 0x03,  # BNEZ  T0, [forward 0x03]
    0x24, 0x0A, 0x00, 0x01,  # ADDIU T2, R0, 0x0001
    0xA0, 0x4A, 0x01, 0xC9,  # SB    T2, 0x01C9 (V0)
    0x10, 0x00, 0x00, 0x36,  # B     [forward 0x36]
    # Villa front yard (replaces 1 moneybag and 2 beefs)
    0x24, 0x09, 0x00, 0x03,  # ADDIU T1, R0, 0x0003
    0x15, 0x09, 0x00, 0x07,  # BNE   T0, T1, [forward 0x07]
    0x24, 0x0A, 0x00, 0x01,  # ADDIU T2, R0, 0x0001
    0x24, 0x0B, 0x00, 0x01,  # ADDIU T3, R0, 0x0001
    0x24, 0x0C, 0x00, 0x1F,  # ADDIU T4, R0, 0x0001
    0xA0, 0x4A, 0x00, 0x59,  # SB    T2, 0x0059 (V0)
    0xA0, 0x4B, 0x00, 0x39,  # SB    T3, 0x0039 (V0)
    0xA0, 0x4C, 0x00, 0x69,  # SB    T4, 0x0069 (V0)
    0x10, 0x00, 0x00, 0x2D,  # B     [forward 0x2D]
    # Villa living area (Replaces 1 chicken, 1 knife, and 3 invisible Purifyings)
    0x24, 0x09, 0x00, 0x05,  # ADDIU T1, R0, 0x0005
    0x15, 0x09, 0x00, 0x0B,  # BNE   T0, T1, [forward 0x0B]
    0x24, 0x0A, 0x00, 0x01,  # ADDIU T2, R0, 0x0001
    0x24, 0x0B, 0x00, 0x10,  # ADDIU T3, R0, 0x0001
    0x24, 0x0C, 0x00, 0x01,  # ADDIU T4, R0, 0x0001
    0x24, 0x0D, 0x00, 0x01,  # ADDIU T5, R0, 0x0001
    0x24, 0x0E, 0x00, 0x01,  # ADDIU T6, R0, 0x0001
    0xA0, 0x4A, 0x00, 0x79,  # SB    T2, 0x0079 (V0)
    0xA0, 0x4B, 0x00, 0xC9,  # SB    T3, 0x00C9 (V0)
    0xA0, 0x4C, 0x01, 0x09,  # SB    T4, 0x0109 (V0)
    0xA0, 0x4D, 0x01, 0x29,  # SB    T5, 0x0129 (V0)
    0xA0, 0x4E, 0x01, 0x39,  # SB    T6, 0x0139 (V0)
    0x10, 0x00, 0x00, 0x20,  # B     [forward 0x20]
    # Tunnel (replaces 1 invisible Cure Ampoule)
    0x24, 0x09, 0x00, 0x07,  # ADDIU T1, R0, 0x0007
    0x15, 0x09, 0x00, 0x03,  # BNE   T0, T1, [forward 0x03]
    0x24, 0x0A, 0x00, 0x01,  # ADDIU T2, R0, 0x0001
    0xA0, 0x4A, 0x02, 0x69,  # SB    T2, 0x0269 (V0)
    0x10, 0x00, 0x00, 0x1B,  # B [forward 0x1B]
    # Castle Center factory floor (replaces 1 moneybag, 1 jewel, and gives every lizard man coffin item a unique flag)
    0x24, 0x09, 0x00, 0x0B,  # ADDIU T1, R0, 0x000B
    0x15, 0x09, 0x00, 0x11,  # BNE   T0, T1, [forward 0x11]
    0x24, 0x0A, 0x00, 0x01,  # ADDIU T2, R0, 0x0001
    0x24, 0x0B, 0x00, 0x01,  # ADDIU T3, R0, 0x0001
    0xA0, 0x4A, 0x00, 0xC9,  # SB    T2, 0x00C9 (V0)
    0xA0, 0x4B, 0x00, 0xD9,  # SB    T3, 0x00D9 (V0)
    0x24, 0x0A, 0x10, 0x00,  # ADDIU T2, R0, 0x1000
    0x24, 0x0B, 0x20, 0x00,  # ADDIU T3, R0, 0x2000
    0x24, 0x0C, 0x04, 0x00,  # ADDIU T4, R0, 0x0400
    0x24, 0x0D, 0x08, 0x00,  # ADDIU T5, R0, 0x0800
    0x24, 0x0E, 0x02, 0x00,  # ADDIU T6, R0, 0x0200
    0x24, 0x0F, 0x01, 0x00,  # ADDIU T7, R0, 0x0100
    0xA4, 0x4A, 0x00, 0x9A,  # SH    T2, 0x009A (V0)
    0xA4, 0x4B, 0x00, 0xAA,  # SH    T3, 0x00AA (V0)
    0xA4, 0x4C, 0x00, 0xCA,  # SH    T4, 0x00CA (V0)
    0xA4, 0x4D, 0x00, 0xBA,  # SH    T5, 0x00BA (V0)
    0xA4, 0x4E, 0x00, 0xDA,  # SH    T6, 0x00DA (V0)
    0xA4, 0x4F, 0x00, 0xEA,  # SH    T7, 0x00EA (V0)
    0x10, 0x00, 0x00, 0x08,  # B     [forward 0x08]
    # Castle Keep outside (replaces 1 invisible Healing Kit and gives both invisible Healing Kits pickup flags)
    0x24, 0x09, 0x00, 0x14,  # ADDIU T1, R0, 0x0014
    0x15, 0x09, 0x00, 0x06,  # BNE   T0, T1, [forward 0x06]
    0x24, 0x0A, 0x00, 0x01,  # ADDIU T2, R0, 0x0001
    0xA0, 0x4A, 0x00, 0x59,  # SB    T2, 0x0059 (V0)
    0x24, 0x0A, 0x00, 0x01,  # ADDIU T2, R0, 0x0001
    0x24, 0x0B, 0x00, 0x02,  # ADDIU T3, R0, 0x0002
    0xA4, 0x4A, 0x00, 0x4A,  # SH    T2, 0x004A (V0)
    0xA4, 0x4B, 0x00, 0x5A,  # SH    T3, 0x005A (V0)
    0x03, 0xE0, 0x00, 0x08,  # JR    RA
    0x90, 0x62, 0x00, 0x0E   # LBU   V0, 0x000E (V1)
]

forest_endflag_unsetter = [
    # Un-sets the Forest ending cutscene flag after the cutscene triggers so that there's no limit on how many times it
    # can be triggered, and thus the next map can always be transitioned to
    0x3C, 0x08, 0x80, 0x39,  # LUI   T0, 0x8039
    0x91, 0x09, 0x9B, 0xFE,  # LBU   T1, 0x9BFE (T0)
    0x31, 0x2A, 0x00, 0x80,  # ANDI  T2, T1, 0x0080
    0x11, 0x40, 0x00, 0x02,  # BEQZ  T2, [forward 2]
    0x01, 0x2A, 0x48, 0x23,  # SUBU  T1, T1, T2
    0xA1, 0x09, 0x9B, 0xFE,  # SB    T1, 0x9BFE (T0)
    0x03, 0xE0, 0x00, 0x08   # JR    RA
]

coffin_time_checker = [
    # When entering the Villa coffin, this will check to see whether it's day or night and send you to either the Tunnel
    # or Underground Waterway level slot accordingly regardless of which character you are
    0x28, 0x49, 0x00, 0x06,  # SLTI  T1, V0, 0x0006
    0x15, 0x20, 0x00, 0x05,  # BNEZ  T1, [forward 0x05]
    0x28, 0x49, 0x00, 0x12,  # SLTI  T1, V0, 0x0012
    0x11, 0x20, 0x00, 0x03,  # BEQZ  T1, [forward 0x03]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x08, 0x05, 0x5A, 0xEB,  # J     0x80156BAC
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x08, 0x05, 0x5A, 0xED   # J     0x80156BB4
]

werebull_flag_unsetter = [
    # This will un-set Were-bull's defeat flag in Duel Tower after beating him so that the check above his arena can
    # still be acquired later. This is the only check in the entire game that can be permanently missed even with the
    # ability to return to levels. A different flag is used to track him for the "All Bosses" goal.
    0x3C, 0x0E, 0x04, 0x00,  # LUI   T6, 0x0400
    0x15, 0xCF, 0x00, 0x04,  # BNE   T6, T7, [forward 4]
    0x00, 0x00, 0x00, 0x00,  # NOP
    0x3C, 0x0E, 0x00, 0x20,  # LUI   T6, 0x0020
    0x01, 0x4E, 0x50, 0x25,  # OR    T2, T2, T6
    0xAC, 0x4A, 0x61, 0x3C,  # SW    T2, 0x613C (V0)
    0x03, 0x20, 0x00, 0x08   # JR    T9
]

whitedragon_flag_setter = [
    # Sets a flag as soon as the Castle Wall White Dragons' health bar goes away. Their defeat flag in vanilla is tied
    # to hitting the lever after killing them, so this alternate flag is used to track them for the "All Bosses" goal
    # in the event someone kills them and then warps out opting to not be a Konami pachinko champ.
    0x3C, 0x10, 0x80, 0x39,  # LUI   S0, 0x8039
    0x92, 0x0D, 0x9E, 0xE1,  # LBU   T5, 0x9EE1 (S0)
    0x24, 0x0E, 0x00, 0x02,  # ADDIU T6, R0, 0x0002
    0x15, 0xAE, 0x00, 0x04,  # BNE   T5, T6, [forward 4]
    0xA4, 0x40, 0x00, 0x1C,  # SH    R0, 0x001C (V0)
    0x86, 0x0F, 0x9B, 0xF4,  # LH    T7, 0x9BF4 (S0)
    0x35, 0xEF, 0x00, 0x80,  # ORI   T7, T7, 0x0080
    0xA6, 0x0F, 0x9B, 0xF4,  # SH    T7, 0x9BF4 (S0)
    0x08, 0x04, 0xE2, 0x27   # J     0x8013889C
]

crystal_goal_checker = [
    # Checks the Castle Center basement crystal's flag to see if it has been activated and puts 0x0004 in V0 to disallow
    # opening Dracula's door if it hasn't been.
    0x3C, 0x0A, 0x80, 0x39,  # LUI   T2, 0x8039
    0x91, 0x4B, 0x9C, 0x1B,  # LBU   T3, 0x9C1B (T2)
    0x31, 0x6A, 0x00, 0x01,  # ANDI  T2, T3, 0x0001
    0x51, 0x40, 0x00, 0x01,  # BEQZL T2, [forward 0x01]
    0x24, 0x02, 0x00, 0x04,  # ADDIU V0, R0, 0x0004
    0x03, 0xE0, 0x00, 0x08   # JR    RA
]

boss_goal_checker = [
    # Checks each boss flag to see if every boss with a health meter has been defeated and puts 0x0004 in V0 to
    # disallow opening Dracula's door if not all have been.
    0x3C, 0x0A, 0x80, 0x39,  # LUI   T2, 0x8039
    0x95, 0x4B, 0x9B, 0xF4,  # LHU   T3, 0x9BF4 (T2)
    0x31, 0x6D, 0x0B, 0xA0,  # ANDI  T5, T3, 0x0BA0
    0x91, 0x4B, 0x9B, 0xFB,  # LBU   T3, 0x9BFB (T2)
    0x00, 0x0B, 0x61, 0x82,  # SRL   T4, T3, 6
    0x11, 0x80, 0x00, 0x10,  # BEQZ  T4, [forward 0x10]
    0x24, 0x0C, 0x00, 0xC0,  # ADDIU T4, R0, 0x00C0
    0x01, 0xAC, 0x68, 0x21,  # ADDU  T5, T5, T4
    0x91, 0x4B, 0x9B, 0xFD,  # LBU   T3, 0x9BFD (T2)
    0x31, 0x6C, 0x00, 0x20,  # ANDI  T4, T3, 0x0020
    0x01, 0xAC, 0x68, 0x21,  # ADDU  T5, T5, T4
    0x91, 0x4B, 0x9B, 0xFE,  # LBU   T3, 0x9BFE (T2)
    0x31, 0x6C, 0x00, 0x10,  # ANDI  T4, T3, 0x0010
    0x01, 0xAC, 0x68, 0x21,  # ADDU  T5, T5, T4
    0x91, 0x4B, 0x9C, 0x18,  # LBU   T3, 0x9C18 (T2)
    0x31, 0x6C, 0x00, 0x10,  # ANDI  T4, T3, 0x0010
    0x01, 0xAC, 0x68, 0x21,  # ADDU  T5, T5, T4
    0x91, 0x4B, 0x9C, 0x1B,  # LBU   T3, 0x9C1B (T2)
    0x00, 0x0B, 0x61, 0x02,  # SRL   T4, T3, 4
    0x11, 0x80, 0x00, 0x05,  # BEQZ  T4, [forward 0x05]
    0x24, 0x0C, 0x00, 0x50,  # ADDIU T4, R0, 0x0050
    0x01, 0xAC, 0x68, 0x21,  # ADDU  T5, T5, T4
    0x24, 0x0E, 0x0C, 0xF0,  # ADDIU T6, R0, 0x0CF0
    0x55, 0xCD, 0x00, 0x01,  # BNEL  T6, T5, [forward 0x01]
    0x24, 0x02, 0x00, 0x04,  # ADDIU V0, R0, 0x0004
    0x03, 0xE0, 0x00, 0x08   # JR    RA
]

special_goal_checker = [
    # Checks the Special2 counter to see if the specified threshold has been reached and puts 0x0004 in V0 to disallow
    # opening Dracula's door if it hasn't been.
    0x3C, 0x0A, 0x80, 0x39,  # LUI   T2, 0x8039
    0x91, 0x4B, 0x9C, 0x4C,  # LBU   T3, 0x9C4C (T2)
    0x29, 0x6A, 0x00, 0x1E,  # SLTI  T2, T3, 0x001E
    0x55, 0x40, 0x00, 0x01,  # BNEZL T2, 0x8012AC8C
    0x24, 0x02, 0x00, 0x04,  # ADDIU V0, R0, 0x0004
    0x03, 0xE0, 0x00, 0x08   # JR    RA
]
