from typing import Dict
from enum import Enum
class ItemName(str, Enum):
    {% for type in types -%}
    # {{type.name}}
    {% for item in items -%}
    {%- if item.item.item_type == type -%}
    {{item.name.py_name}} = "{{item.name.str_name}}"
    {% endif -%}
    {% endfor -%}

    {% endfor %}

    #Summons
    {% for summon in summons -%}
    {{summon.name}}="{{summon.name}}"
    {% endfor %}

    # Psyenergy
    {% for name in psyenergies-%}
    {{name.py_name}} = "{{name.str_name}}"
    {% endfor -%}

    # Djinn
    {% for name in djinn-%}
    {{name.py_name}} = "{{name.str_name}}"
    {% endfor -%}

    # Events
    {% for name in events-%}
    {{name.py_name}} = "{{name.str_name}}"
    {% endfor %}

    # Characters
    {% for name in characters-%}
    {{name.py_name}} = "{{name.str_name}}"
    {% endfor %}

item_id_by_name: Dict[ItemName, int] = {
    "???": 0,
    {% for d in name_list -%}
    "{{d['name']}}": {{d['id']}},
    {% endfor %}
}

name_by_item_id: Dict[int, ItemName] = {
    {% for d in name_list -%}
    {{d['id']}}: "{{d['name']}}",
    {% endfor %}
}

assert len(ItemName.__members__) + 1 == len(item_id_by_name), \
    "Members: %d, Dict: %d" % (len(ItemName.__members__), len(item_id_by_name))
