# This module is written by Extractor.py, do not edit manually!.

# This module is written by Extractor.py, do not edit manually!.
from functools import partial

def set_generated_rules(hk_world, hk_set_rule):
    player = hk_world.player
    fn = partial(hk_set_rule, hk_world)

    # Events
    
    fn("Can_Replenish_Geo", lambda state: state.count('Tutorial_01', player) or state.count('Can_Replenish_Geo-Crossroads', player) or state.count('Fungus1_01[right1]', player) or state.count('Fungus2_03[left1]', player) or state.count('Fungus2_06[top1]', player) or state.count('Fungus2_12[left1]', player) or state.count('Fungus2_14[top1]', player) or (state.count('Deepnest_41[left1]', player) and (state._hk_option(player, 'DarkRooms') or state.count('LANTERN', player))) or state.count('Ruins1_01[left1]', player) or state.count('Ruins1_17[right1]', player) or state.count('Ruins2_04[right2]', player) or state.count('Ruins2_06[right2]', player) or state.count('Abyss_04[left1]', player) or state.count('Abyss_12[right1]', player) or state.count('Fungus3_40[top1]', player) or state.count('Mines_02[left1]', player) or state.count('Cliffs_02[left1]', player) or state.count('Deepnest_East_01[bot1]', player) or state.count('Deepnest_East_03[left1]', player) or state.count('Deepnest_East_07[left2]', player) or state.count('Deepnest_East_08[top1]', player) or state.count('Waterways_02[top1]', player) or state.count('Waterways_01[right1]', player) or state.count('Waterways_04b[left1]', player))
    fn("Can_Replenish_Geo-Crossroads", lambda state: state.count('Crossroads_01[top1]', player) or state.count('Crossroads_03', player) or state.count('Crossroads_04[door1]', player) or state.count('Crossroads_05[left1]', player) or state.count('Crossroads_07', player) or state.count('Crossroads_08', player) or (state.count('Crossroads_11_alt[left1]', player) and (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player))) or (state.count('Crossroads_12[right1]', player) and (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player))) or state.count('Crossroads_13[left1]', player) or state.count('Crossroads_15[left1]', player) or state.count('Crossroads_16[left1]', player) or state.count('Crossroads_19', player) or state.count('Crossroads_21', player) or state.count('Crossroads_22[bot1]', player) or state.count('Crossroads_25[right1]', player) or state.count('Crossroads_27', player) or state.count('Crossroads_35[right1]', player) or state.count('Crossroads_37[right1]', player) or state.count('Crossroads_39[left1]', player) or state.count('Crossroads_40[left1]', player) or state.count('Crossroads_42[left1]', player) or state.count('Crossroads_48[left1]', player) or state.count('Crossroads_ShamanTemple[left1]', player))
    fn("Rescued_Sly", lambda state: state.count('Room_ruinhouse[left1]', player))
    fn("Rescued_Bretta", lambda state: state.count('Fungus2_23', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) or state.count('WINGS', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))) or ((state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'EnemyPogos'))) and state.count('WINGS', player))))
    fn("Rescued_Deepnest_Zote", lambda state: state.count('Deepnest_33[top1]', player))
    fn("Defeated_Colosseum_Zote", lambda state: state.count('Room_Colosseum_01[left1]', player) and state.count('Rescued_Deepnest_Zote', player) and state.count('Defeated_Colosseum_1', player))
    fn("Lever-Shade_Soul", lambda state: state.count('Ruins1_31b[right1]', player) or (state.count('Ruins1_31b[right2]', player) and state.count('Defeated_Elegant_Warrior', player)))
    fn("Completed_Path_of_Pain", lambda state: state.count('White_Palace_20[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('RIGHTDASH', player) and state.count('WINGS', player) and state.count('Defeated_Path_of_Pain_Arena', player))
    fn("Lever-Dung_Defender", lambda state: state.count('Waterways_05[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('Defeated_Dung_Defender', player) or state.count('Waterways_05[bot2]', player) or state.count('Waterways_05[right1]', player))
    fn("Warp-Lifeblood_Core_to_Abyss", lambda state: state.count('Abyss_08[right1]', player) and (state._hk_option(player, 'PreciseMovement') or state.count('LEFTDASH', player)))
    fn("Warp-Palace_Grounds_to_White_Palace", lambda state: state.count('Abyss_05', player) and state.count('DREAMNAIL', player) > 2)
    fn("Warp-White_Palace_Entrance_to_Palace_Grounds", lambda state: state.count('White_Palace_11[door2]', player) and ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Warp-White_Palace_Atrium_to_Palace_Grounds", lambda state: state.count('White_Palace_03_hub[left1]', player) or (state.count('White_Palace_03_hub[top1]', player) and state.count('Palace_Atrium_Gates_Opened', player)) or (state.count('White_Palace_03_hub[right1]', player) and state.count('Palace_Atrium_Gates_Opened', player)) or (state.count('White_Palace_03_hub', player) and (state._hk_option(player, 'PreciseMovement') or state.count('LEFTCLAW', player) or state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state.count('WINGS', player))))
    fn("Warp-Path_of_Pain_Complete", lambda state: state.count('White_Palace_20[bot1]', player) and state.count('Completed_Path_of_Pain', player))
    fn("Upper_Tram", lambda state: state.count('TRAM', player) and (state.count('Crossroads_46[left1]', player) or state.count('Crossroads_46b[right1]', player)))
    fn("Lower_Tram", lambda state: state.count('TRAM', player) and (state.count('Abyss_03', player) or state.count('Abyss_03_b', player) or state.count('Abyss_03_c', player)))
    fn("Left_Elevator", lambda state: (state.count('Crossroads_49[left1]', player) or state.count('Crossroads_49[right1]', player) or state.count('Crossroads_49b[right1]', player)) and (state.count('Crossroads_49b[right1]', player) and state._hk_option(player, 'RandomizeElevatorPass') == 0 or state.count('Elevator_Pass', player)))
    fn("Right_Elevator", lambda state: (state.count('Ruins2_10[right1]', player) or state.count('Ruins2_10[left1]', player) or state.count('Ruins2_10b[right1]', player) or state.count('Ruins2_10b[right2]', player) or state.count('Ruins2_10b[left1]', player)) and (state._hk_option(player, 'RandomizeElevatorPass') == 0 or state.count('Elevator_Pass', player)))
    fn("Defeated_Gruz_Mother", lambda state: (state.count('Crossroads_04[left1]', player) or state.count('Crossroads_04[top1]', player) or state.count('Crossroads_04[door_Mender_House]', player) or state.count('Crossroads_04[door1]', player) or state.count('Crossroads_04[door_charmshop]', player) or state.count('Crossroads_04[right1]', player)) and True)
    fn("Defeated_False_Knight", lambda state: (state.count('Crossroads_10[right1]', player) or (state.count('Crossroads_10[left1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) and True)
    fn("Defeated_Brooding_Mawlek", lambda state: (state.count('Crossroads_09[left1]', player) or state.count('Crossroads_09[right1]', player)) and ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Hornet_1", lambda state: state.count('Fungus1_04[right1]', player) and True)
    fn("Defeated_Mantis_Lords", lambda state: (state.count('Fungus2_15[top3]', player) or state.count('Fungus2_15[right1]', player) or state.count('Fungus2_15[left1]', player)) and True)
    fn("Defeated_Sanctum_Warrior", lambda state: (state.count('Ruins1_23', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'EnemyPogos'))) or state.count('Ruins1_23[top1]', player)) and True)
    fn("Defeated_Soul_Master", lambda state: state.count('Ruins1_24[right1]', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))
    fn("Defeated_Elegant_Warrior", lambda state: (state.count('Ruins1_31b[right1]', player) or state.count('Ruins1_31b[right2]', player)) and ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Crystal_Guardian", lambda state: (state.count('Mines_18[left1]', player) or state.count('Mines_18[right1]', player) or state.count('Mines_18[top1]', player)) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('Great_Slash', player) or state.count('Cyclone_Slash', player) or ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) and state.count('Dash_Slash', player))) and True)
    fn("Defeated_Enraged_Guardian", lambda state: state.count('Mines_32[bot1]', player) and state.count('Defeated_Crystal_Guardian', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Flukemarm", lambda state: state.count('Waterways_12[right1]', player) and (state.count('SWIM', player) or state.count('LEFTSUPERDASH', player)) and (state.count('FIREBALL', player) > 1 or state.count('SCREAM', player) > 1 or ((state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'RemoveSpellUpgrades') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))))
    fn("Defeated_Dung_Defender", lambda state: state.count('Waterways_05[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Broken_Vessel", lambda state: state.count('Abyss_19[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Hornet_2", lambda state: state.count('Deepnest_East_Hornet[left1]', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Watcher_Knights", lambda state: (state.count('Ruins2_03[bot1]', player) or state.count('Ruins2_03[top1]', player)) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Uumuu", lambda state: state.count('Fungus3_archive_02[top1]', player) and ((state.count('LEFTSUPERDASH', player) or state.count('RIGHTSUPERDASH', player)) or state.count('ACID', player) or (state._hk_option(player, 'AcidSkips') and state.count('LEFTDASH', player) and state.count('LEFTCLAW', player) and state.count('WINGS', player))) and (((state.count('FIREBALL', player) or state.count('SCREAM', player)) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("Defeated_Nosk", lambda state: state.count('Deepnest_32[left1]', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Traitor_Lord", lambda state: (state.count('Fungus3_23[left1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) or (state.count('Fungus3_23[right1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Grimm", lambda state: state.count('Grimm_Main_Tent[left1]', player) and state.count('GRIMMCHILD', player) and (state.count('FLAMES', player) > 5) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Collector", lambda state: state.count('Ruins2_11[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTDASH', player) and state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Hive_Knight", lambda state: state.count('Hive_05[left1]', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Pale_Lurker", lambda state: state.count('GG_Lurker[left1]', player) and (state.count('SWIM', player) or state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player))) and state.count('RIGHTCLAW', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Elder_Hu", lambda state: state.count('Fungus2_32[left1]', player) and state.count('DREAMNAIL', player) and (((state.count('FIREBALL', player) or state.count('SCREAM', player)) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("Defeated_Xero", lambda state: state.count('RestingGrounds_02', player) and state.count('DREAMNAIL', player) and (((state.count('FIREBALL', player) or state.count('SCREAM', player)) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("Defeated_Gorb", lambda state: state.count('Cliffs_02', player) and state.count('DREAMNAIL', player) and (((state.count('FIREBALL', player) or state.count('SCREAM', player)) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("Defeated_Marmu", lambda state: (state.count('Fungus3_40[top1]', player) or (state.count('Fungus3_40[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player)))) and state.count('DREAMNAIL', player) and (((state.count('FIREBALL', player) or state.count('SCREAM', player)) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("Defeated_No_Eyes", lambda state: (state.count('Fungus1_35[left1]', player) or state.count('Fungus1_35[right1]', player)) and state.count('LANTERN', player) and state.count('DREAMNAIL', player) and (((state.count('FIREBALL', player) or state.count('SCREAM', player)) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("Defeated_Galien", lambda state: state.count('Deepnest_40[right1]', player) and state.count('DREAMNAIL', player) and (((state.count('FIREBALL', player) or state.count('SCREAM', player)) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("Defeated_Markoth", lambda state: state.count('Deepnest_East_10[left1]', player) and state.count('DREAMNAIL', player) and (((state.count('FIREBALL', player) or state.count('SCREAM', player)) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("Defeated_Failed_Champion", lambda state: (state.count('Crossroads_10[left1]', player) or state.count('Crossroads_10[right1]', player)) and state.count('Defeated_False_Knight', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))) and state.count('DREAMNAIL', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Soul_Tyrant", lambda state: (state.count('Ruins1_24[right1]', player) or state.count('Ruins1_24[left1]', player)) and state.count('Defeated_Soul_Master', player) and (state.count('LEFTCLAW', player) and state._hk_option(player, 'PreciseMovement') or state.count('WINGS', player) or state.count('LEFTDASH', player)) and state.count('DREAMNAIL', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Lost_Kin", lambda state: (state.count('Abyss_19[left1]', player) or state.count('Abyss_19[bot1]', player)) and state.count('Defeated_Broken_Vessel', player) and state.count('DREAMNAIL', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_White_Defender", lambda state: state.count('Waterways_15[top1]', player) and state.count('DREAMNAIL', player) and (state.count('DREAMER', player) > 2) and state.count('Defeated_Dung_Defender', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Grey_Prince_Zote", lambda state: state.count('Room_Bretta[right1]', player) and state.count('DREAMNAIL', player) and state.count('WINGS', player) and state.count('Rescued_Bretta', player) and state.count('Defeated_Colosseum_Zote', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Colosseum_1", lambda state: state.count('Room_Colosseum_01[left1]', player) and state.count('Can_Replenish_Geo', player) and ((state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))) and (state.count('FOCUS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Colosseum_2", lambda state: state.count('Room_Colosseum_01[left1]', player) and state.count('Can_Replenish_Geo', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or ((state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')) and state.count('WINGS', player))) and ((state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))) and (state.count('FOCUS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Shrumal_Ogre_Arena", lambda state: (state.count('Fungus2_05[bot1]', player) or state.count('Fungus2_05[right1]', player)) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('Cyclone_Slash', player) or state.count('Great_Slash', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))
    fn("Defeated_King's_Station_Arena", lambda state: state.count('Ruins2_09[bot1]', player) and ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_West_Queen's_Gardens_Arena", lambda state: (state.count('Fungus3_10[bot1]', player) or (state.count('Fungus3_10[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player)))) and ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Defeated_Path_of_Pain_Arena", lambda state: state.count('White_Palace_20[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('RIGHTDASH', player) and state.count('WINGS', player) and (state.count('SPELLS', player) > 1 and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state._hk_option(player, 'ProficientCombat')) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Can_Bench", lambda state: state.count('Town', player) or state.count('Room_nailmaster[left1]', player) or state.count('Crossroads_30[left1]', player) or state.count('Crossroads_47[right1]', player) or state.count('Crossroads_04[door_charmshop]', player) or state.count('Crossroads_ShamanTemple[left1]', player) or (state.count('Room_temple[left1]', player) and state.count('Opened_Black_Egg_Temple', player)) or state.count('Fungus1_01b[left1]', player) or state.count('Fungus1_37[left1]', player) or state.count('Fungus1_31[bot1]', player) or state.count('Fungus1_16_alt[right1]', player) or state.count('Room_Slug_Shrine[left1]', player) or state.count('Fungus1_15[door1]', player) or (state.count('Fungus3_archive[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or state.count('Fungus2_02[right1]', player) or state.count('Fungus2_26[left1]', player) or state.count('Fungus2_13', player) or (state.count('Fungus2_31[left1]', player) and state.count('Defeated_Mantis_Lords', player)) or (state.count('Ruins1_02[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or state.count('Ruins1_02[top1]', player) or (state.count('Ruins1_31[left1]', player) and state.count('Can_Replenish_Geo', player)) or state.count('Ruins1_29[left1]', player) or state.count('Ruins1_18[right2]', player) or state.count('Ruins2_08[left1]', player) or state.count('Ruins_Bathhouse[door1]', player) or state.count('Deepnest_30[left1]', player) or state.count('Deepnest_14[left1]', player) or (state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15)))) or (state.count('Waterways_02[top3]', player) and state.count('QUAKE', player)) or (state.count('Waterways_02', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player)) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips') and (state.count('WINGS', player) or state.count('RIGHTCLAW', player))))) or (state.count('Abyss_18[right1]', player) and state.count('Can_Replenish_Geo', player)) or state.count('Abyss_22[left1]', player) or state.count('Deepnest_East_06[door1]', player) or state.count('Deepnest_East_13[bot1]', player) or state.count('Room_Colosseum_02[top1]', player) or state.count('Room_Colosseum_02[top2]', player) or state.count('Hive_01[right2]', player) or state.count('Mines_29[left1]', player) or (state.count('Mines_18[left1]', player) and state.count('Defeated_Crystal_Guardian', player)) or state.count('RestingGrounds_09[left1]', player) or state.count('RestingGrounds_12[door_Mansion]', player) or (state.count('Fungus1_24[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or (state.count('Fungus3_50[right1]', player) and state.count('Can_Replenish_Geo', player)) or state.count('Fungus3_40[right1]', player) or state.count('White_Palace_01', player) or state.count('White_Palace_03_hub', player) or state.count('White_Palace_06[top1]', player) or state.count('Upper_Tram', player) or state.count('Lower_Tram', player))
    fn("Can_Stag", lambda state: state.count('Room_Town_Stag_Station[left1]', player) or state.count('Crossroads_47[right1]', player) or state.count('Fungus1_16_alt[right1]', player) or state.count('Fungus2_02[right1]', player) or (state.count('Fungus3_40[top1]', player) or state.count('Fungus3_40[right1]', player)) or state.count('Ruins1_29[left1]', player) or state.count('Ruins2_08[left1]', player) or state.count('RestingGrounds_09[left1]', player) or state.count('Deepnest_09[left1]', player) or state.count('Abyss_22[left1]', player))
    fn("Can_Repair_Fragile_Charms", lambda state: state.count('Fungus2_26[left1]', player) and state.count('Can_Replenish_Geo', player))
    fn("First_Grimmchild_Upgrade", lambda state: state.count('Grimm_Main_Tent[left1]', player) and state.count('GRIMMCHILD', player) and (state.count('FLAMES', player) > 2))
    fn("Second_Grimmchild_Upgrade", lambda state: state.count('Grimm_Main_Tent[left1]', player) and state.count('GRIMMCHILD', player) and (state.count('FLAMES', player) > 5) and state.count('Defeated_Grimm', player))
    fn("Nightmare_Lantern_Lit", lambda state: state.count('Cliffs_06[left1]', player) and state.count('DREAMNAIL', player) or state.count('GRIMMCHILD', player))
    fn("Opened_Waterways_Manhole", lambda state: state.count('Ruins1_05b', player) and state.count('SIMPLE', player) > 3)
    fn("Opened_Dung_Defender_Wall", lambda state: state.count('Waterways_05[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('Defeated_Dung_Defender', player) or state.count('Waterways_05[bot2]', player) or state.count('Waterways_05[right1]', player))
    fn("Opened_Resting_Grounds_Floor", lambda state: (state.count('RestingGrounds_06[left1]', player) or state.count('RestingGrounds_06[right1]', player)) and (state.count('LEFTDASH', player) or state.count('LEFTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) or state.count('RestingGrounds_06[top1]', player))
    fn("Opened_Resting_Grounds_Catacombs_Wall", lambda state: state.count('RestingGrounds_10', player))
    fn("Opened_Pleasure_House_Wall", lambda state: state.count('Ruins_Bathhouse[door1]', player) or state.count('Ruins_Bathhouse[right1]', player))
    fn("Opened_Gardens_Stag_Exit", lambda state: state.count('Fungus3_40[top1]', player) or state.count('Fungus3_40[right1]', player) or (state.count("Queen's_Gardens_Stag", player) and state.count('Can_Stag', player)))
    fn("Opened_Mawlek_Wall", lambda state: state.count('Crossroads_09[right1]', player) or (state.count('Crossroads_09[left1]', player) and state.count('Defeated_Brooding_Mawlek', player)))
    fn("Opened_Shaman_Pillar", lambda state: state.count('Crossroads_06[left1]', player) or state.count('Crossroads_06[door1]', player) or state.count('Crossroads_06[right1]', player) or state.count('DREAMER', player))
    fn("Opened_Archives_Exit_Wall", lambda state: state.count('Fungus3_47', player))
    fn("Opened_Tramway_Exit_Gate", lambda state: state.count('Deepnest_26b[right2]', player) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state._hk_option(player, 'EnemyPogos')))))
    fn("Broke_Sanctum_Glass_Floor", lambda state: state.count('Ruins1_30', player) and state.count('QUAKE', player))
    fn("Opened_Emilitia_Door", lambda state: state.count('Ruins_House_03[left1]', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('Ruins_House_03[left2]', player)))
    fn("Lit_Abyss_Lighthouse", lambda state: state.count('Abyss_Lighthouse_room[left1]', player))
    fn("Opened_Lower_Kingdom's_Edge_Wall", lambda state: state.count('Deepnest_East_02', player))
    fn("Opened_Glade_Door", lambda state: state.count('RestingGrounds_07[right1]', player) and state.count('ESSENCE', player) > 199)
    fn("Opened_Waterways_Exit", lambda state: (state.count('Waterways_09[left1]', player) or state.count('Waterways_09[right1]', player)) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)))) or False)
    fn("Palace_Entrance_Lantern_Lit", lambda state: state.count('White_Palace_02[left1]', player) and state.count('LEFTCLAW', player) and state.count('WINGS', player) and ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("Palace_Left_Lantern_Lit", lambda state: state.count('White_Palace_14[right1]', player))
    fn("Palace_Right_Lantern_Lit", lambda state: state.count('White_Palace_15[right1]', player))
    fn("Palace_Atrium_Gates_Opened", lambda state: state.count('Palace_Left_Lantern_Lit', player) and state.count('Palace_Right_Lantern_Lit', player))
    fn("Opened_Black_Egg_Temple", lambda state: state.count('Room_temple[left1]', player) and state.count('DREAMER', player) > 2)
    fn("Tutorial_01", lambda state: state.count('Tutorial_01[right1]', player) or state.count('Tutorial_01[top1]', player) or state.count('Tutorial_01[top2]', player))
    fn("Town", lambda state: state.count('Town[left1]', player) or state.count('Town[top1]', player) or state.count('Town[bot1]', player) or state.count('Town[right1]', player) or state.count('Town[door_station]', player) or state.count('Town[door_sly]', player) or state.count('Town[door_mapper]', player) or state.count('Town[door_bretta]', player) or state.count('Town[door_jiji]', player))
    fn("Crossroads_03", lambda state: state.count('Crossroads_03[right1]', player) or state.count('Crossroads_03[right2]', player) or state.count('Crossroads_03[left1]', player) or state.count('Crossroads_03[left2]', player) or state.count('Crossroads_03[bot1]', player))
    fn("Crossroads_07", lambda state: state.count('Crossroads_07[left1]', player) or state.count('Crossroads_07[left2]', player) or state.count('Crossroads_07[left3]', player) or state.count('Crossroads_07[right1]', player) or state.count('Crossroads_07[right2]', player) or state.count('Crossroads_07[bot1]', player))
    fn("Crossroads_08", lambda state: state.count('Crossroads_08[left1]', player) or state.count('Crossroads_08[left2]', player) or state.count('Crossroads_08[right1]', player) or state.count('Crossroads_08[right2]', player))
    fn("Crossroads_14", lambda state: state.count('Crossroads_14[left1]', player) or state.count('Crossroads_14[left2]', player) or state.count('Crossroads_14[right1]', player) or state.count('Crossroads_14[right2]', player))
    fn("Crossroads_18", lambda state: state.count('Crossroads_18[right1]', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player))) or state.count('Crossroads_18[bot1]', player) or state.count('Crossroads_18[right2]', player))
    fn("Crossroads_19", lambda state: state.count('Crossroads_19[left1]', player) or state.count('Crossroads_19[left2]', player) or state.count('Crossroads_19[right1]', player) or state.count('Crossroads_19[top1]', player))
    fn("Crossroads_21", lambda state: state.count('Crossroads_21[left1]', player) or state.count('Crossroads_21[right1]', player) or state.count('Crossroads_21[top1]', player))
    fn("Crossroads_27", lambda state: state.count('Crossroads_27[right1]', player) or state.count('Crossroads_27[bot1]', player) or state.count('Crossroads_27[left1]', player) or state.count('Crossroads_27[left2]', player))
    fn("Crossroads_33", lambda state: state.count('Crossroads_33[top1]', player) or state.count('Crossroads_33[left1]', player) or state.count('Crossroads_33[left2]', player) or state.count('Crossroads_33[right1]', player) or state.count('Crossroads_33[right2]', player))
    fn("Fungus1_11", lambda state: state.count('Fungus1_11[left1]', player) or state.count('Fungus1_11[top1]', player) or state.count('Fungus1_11[bot1]', player) or state.count('Fungus1_11[right1]', player) or state.count('Fungus1_11[right2]', player))
    fn("Fungus1_21", lambda state: state.count('Fungus1_21[left1]', player) or state.count('Fungus1_21[top1]', player) or (state.count('Fungus1_21[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player))) or state.count('Fungus1_21[bot1]', player))
    fn("Fungus1_30", lambda state: state.count('Fungus1_30[left1]', player) or state.count('Fungus1_30[right1]', player) or state.count('Fungus1_30[top1]', player) or state.count('Fungus1_30[top3]', player))
    fn("Fungus3_01", lambda state: state.count('Fungus3_01[left1]', player) or state.count('Fungus3_01[top1]', player) or state.count('Fungus3_01[right1]', player) or state.count('Fungus3_01[right2]', player))
    fn("Fungus3_02", lambda state: state.count('Fungus3_02[left1]', player) or state.count('Fungus3_02[left2]', player) or state.count('Fungus3_02[left3]', player) or state.count('Fungus3_02[right1]', player) or state.count('Fungus3_02[right2]', player))
    fn("Fungus3_26", lambda state: state.count('Fungus3_26[top1]', player) or state.count('Fungus3_26[left1]', player) or state.count('Fungus3_26[left2]', player) or state.count('Fungus3_26[left3]', player) or state.count('Fungus3_26[right1]', player))
    fn("Fungus3_44", lambda state: state.count('Fungus3_44[bot1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) or state.count('Fungus3_44[door1]', player) or state.count('Fungus3_44[right1]', player))
    fn("Fungus3_47", lambda state: state.count('Fungus3_47[left1]', player) or state.count('Fungus3_47[door1]', player) or state.count('Fungus3_47[right1]', player))
    fn("Fungus2_01", lambda state: state.count('Fungus2_01[left1]', player) or state.count('Fungus2_01[left2]', player) or state.count('Fungus2_01[left3]', player) or state.count('Fungus2_01[right1]', player))
    fn("Fungus2_03", lambda state: state.count('Fungus2_03[left1]', player) or state.count('Fungus2_03[bot1]', player) or state.count('Fungus2_03[right1]', player))
    fn("Fungus2_04", lambda state: state.count('Fungus2_04[left1]', player) or state.count('Fungus2_04[right1]', player) or state.count('Fungus2_04[right2]', player) or state.count('Fungus2_04[top1]', player))
    fn("Fungus2_06", lambda state: state.count('Fungus2_06[left1]', player) or (state.count('Fungus2_06[left2]', player) and state.count('ACID', player)) or state.count('Fungus2_06[top1]', player) or state.count('Fungus2_06[right1]', player) or state.count('Fungus2_06[right2]', player))
    fn("Fungus2_11", lambda state: state.count('Fungus2_11[top1]', player) or state.count('Fungus2_11[left1]', player) or state.count('Fungus2_11[left2]', player) or state.count('Fungus2_11[right1]', player))
    fn("Fungus2_13", lambda state: state.count('Fungus2_13[top1]', player) or state.count('Fungus2_13[left2]', player) or (state.count('Fungus2_13[left3]', player) and (state.count('RIGHTDASH', player) or state.count('ACID', player) or state.count('WINGS', player) or state.count('LEFTCLAW', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True) or state._hk_option(player, 'ShadeSkips'))))
    fn("Fungus2_14", lambda state: state.count('Fungus2_14[top1]', player) or state.count('Fungus2_14[bot3]', player) or (state.count('Fungus2_14[right1]', player) and (state.count('LEFTDASH', player) or state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('LEFTSUPERDASH', player) or state.count('ACID', player))))
    fn("Fungus2_17", lambda state: state.count('Fungus2_17[right1]', player) or state.count('Fungus2_17[left1]', player) or state.count('Fungus2_17[bot1]', player))
    fn("Fungus2_20", lambda state: state.count('Fungus2_20[left1]', player) or state.count('Fungus2_20[right1]', player))
    fn("Fungus2_23", lambda state: state.count('Fungus2_23[right1]', player) or (state.count('Fungus2_23[right2]', player) and state.count('Opened_Waterways_Exit', player)))
    fn("Deepnest_01", lambda state: state.count('Deepnest_01[left1]', player) or state.count('Deepnest_01[bot1]', player) or state.count('Deepnest_01[right1]', player))
    fn("Deepnest_01b", lambda state: state.count('Deepnest_01b[top1]', player) or state.count('Deepnest_01b[top2]', player) or state.count('Deepnest_01b[right1]', player) or (state.count('Deepnest_01b[right2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or (state.count('Deepnest_01b[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_02", lambda state: state.count('Deepnest_02[left1]', player) or state.count('Deepnest_02[left2]', player) or state.count('Deepnest_02[right1]', player))
    fn("Deepnest_03", lambda state: state.count('Deepnest_03[right1]', player) or state.count('Deepnest_03[top1]', player) or state.count('Deepnest_03[left1]', player) or state.count('Deepnest_03[left2]', player))
    fn("Deepnest_10", lambda state: state.count('Deepnest_10[right1]', player) or state.count('Deepnest_10[right2]', player) or state.count('Deepnest_10[door1]', player) or state.count('Deepnest_10[door2]', player))
    fn("Deepnest_14", lambda state: state.count('Deepnest_14[left1]', player) or state.count('Deepnest_14[bot1]', player) or state.count('Deepnest_14[bot2]', player))
    fn("Deepnest_17", lambda state: state.count('Deepnest_17[left1]', player) or state.count('Deepnest_17[right1]', player) or state.count('Deepnest_17[top1]', player) or state.count('Deepnest_17[bot1]', player))
    fn("Deepnest_26", lambda state: state.count('Deepnest_26[right1]', player) or state.count('Deepnest_26[bot1]', player) or (state.count('Deepnest_26[left1]', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player)) or state.count('WINGS', player)) and state.count('Opened_Tramway_Exit_Gate', player)))
    fn("Deepnest_34", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_34[left1]', player) or state.count('Deepnest_34[right1]', player) or state.count('Deepnest_34[top1]', player)))
    fn("Deepnest_35", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_35[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('Deepnest_35[left1]', player) or state.count('Deepnest_35[top1]', player)))
    fn("Deepnest_37", lambda state: state.count('Deepnest_37[left1]', player) or state.count('Deepnest_37[top1]', player) or state.count('Deepnest_37[right1]', player) or state.count('Deepnest_37[bot1]', player))
    fn("Deepnest_39", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_39[right1]', player) or state.count('Deepnest_39[door1]', player) or state.count('Deepnest_39[top1]', player) or state.count('Deepnest_39[left1]', player)))
    fn("Deepnest_41", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_41[left1]', player) and (state.count('RIGHTCLAW', player) or ((state.count('LEFTCLAW', player) or state.count('WINGS', player)) and state._hk_option(player, 'EnemyPogos'))) or (state.count('Deepnest_41[left2]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))) or (state.count('Deepnest_41[right1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)))))
    fn("Deepnest_42", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_42[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state.count('Deepnest_42[left1]', player) or state.count('Deepnest_42[top1]', player)))
    fn("Deepnest_East_02", lambda state: state.count('Deepnest_East_02[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'EnemyPogos'))) or state.count('Deepnest_East_02[top1]', player) or state.count('Deepnest_East_02[right1]', player))
    fn("Deepnest_East_03", lambda state: state.count('Deepnest_East_03[left1]', player) or state.count('Deepnest_East_03[left2]', player) or state.count('Deepnest_East_03[top1]', player) or state.count('Deepnest_East_03[right1]', player) or state.count('Deepnest_East_03[right2]', player) or state.count('Deepnest_East_03[top2]', player))
    fn("Deepnest_East_04", lambda state: state.count('Deepnest_East_04[left1]', player) and state.count('ACID', player) or state.count('Deepnest_East_04[left2]', player) or state.count('Deepnest_East_04[right2]', player) or (state.count('Deepnest_East_04[right1]', player) and (state.count('ACID', player) or state.count('LEFTDASH', player) or state.count('WINGS', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True) or (state.count('MASKSHARDS', player) > 7))))
    fn("Deepnest_East_07", lambda state: state.count('Deepnest_East_07[right1]', player) or state.count('Deepnest_East_07[left1]', player) or state.count('Deepnest_East_07[left2]', player))
    fn("Deepnest_East_11", lambda state: state.count('Deepnest_East_11[left1]', player) or state.count('Deepnest_East_11[bot1]', player) or (state.count('Deepnest_East_11[top1]', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('Cyclone_Slash', player) or state.count('Great_Slash', player) or state.count('FIREBALL', player) or state.count('QUAKE', player))) or state.count('Deepnest_East_11[right1]', player))
    fn("Deepnest_East_18", lambda state: state.count('Deepnest_East_18[top1]', player) or state.count('Deepnest_East_18[bot1]', player) or (state.count('Deepnest_East_18[right2]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player))))
    fn("Hive_03_c", lambda state: state.count('Hive_03_c[left1]', player) or state.count('Hive_03_c[top1]', player) or state.count('Hive_03_c[right2]', player) or state.count('Hive_03_c[right3]', player))
    fn("Abyss_03", lambda state: state.count('Abyss_03[top1]', player) or (state.count('Abyss_03[bot1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player))) or state.count('Abyss_03[bot2]', player))
    fn("Abyss_03_b", lambda state: state.count('Abyss_03_b[left1]', player))
    fn("Abyss_03_c", lambda state: state.count('Abyss_03_c[top1]', player) or state.count('Abyss_03_c[right1]', player))
    fn("Abyss_04", lambda state: state.count('Abyss_04[top1]', player) or state.count('Abyss_04[right1]', player) or state.count('Abyss_04[bot1]', player) or state.count('Abyss_04[left1]', player))
    fn("Abyss_06_Core", lambda state: state.count('Abyss_06_Core[top1]', player) and state.count('BRAND', player) or state.count('Abyss_06_Core[left1]', player) or state.count('Abyss_06_Core[left3]', player) or state.count('Abyss_06_Core[bot1]', player) or state.count('Abyss_06_Core[right2]', player))
    fn("Abyss_09", lambda state: state.count('Abyss_09[left1]', player) and (state.count('RIGHTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or (state.count('SWIM', player) and state.count('WHITEFRAGMENT', player) > 2)) or state.count('WINGS', player)) or (state.count('Abyss_09[right1]', player) and (state.count('Lit_Abyss_Lighthouse', player) or state.count('WHITEFRAGMENT', player) > 2) and (state.count('LEFTSUPERDASH', player) or state.count('SWIM', player))) or state.count('Abyss_09[right2]', player))
    fn("Abyss_19", lambda state: state.count('Abyss_19[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or state.count('Abyss_19[right1]', player))
    fn("Abyss_01", lambda state: state.count('Abyss_01[left1]', player) or state.count('Abyss_01[right1]', player) or (state.count('Abyss_01[left3]', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player)))) or (state.count('Abyss_01[left2]', player) and (state._hk_option(player, 'SpikeTunnels') and state.count('RIGHTDASH', player) and (state.count('Dashmaster', player) and state.count('Can_Bench', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))) or state.count('RIGHTSUPERDASH', player))) or (state.count('Abyss_01[right2]', player) and (state._hk_option(player, 'SpikeTunnels') and state.count('LEFTDASH', player) and (state.count('Dashmaster', player) and state.count('Can_Bench', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))) or state.count('LEFTSUPERDASH', player))))
    fn("Waterways_01", lambda state: state.count('Waterways_01[top1]', player) or state.count('Waterways_01[right1]', player) or state.count('Waterways_01[bot1]', player) or state.count('Waterways_01[left1]', player))
    fn("Waterways_02", lambda state: state.count('Waterways_02[top1]', player) or state.count('Waterways_02[top2]', player) or (state.count('Waterways_02[top3]', player) and state.count('QUAKE', player)) or state.count('Waterways_02[bot1]', player) or state.count('Waterways_02[bot2]', player))
    fn("Waterways_04", lambda state: state.count('Waterways_04[right1]', player) or (state.count('Waterways_04[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or state.count('Waterways_04[left2]', player))
    fn("Waterways_04b", lambda state: state.count('Waterways_04b[right1]', player) or state.count('Waterways_04b[right2]', player) or state.count('Waterways_04b[left1]', player))
    fn("Waterways_07", lambda state: state.count('Waterways_07[left1]', player) and (state.count('ACID', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('RIGHTSUPERDASH', player)) or (state.count('WINGS', player) and state.count('RIGHTDASH', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) or (state.count('Waterways_07[right1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or (state.count('Waterways_07[right2]', player) and state.count('ACID', player)) or state.count('Waterways_07[door1]', player) or state.count('Waterways_07[top1]', player))
    fn("Ruins1_03", lambda state: state.count('Ruins1_03[top1]', player) or state.count('Ruins1_03[left1]', player) or state.count('Ruins1_03[right1]', player) or state.count('Ruins1_03[right2]', player))
    fn("Ruins1_05b", lambda state: state.count('Ruins1_05b[top1]', player) or state.count('Ruins1_05b[right1]', player) or state.count('Ruins1_05b[left1]', player) or state.count('Ruins1_05b[bot1]', player))
    fn("Ruins1_05c", lambda state: state.count('Ruins1_05c[bot1]', player) or state.count('Ruins1_05c[left2]', player) or state.count('Ruins1_05c[top1]', player) or state.count('Ruins1_05c[top2]', player) or state.count('Ruins1_05c[top3]', player))
    fn("Ruins1_05", lambda state: state.count('Ruins1_05[bot3]', player) or state.count('Ruins1_05[right1]', player) or state.count('Ruins1_05[right2]', player) or state.count('Ruins1_05[top1]', player))
    fn("Ruins1_23", lambda state: state.count('Ruins1_23[right2]', player) or state.count('Ruins1_23[left1]', player) or state.count('Ruins1_23[bot1]', player))
    fn("Ruins1_28", lambda state: state.count('Ruins1_28[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player)) or state._hk_option(player, 'BackgroundObjectPogos') or (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips')))) or state.count('Ruins1_28[bot1]', player) or state.count('Ruins1_28[right1]', player))
    fn("Ruins1_30", lambda state: state.count('Ruins1_30[left1]', player) or (state.count('Ruins1_30[left2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('QUAKE', player)) or state.count('Ruins1_30[bot1]', player) or state.count('Ruins1_30[right1]', player))
    fn("Ruins1_31", lambda state: state.count('Ruins1_31[right1]', player) or state.count('Ruins1_31[left2]', player) or state.count('Ruins1_31[left3]', player))
    fn("Ruins2_01", lambda state: state.count('Ruins2_01[top1]', player) or state.count('Ruins2_01[bot1]', player) or state.count('Ruins2_01[left2]', player))
    fn("Ruins2_01_b", lambda state: state.count('Ruins2_01_b[top1]', player) or state.count('Ruins2_01_b[left1]', player) or state.count('Ruins2_01_b[right1]', player))
    fn("Ruins2_03b", lambda state: state.count('Ruins2_03b[top1]', player) or state.count('Ruins2_03b[top2]', player) or state.count('Ruins2_03b[left1]', player) or state.count('Ruins2_03b[bot1]', player))
    fn("Ruins2_04", lambda state: state.count('Ruins2_04[left1]', player) or state.count('Ruins2_04[left2]', player) or state.count('Ruins2_04[right1]', player) or state.count('Ruins2_04[right2]', player) or state.count('Ruins2_04[door_Ruin_House_01]', player) or state.count('Ruins2_04[door_Ruin_House_02]', player) or state.count('Ruins2_04[door_Ruin_House_03]', player) or state.count('Ruins2_04[door_Ruin_Elevator]', player))
    fn("Ruins2_10", lambda state: state.count('Ruins2_10[right1]', player) or state.count('Ruins2_10[left1]', player) or state.count('Right_Elevator', player))
    fn("RestingGrounds_02", lambda state: state.count('RestingGrounds_02[top1]', player) or state.count('RestingGrounds_02[left1]', player) or state.count('RestingGrounds_02[bot1]', player) or state.count('RestingGrounds_02[right1]', player))
    fn("RestingGrounds_05", lambda state: state.count('RestingGrounds_05[left1]', player) or state.count('RestingGrounds_05[left2]', player) or state.count('RestingGrounds_05[left3]', player) or state.count('RestingGrounds_05[right1]', player) or state.count('RestingGrounds_05[right2]', player) or state.count('RestingGrounds_05[bot1]', player))
    fn("RestingGrounds_10", lambda state: state.count('RestingGrounds_10[left1]', player) or state.count('RestingGrounds_10[top1]', player) or state.count('RestingGrounds_10[top2]', player))
    fn("Mines_02", lambda state: state.count('Mines_02[top1]', player) or state.count('Mines_02[top2]', player) or state.count('Mines_02[left1]', player) or state.count('Mines_02[right1]', player))
    fn("Mines_03", lambda state: state.count('Mines_03[right1]', player) or state.count('Mines_03[top1]', player) or state.count('Mines_03[bot1]', player))
    fn("Mines_04", lambda state: state.count('Mines_04[left1]', player) or state.count('Mines_04[left2]', player) or (state.count('Mines_04[left3]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state._hk_option(player, 'EnemyPogos'))))) or state.count('Mines_04[right1]', player) or state.count('Mines_04[top1]', player))
    fn("Mines_05", lambda state: state.count('Mines_05[right1]', player) or state.count('Mines_05[top1]', player) or state.count('Mines_05[bot1]', player) or state.count('Mines_05[left1]', player) or state.count('Mines_05[left2]', player))
    fn("Mines_10", lambda state: state.count('Mines_10[left1]', player) and (state.count('RIGHTDASH', player) and state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player)) or (state.count('Mines_10[bot1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)))) or (state.count('Mines_10[right1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('LEFTSUPERDASH', player)))
    fn("Mines_11", lambda state: state.count('Mines_11[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or state.count('Mines_11[right1]', player) or state.count('Mines_11[top1]', player))
    fn("Mines_18", lambda state: state.count('Mines_18[left1]', player) or state.count('Mines_18[right1]', player) or state.count('Mines_18[top1]', player))
    fn("Mines_20", lambda state: state.count('Mines_20[left1]', player) or state.count('Mines_20[right1]', player) or (state.count('Mines_20[right2]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))))
    fn("Mines_23", lambda state: (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))) or state.count('Mines_23[right1]', player)) and (state.count('Mines_23[left1]', player) or state.count('Mines_23[top1]', player) or state.count('Mines_23[right1]', player) or state.count('Mines_23[right2]', player)))
    fn("Fungus3_04", lambda state: state.count('Fungus3_04[left1]', player) or state.count('Fungus3_04[left2]', player) or state.count('Fungus3_04[right1]', player) or state.count('Fungus3_04[right2]', player))
    fn("Fungus3_11", lambda state: state.count('Fungus3_11[left1]', player) or (state.count('Fungus3_11[left2]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player)))) or (state.count('Fungus3_11[right1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player))))
    fn("Fungus3_13", lambda state: state.count('Fungus3_13[left1]', player) or state.count('Fungus3_13[left2]', player) or state.count('Fungus3_13[left3]', player) or state.count('Fungus3_13[bot1]', player) or state.count('Fungus3_13[right1]', player))
    fn("Fungus3_22", lambda state: state.count('Fungus3_22[right1]', player) or state.count('Fungus3_22[left1]', player) or state.count('Fungus3_22[bot1]', player))
    fn("Fungus3_34", lambda state: state.count('Fungus3_34[left1]', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player)) or state.count('Fungus3_34[right1]', player) or state.count('Fungus3_34[top1]', player))
    fn("Fungus3_40", lambda state: state.count('Fungus3_40[top1]', player) or state.count('Fungus3_40[right1]', player))
    fn("Cliffs_01", lambda state: state.count('Cliffs_01[right1]', player) or state.count('Cliffs_01[right2]', player) or state.count('Cliffs_01[right3]', player) or state.count('Cliffs_01[right4]', player))
    fn("Cliffs_02", lambda state: state.count('Cliffs_02[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')))) or state.count('Cliffs_02[door1]', player) or state.count('Cliffs_02[left1]', player) or state.count('Cliffs_02[left2]', player))
    fn("White_Palace_01", lambda state: state.count('White_Palace_01[left1]', player) and (state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player))) or (state.count('White_Palace_01[right1]', player) and (state.count('LEFTDASH', player) and (state._hk_option(player, 'BackgroundObjectPogos') or state.count('LEFTCLAW', player)) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('LEFTSUPERDASH', player)) or state.count('WINGS', player))) or (state.count('White_Palace_01[top1]', player) and state.count('Palace_Entrance_Lantern_Lit', player)))
    fn("White_Palace_03_hub", lambda state: state.count('White_Palace_03_hub[left1]', player) or state.count('White_Palace_03_hub[left2]', player) or (state.count('White_Palace_03_hub[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or state.count('White_Palace_03_hub[right1]', player) or (state.count('White_Palace_03_hub[top1]', player) and state.count('Palace_Atrium_Gates_Opened', player)))
    fn("White_Palace_13", lambda state: state.count('White_Palace_13[right1]', player) and state._hk_option(player, 'ObscureSkips') and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and state.count('LEFTCLAW', player) and (state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or (state.count('White_Palace_13[left1]', player) and state.count('RIGHTCLAW', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))) or (state.count('White_Palace_13[left2]', player) and state.count('LEFTCLAW', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and (state.count('WINGS', player) or state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player)))) or state.count('White_Palace_13[left3]', player))
    fn("Abyss_05", lambda state: state.count('Abyss_05[left1]', player) or state.count('Abyss_05[right1]', player) or state.count('Warp-White_Palace_Entrance_to_Palace_Grounds', player) or state.count('Warp-White_Palace_Atrium_to_Palace_Grounds', player))
    fn("Room_temple[left1]", lambda state: state.count('Room_temple[left1]', player))
    fn("Tutorial_01[right1]", lambda state: state.count('Tutorial_01[right1]', player) or state.count('Tutorial_01', player))
    fn("Tutorial_01[top1]", lambda state: False)
    fn("Tutorial_01[top2]", lambda state: state.count('Tutorial_01[top2]', player) or (((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips'))) and state.count('Tutorial_01', player)))
    fn("Town[left1]", lambda state: state.count('Town[left1]', player) or (state.count('Town', player) and (state.count('LEFTCLAW', player) or (state.count('Town[right1]', player) and state.count('LEFTSUPERDASH', player)))))
    fn("Town[bot1]", lambda state: state.count('Town[bot1]', player) or state.count('Town', player))
    fn("Town[right1]", lambda state: state.count('Town[right1]', player) or (state.count('Town', player) and (state.count('LEFTCLAW', player) or state.count('Town[left1]', player)) and state.count('WINGS', player) and state.count('RIGHTSUPERDASH', player)))
    fn("Town[top1]", lambda state: False)
    fn("Town[door_station]", lambda state: state.count('Town[door_station]', player) or (state.count('Town', player) and state.count('Dirtmouth_Stag', player)))
    fn("Town[door_sly]", lambda state: state.count('Town[door_sly]', player) or (state.count('Town', player) and state.count('Rescued_Sly', player)))
    fn("Town[door_mapper]", lambda state: state.count('Town[door_mapper]', player) or state.count('Town', player))
    fn("Town[door_jiji]", lambda state: state.count('Town[door_jiji]', player) or (state.count('Town', player) and state.count('SIMPLE', player) > 3))
    fn("Town[door_bretta]", lambda state: state.count('Town[door_bretta]', player) or (state.count('Town', player) and state.count('Rescued_Bretta', player)))
    fn("Town[room_divine]", lambda state: state.count('Town[room_divine]', player) or (state.count('Town', player) and state.count('Nightmare_Lantern_Lit', player)))
    fn("Town[room_grimm]", lambda state: state.count('Town[room_grimm]', player) or (state.count('Town', player) and state.count('Nightmare_Lantern_Lit', player)))
    fn("Room_shop[left1]", lambda state: state.count('Room_shop[left1]', player))
    fn("Room_Town_Stag_Station[left1]", lambda state: state.count('Room_Town_Stag_Station[left1]', player) or (state.count('Dirtmouth_Stag', player) and state.count('Can_Stag', player)))
    fn("Room_mapper[left1]", lambda state: state.count('Room_mapper[left1]', player))
    fn("Room_Bretta[right1]", lambda state: state.count('Room_Bretta[right1]', player))
    fn("Room_Ouiji[left1]", lambda state: state.count('Room_Ouiji[left1]', player))
    fn("Grimm_Divine[left1]", lambda state: state.count('Grimm_Divine[left1]', player))
    fn("Grimm_Main_Tent[left1]", lambda state: state.count('Grimm_Main_Tent[left1]', player))
    fn("Crossroads_01[top1]", lambda state: state.count('Crossroads_01[top1]', player) or state.count('Crossroads_01[left1]', player) or state.count('Crossroads_01[right1]', player))
    fn("Crossroads_01[left1]", lambda state: state.count('Crossroads_01[left1]', player) or state.count('Crossroads_01[top1]', player) or state.count('Crossroads_01[right1]', player))
    fn("Crossroads_01[right1]", lambda state: state.count('Crossroads_01[right1]', player) or state.count('Crossroads_01[top1]', player) or state.count('Crossroads_01[left1]', player))
    fn("Crossroads_02[left1]", lambda state: state.count('Crossroads_02[left1]', player) or state.count('Crossroads_02[door1]', player) or state.count('Crossroads_02[right1]', player))
    fn("Crossroads_02[door1]", lambda state: state.count('Crossroads_02[door1]', player) or state.count('Crossroads_02[left1]', player) or state.count('Crossroads_02[right1]', player))
    fn("Crossroads_02[right1]", lambda state: state.count('Crossroads_02[right1]', player) or state.count('Crossroads_02[left1]', player) or state.count('Crossroads_02[door1]', player))
    fn("Crossroads_03[right1]", lambda state: state.count('Crossroads_03[right1]', player) or state.count('Crossroads_03', player))
    fn("Crossroads_03[right2]", lambda state: state.count('Crossroads_03[right2]', player) or state.count('Crossroads_03', player))
    fn("Crossroads_03[left1]", lambda state: state.count('Crossroads_03[left1]', player) or state.count('Crossroads_03', player))
    fn("Crossroads_03[left2]", lambda state: state.count('Crossroads_03[left2]', player) or state.count('Crossroads_03', player))
    fn("Crossroads_03[bot1]", lambda state: state.count('Crossroads_03[bot1]', player) or state.count('Crossroads_03', player))
    fn("Crossroads_03[top1]", lambda state: state.count('Crossroads_03[top1]', player) or state.count('Crossroads_03', player))
    fn("Crossroads_04[left1]", lambda state: state.count('Crossroads_04[left1]', player) or state.count('Crossroads_04[door_Mender_House]', player) or state.count('Crossroads_04[door1]', player) or state.count('Crossroads_04[door_charmshop]', player) or state.count('Crossroads_04[right1]', player) or state.count('Crossroads_04[top1]', player))
    fn("Crossroads_04[top1]", lambda state: state.count('Crossroads_04[top1]', player) or state.count('Crossroads_04[door_Mender_House]', player) or state.count('Crossroads_04[door1]', player) or state.count('Crossroads_04[door_charmshop]', player) or state.count('Crossroads_04[right1]', player) or state.count('Crossroads_04[left1]', player))
    fn("Crossroads_04[door_Mender_House]", lambda state: state.count('Crossroads_04[door_Mender_House]', player) or state.count('Crossroads_04[door1]', player) or state.count('Crossroads_04[door_charmshop]', player) or state.count('Crossroads_04[right1]', player) or ((state.count('Crossroads_04[left1]', player) or state.count('Crossroads_04[top1]', player)) and state.count('Defeated_Gruz_Mother', player)))
    fn("Crossroads_04[door1]", lambda state: state.count('Crossroads_04[door1]', player) or state.count('Crossroads_04[door_Mender_House]', player) or state.count('Crossroads_04[door_charmshop]', player) or state.count('Crossroads_04[right1]', player) or ((state.count('Crossroads_04[left1]', player) or state.count('Crossroads_04[top1]', player)) and state.count('Defeated_Gruz_Mother', player)))
    fn("Crossroads_04[door_charmshop]", lambda state: state.count('Crossroads_04[door_charmshop]', player) or state.count('Crossroads_04[right1]', player) or ((state.count('Crossroads_04[door1]', player) or state.count('Crossroads_04[door_Mender_House]', player) or ((state.count('Crossroads_04[left1]', player) or state.count('Crossroads_04[top1]', player)) and state.count('Defeated_Gruz_Mother', player))) and (state.count('RIGHTCLAW', player) or state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True) or state._hk_option(player, 'ShadeSkips') or (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player)))))
    fn("Crossroads_04[right1]", lambda state: state.count('Crossroads_04[right1]', player) or ((state.count('Crossroads_04[door_Mender_House]', player) or state.count('Crossroads_04[door1]', player) or state.count('Crossroads_04[door_charmshop]', player) or ((state.count('Crossroads_04[left1]', player) or state.count('Crossroads_04[top1]', player)) and state.count('Defeated_Gruz_Mother', player))) and (state.count('RIGHTCLAW', player) and state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player)) or (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player)) or ((state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'ComplexSkips') and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and True))))))
    fn("Crossroads_05[left1]", lambda state: state.count('Crossroads_05[left1]', player) or state.count('Crossroads_05[right1]', player))
    fn("Crossroads_05[right1]", lambda state: state.count('Crossroads_05[right1]', player) or state.count('Crossroads_05[left1]', player))
    fn("Crossroads_06[left1]", lambda state: state.count('Crossroads_06[left1]', player) or state.count('Crossroads_06[door1]', player) or state.count('Crossroads_06[right1]', player))
    fn("Crossroads_06[door1]", lambda state: state.count('Crossroads_06[door1]', player) or state.count('Crossroads_06[left1]', player) or state.count('Crossroads_06[right1]', player))
    fn("Crossroads_06[right1]", lambda state: state.count('Crossroads_06[right1]', player) or state.count('Crossroads_06[left1]', player) or state.count('Crossroads_06[door1]', player))
    fn("Crossroads_07[left1]", lambda state: state.count('Crossroads_07[left1]', player) or state.count('Crossroads_07', player))
    fn("Crossroads_07[left2]", lambda state: state.count('Crossroads_07[left2]', player) or state.count('Crossroads_07', player))
    fn("Crossroads_07[left3]", lambda state: state.count('Crossroads_07[left3]', player) or state.count('Crossroads_07', player))
    fn("Crossroads_07[right1]", lambda state: state.count('Crossroads_07[right1]', player) or state.count('Crossroads_07', player))
    fn("Crossroads_07[right2]", lambda state: state.count('Crossroads_07[right2]', player) or state.count('Crossroads_07', player))
    fn("Crossroads_07[bot1]", lambda state: state.count('Crossroads_07[bot1]', player) or state.count('Crossroads_07', player))
    fn("Crossroads_08[left1]", lambda state: state.count('Crossroads_08[left1]', player) or state.count('Crossroads_08', player))
    fn("Crossroads_08[left2]", lambda state: state.count('Crossroads_08[left2]', player) or state.count('Crossroads_08', player))
    fn("Crossroads_08[right1]", lambda state: state.count('Crossroads_08[right1]', player) or state.count('Crossroads_08', player))
    fn("Crossroads_08[right2]", lambda state: state.count('Crossroads_08[right2]', player) or state.count('Crossroads_08', player))
    fn("Crossroads_09[left1]", lambda state: state.count('Crossroads_09[left1]', player) or (state.count('Crossroads_09[right1]', player) and state.count('Defeated_Brooding_Mawlek', player)))
    fn("Crossroads_09[right1]", lambda state: state.count('Crossroads_09[right1]', player) or (state.count('Crossroads_09[left1]', player) and state.count('Defeated_Brooding_Mawlek', player)))
    fn("Crossroads_10[left1]", lambda state: state.count('Crossroads_10[left1]', player) or (state.count('Crossroads_10[right1]', player) and state.count('Defeated_False_Knight', player)))
    fn("Crossroads_10[right1]", lambda state: state.count('Crossroads_10[right1]', player) or (state.count('Crossroads_10[left1]', player) and state.count('Defeated_False_Knight', player)))
    fn("Crossroads_11_alt[left1]", lambda state: state.count('Crossroads_11_alt[left1]', player) or (state.count('Crossroads_11_alt[right1]', player) and ((state.count('FIREBALL', player) or state.count('QUAKE', player) or (state.count('Glowing_Womb', player) and state.count('Can_Bench', player)) or ((state.count('Weaversong', player) and state.count('Can_Bench', player) or ((state.count('Spore_Shroom', player) and state.count('Can_Bench', player)) and state.count('FOCUS', player))) and state._hk_option(player, 'ObscureSkips')) or (state.count('CYCLONE', player) and state._hk_option(player, 'DifficultSkips'))) or ((state.count("Grubberfly's_Elegy", player) and state.count('Can_Bench', player)) and state.count('LEFTSLASH', player)) or (state.count('Dash_Slash', player) and state.count('LEFTDASH', player)) or (((state.count('Mark_of_Pride', player) and state.count('Can_Bench', player)) and state.count('LEFTSLASH', player) or (state.count('LEFTDASH', player) and state.count('LEFTSLASH', player))) and state._hk_option(player, 'DifficultSkips')))))
    fn("Crossroads_11_alt[right1]", lambda state: state.count('Crossroads_11_alt[right1]', player))
    fn("Crossroads_12[left1]", lambda state: state.count('Crossroads_12[left1]', player) or state.count('Crossroads_12[right1]', player))
    fn("Crossroads_12[right1]", lambda state: state.count('Crossroads_12[right1]', player) or state.count('Crossroads_12[left1]', player))
    fn("Crossroads_13[left1]", lambda state: state.count('Crossroads_13[left1]', player) or state.count('Crossroads_13[right1]', player))
    fn("Crossroads_13[right1]", lambda state: state.count('Crossroads_13[right1]', player) or state.count('Crossroads_13[left1]', player))
    fn("Crossroads_14[left1]", lambda state: state.count('Crossroads_14[left1]', player) or state.count('Crossroads_14', player))
    fn("Crossroads_14[left2]", lambda state: state.count('Crossroads_14[left2]', player) or state.count('Crossroads_14', player))
    fn("Crossroads_14[right1]", lambda state: state.count('Crossroads_14[right1]', player) or state.count('Crossroads_14', player))
    fn("Crossroads_14[right2]", lambda state: state.count('Crossroads_14[right2]', player) or state.count('Crossroads_14', player))
    fn("Crossroads_15[left1]", lambda state: state.count('Crossroads_15[left1]', player) or state.count('Crossroads_15[right1]', player))
    fn("Crossroads_15[right1]", lambda state: state.count('Crossroads_15[right1]', player) or state.count('Crossroads_15[left1]', player))
    fn("Crossroads_16[left1]", lambda state: state.count('Crossroads_16[left1]', player) or state.count('Crossroads_16[right1]', player) or state.count('Crossroads_16[bot1]', player))
    fn("Crossroads_16[right1]", lambda state: state.count('Crossroads_16[right1]', player) or state.count('Crossroads_16[left1]', player) or state.count('Crossroads_16[bot1]', player))
    fn("Crossroads_16[bot1]", lambda state: state.count('Crossroads_16[bot1]', player) or state.count('Crossroads_16[left1]', player) or state.count('Crossroads_16[right1]', player))
    fn("Crossroads_18[right1]", lambda state: state.count('Crossroads_18[right1]', player) or state.count('Crossroads_18', player))
    fn("Crossroads_18[right2]", lambda state: state.count('Crossroads_18[right2]', player) or state.count('Crossroads_18', player))
    fn("Crossroads_18[bot1]", lambda state: state.count('Crossroads_18[bot1]', player) or state.count('Crossroads_18', player))
    fn("Crossroads_19[right1]", lambda state: state.count('Crossroads_19[right1]', player) or state.count('Crossroads_19', player))
    fn("Crossroads_19[top1]", lambda state: state.count('Crossroads_19[top1]', player) or state.count('Crossroads_19', player))
    fn("Crossroads_19[left1]", lambda state: state.count('Crossroads_19[left1]', player) or state.count('Crossroads_19', player))
    fn("Crossroads_19[left2]", lambda state: state.count('Crossroads_19[left2]', player) or state.count('Crossroads_19', player))
    fn("Crossroads_21[left1]", lambda state: state.count('Crossroads_21[left1]', player) or state.count('Crossroads_21', player))
    fn("Crossroads_21[right1]", lambda state: state.count('Crossroads_21[right1]', player) or state.count('Crossroads_21', player))
    fn("Crossroads_21[top1]", lambda state: state.count('Crossroads_21[top1]', player) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player))) or (state.count('Crossroads_21', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player))) and (state.count('LEFTSUPERDASH', player) or (state._hk_option(player, 'SpikeTunnels') and state.count('LEFTDASH', player) and (state.count('Dashmaster', player) and state.count('Can_Bench', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))))))))
    fn("Crossroads_22[bot1]", lambda state: state.count('Crossroads_22[bot1]', player))
    fn("Crossroads_25[right1]", lambda state: state.count('Crossroads_25[right1]', player) or state.count('Crossroads_25[left1]', player))
    fn("Crossroads_25[left1]", lambda state: state.count('Crossroads_25[left1]', player) or state.count('Crossroads_25[right1]', player))
    fn("Crossroads_27[right1]", lambda state: state.count('Crossroads_27[right1]', player) or state.count('Crossroads_27', player))
    fn("Crossroads_27[bot1]", lambda state: state.count('Crossroads_27[bot1]', player) or state.count('Crossroads_27', player))
    fn("Crossroads_27[left1]", lambda state: state.count('Crossroads_27[left1]', player) or state.count('Crossroads_27', player))
    fn("Crossroads_27[left2]", lambda state: state.count('Crossroads_27[left2]', player) or state.count('Crossroads_27', player))
    fn("Crossroads_30[left1]", lambda state: state.count('Crossroads_30[left1]', player))
    fn("Crossroads_31[right1]", lambda state: state.count('Crossroads_31[right1]', player))
    fn("Crossroads_33[top1]", lambda state: state.count('Crossroads_33[top1]', player) or state.count('Crossroads_33', player))
    fn("Crossroads_33[left1]", lambda state: state.count('Crossroads_33[left1]', player) or (state.count('Crossroads_33', player) and state.count('Opened_Mawlek_Wall', player)))
    fn("Crossroads_33[left2]", lambda state: state.count('Crossroads_33[left2]', player) or state.count('Crossroads_33', player))
    fn("Crossroads_33[right1]", lambda state: state.count('Crossroads_33[right1]', player) or (state.count('Crossroads_33', player) and state.count('Opened_Shaman_Pillar', player)))
    fn("Crossroads_33[right2]", lambda state: state.count('Crossroads_33[right2]', player) or state.count('Crossroads_33', player))
    fn("Crossroads_35[bot1]", lambda state: state.count('Crossroads_35[bot1]', player) or (state.count('Crossroads_35[right1]', player) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) and (state.count('WINGS', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state.count('RIGHTDASH', player))) and state._hk_option(player, 'AcidSkips')))))
    fn("Crossroads_35[right1]", lambda state: state.count('Crossroads_35[right1]', player) or (state.count('Crossroads_35[bot1]', player) and state.count('RIGHTCLAW', player) and (state.count('ACID', player) or ((state.count('LEFTSUPERDASH', player) and state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTDASH', player))) and state._hk_option(player, 'AcidSkips')))))
    fn("Crossroads_36[right1]", lambda state: state.count('Crossroads_36[right1]', player) or state.count('Crossroads_36[right2]', player))
    fn("Crossroads_36[right2]", lambda state: state.count('Crossroads_36[right2]', player) or state.count('Crossroads_36[right1]', player))
    fn("Crossroads_37[right1]", lambda state: state.count('Crossroads_37[right1]', player))
    fn("Crossroads_38[right1]", lambda state: state.count('Crossroads_38[right1]', player))
    fn("Crossroads_39[right1]", lambda state: state.count('Crossroads_39[right1]', player) or state.count('Crossroads_39[left1]', player))
    fn("Crossroads_39[left1]", lambda state: state.count('Crossroads_39[left1]', player) or state.count('Crossroads_39[right1]', player))
    fn("Crossroads_40[right1]", lambda state: state.count('Crossroads_40[right1]', player) or state.count('Crossroads_40[left1]', player))
    fn("Crossroads_40[left1]", lambda state: state.count('Crossroads_40[left1]', player) or state.count('Crossroads_40[right1]', player))
    fn("Crossroads_42[left1]", lambda state: state.count('Crossroads_42[left1]', player) or state.count('Crossroads_42[right1]', player))
    fn("Crossroads_42[right1]", lambda state: state.count('Crossroads_42[right1]', player) or state.count('Crossroads_42[left1]', player))
    fn("Crossroads_43[left1]", lambda state: state.count('Crossroads_43[left1]', player) or state.count('Crossroads_43[right1]', player))
    fn("Crossroads_43[right1]", lambda state: state.count('Crossroads_43[right1]', player) or state.count('Crossroads_43[left1]', player))
    fn("Crossroads_45[right1]", lambda state: state.count('Crossroads_45[right1]', player) or state.count('Crossroads_45[left1]', player))
    fn("Crossroads_45[left1]", lambda state: state.count('Crossroads_45[left1]', player) or state.count('Crossroads_45[right1]', player))
    fn("Crossroads_46[left1]", lambda state: state.count('Crossroads_46[left1]', player) or state.count('Upper_Tram', player))
    fn("Crossroads_46b[right1]", lambda state: state.count('Crossroads_46b[right1]', player) or state.count('Upper_Tram', player))
    fn("Crossroads_ShamanTemple[left1]", lambda state: state.count('Crossroads_ShamanTemple[left1]', player))
    fn("Crossroads_47[right1]", lambda state: state.count('Crossroads_47[right1]', player) or (state.count('Can_Stag', player) and state.count('Crossroads_Stag', player)))
    fn("Crossroads_48[left1]", lambda state: state.count('Crossroads_48[left1]', player))
    fn("Crossroads_49[right1]", lambda state: state.count('Crossroads_49[right1]', player) or state.count('Left_Elevator', player))
    fn("Crossroads_49[left1]", lambda state: state.count('Crossroads_49[left1]', player) or state.count('Left_Elevator', player))
    fn("Crossroads_49b[right1]", lambda state: state.count('Crossroads_49b[right1]', player) or state.count('Left_Elevator', player))
    fn("Crossroads_50[right1]", lambda state: state.count('Crossroads_50[right1]', player) or (state.count('Crossroads_50[left1]', player) and (state.count('RIGHTSUPERDASH', player) or state.count('SWIM', player))))
    fn("Crossroads_50[left1]", lambda state: state.count('Crossroads_50[left1]', player) or (state.count('Crossroads_50[right1]', player) and (state.count('LEFTSUPERDASH', player) or state.count('SWIM', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Crossroads_52[left1]", lambda state: state.count('Crossroads_52[left1]', player))
    fn("Room_ruinhouse[left1]", lambda state: state.count('Room_ruinhouse[left1]', player))
    fn("Room_Charm_Shop[left1]", lambda state: state.count('Room_Charm_Shop[left1]', player))
    fn("Room_Mender_House[left1]", lambda state: state.count('Room_Mender_House[left1]', player))
    fn("Fungus1_01[left1]", lambda state: state.count('Fungus1_01[left1]', player) or state.count('Fungus1_01[right1]', player))
    fn("Fungus1_01[right1]", lambda state: state.count('Fungus1_01[right1]', player) or state.count('Fungus1_01[left1]', player))
    fn("Fungus1_01b[left1]", lambda state: state.count('Fungus1_01b[left1]', player) or state.count('Fungus1_01b[right1]', player))
    fn("Fungus1_01b[right1]", lambda state: state.count('Fungus1_01b[right1]', player) or state.count('Fungus1_01b[left1]', player))
    fn("Fungus1_02[left1]", lambda state: state.count('Fungus1_02[left1]', player) or ((state.count('Fungus1_02[right1]', player) or state.count('Fungus1_02[right2]', player)) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Fungus1_02[right1]", lambda state: state.count('Fungus1_02[right1]', player) or state.count('Fungus1_02[left1]', player) or state.count('Fungus1_02[right2]', player))
    fn("Fungus1_02[right2]", lambda state: state.count('Fungus1_02[right2]', player) or state.count('Fungus1_02[left1]', player) or state.count('Fungus1_02[right1]', player))
    fn("Fungus1_03[left1]", lambda state: state.count('Fungus1_03[left1]', player) or state.count('Fungus1_03[right1]', player) or state.count('Fungus1_03[bot1]', player))
    fn("Fungus1_03[right1]", lambda state: state.count('Fungus1_03[right1]', player) or state.count('Fungus1_03[left1]', player) or state.count('Fungus1_03[bot1]', player))
    fn("Fungus1_03[bot1]", lambda state: state.count('Fungus1_03[bot1]', player) or state.count('Fungus1_03[left1]', player) or state.count('Fungus1_03[right1]', player))
    fn("Fungus1_04[left1]", lambda state: state.count('Fungus1_04[left1]', player) or (state.count('Fungus1_04[right1]', player) and state.count('Defeated_Hornet_1', player) and ((state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player)) or state.count('WINGS', player) or state.count('ACID', player))))
    fn("Fungus1_04[right1]", lambda state: state.count('Fungus1_04[right1]', player) or (state.count('Fungus1_04[left1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('ACID', player) and state.count('RIGHTCLAW', player)) or ((state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player))) or (state.count('RIGHTDASH', player) and state.count('LEFTCLAW', player) and state._hk_option(player, 'PreciseMovement')))))
    fn("Fungus1_05[right1]", lambda state: state.count('Fungus1_05[right1]', player) or state.count('Fungus1_05[bot1]', player) or state.count('Fungus1_05[top1]', player))
    fn("Fungus1_05[bot1]", lambda state: state.count('Fungus1_05[bot1]', player) or state.count('Fungus1_05[right1]', player) or state.count('Fungus1_05[top1]', player))
    fn("Fungus1_05[top1]", lambda state: state.count('Fungus1_05[top1]', player) or state.count('Fungus1_05[right1]', player) or state.count('Fungus1_05[bot1]', player))
    fn("Fungus1_06[left1]", lambda state: state.count('Fungus1_06[left1]', player) or state.count('Fungus1_06[bot1]', player))
    fn("Fungus1_06[bot1]", lambda state: state.count('Fungus1_06[bot1]', player) or state.count('Fungus1_06[left1]', player))
    fn("Fungus1_07[top1]", lambda state: state.count('Fungus1_07[top1]', player) or state.count('Fungus1_07[left1]', player) or state.count('Fungus1_07[right1]', player))
    fn("Fungus1_07[left1]", lambda state: state.count('Fungus1_07[left1]', player) or state.count('Fungus1_07[top1]', player) or state.count('Fungus1_07[right1]', player))
    fn("Fungus1_07[right1]", lambda state: state.count('Fungus1_07[right1]', player) or state.count('Fungus1_07[top1]', player) or state.count('Fungus1_07[left1]', player))
    fn("Fungus1_08[left1]", lambda state: state.count('Fungus1_08[left1]', player))
    fn("Fungus1_09[left1]", lambda state: state.count('Fungus1_09[left1]', player) or (state.count('Fungus1_09[right1]', player) and (state.count('LEFTCLAW', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player)) or (state.count('WINGS', player) and state.count('LEFTDASH', player))) or (state.count('RIGHTCLAW', player) and state.count('LEFTDASH', player) and state.count('WINGS', player) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'DangerousSkips') and state._hk_option(player, 'PreciseMovement')))))
    fn("Fungus1_09[right1]", lambda state: state.count('Fungus1_09[right1]', player) or (state.count('Fungus1_09[left1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('Great_Slash', player) or state.count('Cyclone_Slash', player) or (state.count('RIGHTDASH', player) and state.count('Dash_Slash', player)))))
    fn("Fungus1_10[left1]", lambda state: state.count('Fungus1_10[left1]', player) or state.count('Fungus1_10[right1]', player) or state.count('Fungus1_10[top1]', player))
    fn("Fungus1_10[right1]", lambda state: state.count('Fungus1_10[right1]', player) or state.count('Fungus1_10[left1]', player) or state.count('Fungus1_10[top1]', player))
    fn("Fungus1_10[top1]", lambda state: state.count('Fungus1_10[top1]', player) or state.count('Fungus1_10[left1]', player) or state.count('Fungus1_10[right1]', player))
    fn("Fungus1_11[top1]", lambda state: state.count('Fungus1_11[top1]', player) or state.count('Fungus1_11', player))
    fn("Fungus1_11[right1]", lambda state: state.count('Fungus1_11[right1]', player) or state.count('Fungus1_11', player))
    fn("Fungus1_11[right2]", lambda state: state.count('Fungus1_11[right2]', player) or state.count('Fungus1_11', player))
    fn("Fungus1_11[left1]", lambda state: state.count('Fungus1_11[left1]', player) or (state.count('Fungus1_11', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('LEFTSUPERDASH', player) or state.count('LEFTDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True) or (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))))))
    fn("Fungus1_11[bot1]", lambda state: state.count('Fungus1_11[bot1]', player) or state.count('Fungus1_11', player))
    fn("Fungus1_12[left1]", lambda state: state.count('Fungus1_12[left1]', player) or state.count('Fungus1_12[right1]', player))
    fn("Fungus1_12[right1]", lambda state: state.count('Fungus1_12[right1]', player) or state.count('Fungus1_12[left1]', player))
    fn("Fungus1_13[right1]", lambda state: state.count('Fungus1_13[right1]', player))
    fn("Fungus1_13[left1]", lambda state: state.count('Fungus1_13[left1]', player))
    fn("Fungus1_14[left1]", lambda state: state.count('Fungus1_14[left1]', player))
    fn("Fungus1_15[door1]", lambda state: state.count('Fungus1_15[door1]', player) or (state.count('Fungus1_15[right1]', player) and (state.count('RIGHTSUPERDASH', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player)))))
    fn("Fungus1_15[right1]", lambda state: state.count('Fungus1_15[right1]', player) or state.count('Fungus1_15[door1]', player))
    fn("Fungus1_16_alt[right1]", lambda state: state.count('Fungus1_16_alt[right1]', player) or (state.count('Can_Stag', player) and state.count('Greenpath_Stag', player)))
    fn("Fungus1_17[left1]", lambda state: state.count('Fungus1_17[left1]', player) or state.count('Fungus1_17[right1]', player))
    fn("Fungus1_17[right1]", lambda state: state.count('Fungus1_17[right1]', player) or state.count('Fungus1_17[left1]', player))
    fn("Fungus1_19[left1]", lambda state: state.count('Fungus1_19[left1]', player) or state.count('Fungus1_19[right1]', player) or state.count('Fungus1_19[bot1]', player))
    fn("Fungus1_19[right1]", lambda state: state.count('Fungus1_19[right1]', player) or state.count('Fungus1_19[left1]', player) or state.count('Fungus1_19[bot1]', player))
    fn("Fungus1_19[bot1]", lambda state: state.count('Fungus1_19[bot1]', player) or state.count('Fungus1_19[left1]', player) or state.count('Fungus1_19[right1]', player))
    fn("Fungus1_20_v02[bot1]", lambda state: state.count('Fungus1_20_v02[bot1]', player) or state.count('Fungus1_20_v02[bot2]', player) or state.count('Fungus1_20_v02[right1]', player))
    fn("Fungus1_20_v02[bot2]", lambda state: state.count('Fungus1_20_v02[bot2]', player) or state.count('Fungus1_20_v02[bot1]', player) or state.count('Fungus1_20_v02[right1]', player))
    fn("Fungus1_20_v02[right1]", lambda state: state.count('Fungus1_20_v02[right1]', player) or state.count('Fungus1_20_v02[bot1]', player) or state.count('Fungus1_20_v02[bot2]', player))
    fn("Fungus1_21[bot1]", lambda state: state.count('Fungus1_21[bot1]', player) or state.count('Fungus1_21', player))
    fn("Fungus1_21[top1]", lambda state: state.count('Fungus1_21[top1]', player) or state.count('Fungus1_21', player))
    fn("Fungus1_21[left1]", lambda state: state.count('Fungus1_21[left1]', player) or state.count('Fungus1_21', player))
    fn("Fungus1_21[right1]", lambda state: state.count('Fungus1_21[right1]', player) or state.count('Fungus1_21', player))
    fn("Fungus1_22[bot1]", lambda state: state.count('Fungus1_22[bot1]', player) or state.count('Fungus1_22[top1]', player) or state.count('Fungus1_22[left1]', player))
    fn("Fungus1_22[top1]", lambda state: state.count('Fungus1_22[top1]', player) or state.count('Fungus1_22[left1]', player))
    fn("Fungus1_22[left1]", lambda state: state.count('Fungus1_22[left1]', player) or state.count('Fungus1_22[top1]', player))
    fn("Fungus1_23[left1]", lambda state: state.count('Fungus1_23[left1]', player) or state.count('Fungus1_23[right1]', player))
    fn("Fungus1_23[right1]", lambda state: state.count('Fungus1_23[right1]', player) or state.count('Fungus1_23[left1]', player))
    fn("Fungus1_24[left1]", lambda state: state.count('Fungus1_24[left1]', player))
    fn("Fungus1_25[right1]", lambda state: state.count('Fungus1_25[right1]', player) or state.count('Fungus1_25[left1]', player))
    fn("Fungus1_25[left1]", lambda state: state.count('Fungus1_25[left1]', player) or state.count('Fungus1_25[right1]', player))
    fn("Fungus1_26[right1]", lambda state: state.count('Fungus1_26[right1]', player) or (state.count('Fungus1_26[left1]', player) and (state.count('ACID', player) or (state._hk_option(player, 'AcidSkips') and state.count('LEFTCLAW', player) and state.count('WINGS', player) and state.count('RIGHTSUPERDASH', player)))) or state.count('Fungus1_26[door_SlugShrine]', player))
    fn("Fungus1_26[left1]", lambda state: state.count('Fungus1_26[left1]', player) or ((state.count('Fungus1_26[right1]', player) or state.count('Fungus1_26[door_SlugShrine]', player)) and (state.count('ACID', player) or (state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'AcidSkips') and state.count('WINGS', player) and state.count('LEFTSUPERDASH', player) and state.count('LEFTDASH', player) and (state.count('FIREBALL', player) and state._hk_option(player, 'FireballSkips') or ((state.count('Sharp_Shadow', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player)) and state.count('Can_Bench', player)) and True)))) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Fungus1_26[door_SlugShrine]", lambda state: state.count('Fungus1_26[door_SlugShrine]', player) or (state.count('Fungus1_26[left1]', player) and (state.count('ACID', player) or (state._hk_option(player, 'AcidSkips') and state.count('LEFTCLAW', player) and state.count('WINGS', player) and state.count('RIGHTSUPERDASH', player)))) or state.count('Fungus1_26[right1]', player))
    fn("Fungus1_28[left1]", lambda state: state.count('Fungus1_28[left1]', player) or (state.count('Fungus1_28[left2]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) and ((state.count('FIREBALL', player) or state.count('QUAKE', player) or (state.count('Glowing_Womb', player) and state.count('Can_Bench', player)) or ((state.count('Weaversong', player) and state.count('Can_Bench', player) or ((state.count('Spore_Shroom', player) and state.count('Can_Bench', player)) and state.count('FOCUS', player))) and state._hk_option(player, 'ObscureSkips')) or (state.count('CYCLONE', player) and state._hk_option(player, 'DifficultSkips'))) or ((state.count("Grubberfly's_Elegy", player) and state.count('Can_Bench', player)) and state.count('RIGHTSLASH', player)) or (state.count('Dash_Slash', player) and state.count('RIGHTDASH', player)) or (((state.count('Mark_of_Pride', player) and state.count('Can_Bench', player)) and state.count('RIGHTSLASH', player) or (state.count('RIGHTDASH', player) and state.count('RIGHTSLASH', player))) and state._hk_option(player, 'DifficultSkips'))) or (state.count('WINGS', player) and state.count('LEFTCLAW', player)) or (state.count('WINGS', player) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True)) and (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) and state._hk_option(player, 'DifficultSkips') and (state.count('MASKSHARDS', player) > 15)))))
    fn("Fungus1_28[left2]", lambda state: state.count('Fungus1_28[left2]', player) or state.count('Fungus1_28[left1]', player))
    fn("Fungus1_29[left1]", lambda state: state.count('Fungus1_29[left1]', player) or state.count('Fungus1_29[right1]', player))
    fn("Fungus1_29[right1]", lambda state: state.count('Fungus1_29[right1]', player) or state.count('Fungus1_29[left1]', player))
    fn("Fungus1_30[top1]", lambda state: state.count('Fungus1_30[top1]', player) or state.count('Fungus1_30', player))
    fn("Fungus1_30[top3]", lambda state: state.count('Fungus1_30[top3]', player) or state.count('Fungus1_30', player))
    fn("Fungus1_30[left1]", lambda state: state.count('Fungus1_30[left1]', player) or state.count('Fungus1_30', player))
    fn("Fungus1_30[right1]", lambda state: state.count('Fungus1_30[right1]', player) or state.count('Fungus1_30', player))
    fn("Fungus1_31[top1]", lambda state: state.count('Fungus1_31[top1]', player) or state.count('Fungus1_31[bot1]', player) or state.count('Fungus1_31[right1]', player))
    fn("Fungus1_31[bot1]", lambda state: state.count('Fungus1_31[bot1]', player) or state.count('Fungus1_31[top1]', player) or state.count('Fungus1_31[right1]', player))
    fn("Fungus1_31[right1]", lambda state: state.count('Fungus1_31[right1]', player) or state.count('Fungus1_31[top1]', player) or state.count('Fungus1_31[bot1]', player))
    fn("Fungus1_32[bot1]", lambda state: state.count('Fungus1_32[bot1]', player) or state.count('Fungus1_32[top1]', player) or state.count('Fungus1_32[left1]', player))
    fn("Fungus1_32[top1]", lambda state: state.count('Fungus1_32[top1]', player) or state.count('Fungus1_32[bot1]', player) or state.count('Fungus1_32[left1]', player))
    fn("Fungus1_32[left1]", lambda state: state.count('Fungus1_32[left1]', player) or state.count('Fungus1_32[bot1]', player) or state.count('Fungus1_32[top1]', player))
    fn("Fungus1_34[door1]", lambda state: state.count('Fungus1_34[door1]', player) or state.count('Fungus1_34[left1]', player))
    fn("Fungus1_34[left1]", lambda state: state.count('Fungus1_34[left1]', player) or state.count('Fungus1_34[door1]', player))
    fn("Fungus1_35[left1]", lambda state: state.count('Fungus1_35[left1]', player) or (state.count('Fungus1_35[right1]', player) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms'))))
    fn("Fungus1_35[right1]", lambda state: state.count('Fungus1_35[right1]', player) or (state.count('Fungus1_35[left1]', player) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms'))))
    fn("Fungus1_36[left1]", lambda state: state.count('Fungus1_36[left1]', player))
    fn("Fungus1_37[left1]", lambda state: state.count('Fungus1_37[left1]', player))
    fn("Fungus1_Slug[right1]", lambda state: state.count('Fungus1_Slug[right1]', player))
    fn("Room_Slug_Shrine[left1]", lambda state: state.count('Room_Slug_Shrine[left1]', player))
    fn("Room_nailmaster_02[left1]", lambda state: state.count('Room_nailmaster_02[left1]', player))
    fn("Fungus3_01[top1]", lambda state: state.count('Fungus3_01[top1]', player) or state.count('Fungus3_01', player))
    fn("Fungus3_01[right1]", lambda state: state.count('Fungus3_01[right1]', player) or state.count('Fungus3_01', player))
    fn("Fungus3_01[left1]", lambda state: state.count('Fungus3_01[left1]', player) or state.count('Fungus3_01', player))
    fn("Fungus3_01[right2]", lambda state: state.count('Fungus3_01[right2]', player) or state.count('Fungus3_01', player))
    fn("Fungus3_02[left1]", lambda state: state.count('Fungus3_02[left1]', player) or state.count('Fungus3_02', player))
    fn("Fungus3_02[left2]", lambda state: state.count('Fungus3_02[left2]', player) or state.count('Fungus3_02', player))
    fn("Fungus3_02[left3]", lambda state: state.count('Fungus3_02[left3]', player) or state.count('Fungus3_02', player))
    fn("Fungus3_02[right1]", lambda state: state.count('Fungus3_02[right1]', player) or (state.count('Fungus3_02', player) and state.count('Opened_Archives_Exit_Wall', player)))
    fn("Fungus3_02[right2]", lambda state: state.count('Fungus3_02[right2]', player) or state.count('Fungus3_02', player))
    fn("Fungus3_03[right1]", lambda state: state.count('Fungus3_03[right1]', player) or (state.count('Fungus3_03[left1]', player) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Fungus3_03[left1]", lambda state: state.count('Fungus3_03[left1]', player) or (state.count('Fungus3_03[right1]', player) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Fungus3_24[right1]", lambda state: state.count('Fungus3_24[right1]', player) or state.count('Fungus3_24[left1]', player) or state.count('Fungus3_24[top1]', player))
    fn("Fungus3_24[left1]", lambda state: state.count('Fungus3_24[left1]', player) or state.count('Fungus3_24[right1]', player) or state.count('Fungus3_24[top1]', player))
    fn("Fungus3_24[top1]", lambda state: state.count('Fungus3_24[top1]', player) or state.count('Fungus3_24[right1]', player) or state.count('Fungus3_24[left1]', player))
    fn("Fungus3_25[right1]", lambda state: state.count('Fungus3_25[right1]', player) or (state.count('Fungus3_25[left1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player))))
    fn("Fungus3_25[left1]", lambda state: state.count('Fungus3_25[left1]', player) or (state.count('Fungus3_25[right1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player))))
    fn("Fungus3_25b[right1]", lambda state: state.count('Fungus3_25b[right1]', player) or state.count('Fungus3_25b[left1]', player))
    fn("Fungus3_25b[left1]", lambda state: state.count('Fungus3_25b[left1]', player) or state.count('Fungus3_25b[right1]', player))
    fn("Fungus3_26[top1]", lambda state: state.count('Fungus3_26[top1]', player) or (state.count('Fungus3_26', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or (state.count('RIGHTDASH', player) and (state.count('LEFTDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True)) and state._hk_option(player, 'EnemyPogos')))))
    fn("Fungus3_26[left1]", lambda state: state.count('Fungus3_26[left1]', player) or state.count('Fungus3_26', player))
    fn("Fungus3_26[left2]", lambda state: state.count('Fungus3_26[left2]', player) or state.count('Fungus3_26', player))
    fn("Fungus3_26[left3]", lambda state: state.count('Fungus3_26[left3]', player) or state.count('Fungus3_26', player))
    fn("Fungus3_26[right1]", lambda state: state.count('Fungus3_26[right1]', player) or state.count('Fungus3_26', player))
    fn("Fungus3_27[left1]", lambda state: state.count('Fungus3_27[left1]', player) or state.count('Fungus3_27[right1]', player))
    fn("Fungus3_27[right1]", lambda state: state.count('Fungus3_27[right1]', player) or state.count('Fungus3_27[left1]', player))
    fn("Fungus3_28[right1]", lambda state: state.count('Fungus3_28[right1]', player))
    fn("Fungus3_30[bot1]", lambda state: state.count('Fungus3_30[bot1]', player))
    fn("Fungus3_35[right1]", lambda state: state.count('Fungus3_35[right1]', player))
    fn("Fungus3_44[bot1]", lambda state: state.count('Fungus3_44[bot1]', player) or (state.count('Fungus3_44', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player))))
    fn("Fungus3_44[door1]", lambda state: state.count('Fungus3_44[door1]', player) or (state.count('Fungus3_44', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Fungus3_44[right1]", lambda state: state.count('Fungus3_44[right1]', player) or state.count('Fungus3_44', player))
    fn("Fungus3_47[left1]", lambda state: state.count('Fungus3_47[left1]', player) or state.count('Fungus3_47', player))
    fn("Fungus3_47[right1]", lambda state: state.count('Fungus3_47[right1]', player) or state.count('Fungus3_47', player))
    fn("Fungus3_47[door1]", lambda state: state.count('Fungus3_47[door1]', player) or state.count('Fungus3_47', player))
    fn("Room_Fungus_Shaman[left1]", lambda state: state.count('Room_Fungus_Shaman[left1]', player))
    fn("Fungus3_archive[left1]", lambda state: state.count('Fungus3_archive[left1]', player) or state.count('Fungus3_archive[bot1]', player))
    fn("Fungus3_archive[bot1]", lambda state: state.count('Fungus3_archive[bot1]', player) or state.count('Fungus3_archive[left1]', player))
    fn("Fungus3_archive_02[top1]", lambda state: state.count('Fungus3_archive_02[top1]', player))
    fn("Fungus2_01[left1]", lambda state: state.count('Fungus2_01[left1]', player) or state.count('Fungus2_01', player))
    fn("Fungus2_01[left2]", lambda state: state.count('Fungus2_01[left2]', player) or state.count('Fungus2_01', player))
    fn("Fungus2_01[left3]", lambda state: state.count('Fungus2_01[left3]', player) or state.count('Fungus2_01', player))
    fn("Fungus2_01[right1]", lambda state: state.count('Fungus2_01[right1]', player) or (state.count('Fungus2_01', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True))))
    fn("Fungus2_02[right1]", lambda state: state.count('Fungus2_02[right1]', player) or (state.count('Can_Stag', player) and state.count("Queen's_Station_Stag", player)))
    fn("Fungus2_34[right1]", lambda state: state.count('Fungus2_34[right1]', player))
    fn("Fungus2_03[left1]", lambda state: state.count('Fungus2_03[left1]', player) or state.count('Fungus2_03', player))
    fn("Fungus2_03[bot1]", lambda state: state.count('Fungus2_03[bot1]', player) or state.count('Fungus2_03', player))
    fn("Fungus2_03[right1]", lambda state: state.count('Fungus2_03[right1]', player) or state.count('Fungus2_03', player))
    fn("Fungus2_04[top1]", lambda state: state.count('Fungus2_04[top1]', player) or state.count('Fungus2_04[right1]', player))
    fn("Fungus2_04[right1]", lambda state: state.count('Fungus2_04[right1]', player) or state.count('Fungus2_04[top1]', player))
    fn("Fungus2_04[left1]", lambda state: state.count('Fungus2_04[left1]', player) or state.count('Fungus2_04', player))
    fn("Fungus2_04[right2]", lambda state: state.count('Fungus2_04[right2]', player) or state.count('Fungus2_04', player))
    fn("Fungus2_05[bot1]", lambda state: state.count('Fungus2_05[bot1]', player) or (state.count('Fungus2_05[right1]', player) and state.count('Defeated_Shrumal_Ogre_Arena', player)))
    fn("Fungus2_05[right1]", lambda state: state.count('Fungus2_05[right1]', player) or (state.count('Fungus2_05[bot1]', player) and state.count('Defeated_Shrumal_Ogre_Arena', player)))
    fn("Fungus2_06[top1]", lambda state: state.count('Fungus2_06[top1]', player) or (state.count('Fungus2_06', player) and (state.count('ACID', player) or state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTCLAW', player) or state.count('RIGHTSUPERDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True) or state.count('Fungus2_06[right1]', player))))
    fn("Fungus2_06[left1]", lambda state: state.count('Fungus2_06[left1]', player) or state.count('Fungus2_06', player))
    fn("Fungus2_06[left2]", lambda state: state.count('Fungus2_06[left2]', player) or (state.count('Fungus2_06', player) and state.count('ACID', player)))
    fn("Fungus2_06[right1]", lambda state: state.count('Fungus2_06[right1]', player) or (state.count('Fungus2_06', player) and (state.count('ACID', player) or state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTCLAW', player) or state.count('RIGHTSUPERDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True) or state.count('Fungus2_06[top1]', player))))
    fn("Fungus2_06[right2]", lambda state: state.count('Fungus2_06[right2]', player) or state.count('Fungus2_06', player))
    fn("Fungus2_07[left1]", lambda state: state.count('Fungus2_07[left1]', player) or (state.count('Fungus2_07[right1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('LEFTDASH', player) or state.count('WINGS', player) or state.count('ACID', player))))
    fn("Fungus2_07[right1]", lambda state: state.count('Fungus2_07[right1]', player) or state.count('Fungus2_07[left1]', player))
    fn("Fungus2_08[left1]", lambda state: state.count('Fungus2_08[left1]', player) or state.count('Fungus2_08[left2]', player) or state.count('Fungus2_08[right1]', player))
    fn("Fungus2_08[left2]", lambda state: state.count('Fungus2_08[left2]', player) or state.count('Fungus2_08[left1]', player) or state.count('Fungus2_08[right1]', player))
    fn("Fungus2_08[right1]", lambda state: state.count('Fungus2_08[right1]', player) or state.count('Fungus2_08[left1]', player) or state.count('Fungus2_08[left2]', player))
    fn("Fungus2_09[left1]", lambda state: state.count('Fungus2_09[left1]', player) or state.count('Fungus2_09[right1]', player))
    fn("Fungus2_09[right1]", lambda state: state.count('Fungus2_09[right1]', player) or state.count('Fungus2_09[left1]', player))
    fn("Fungus2_10[right1]", lambda state: state.count('Fungus2_10[right1]', player) or state.count('Fungus2_10[right2]', player) or state.count('Fungus2_10[bot1]', player))
    fn("Fungus2_10[right2]", lambda state: state.count('Fungus2_10[right2]', player) or state.count('Fungus2_10[right1]', player) or state.count('Fungus2_10[bot1]', player))
    fn("Fungus2_10[bot1]", lambda state: state.count('Fungus2_10[bot1]', player) or state.count('Fungus2_10[right1]', player) or state.count('Fungus2_10[right2]', player))
    fn("Fungus2_11[top1]", lambda state: state.count('Fungus2_11[top1]', player) or state.count('Fungus2_11', player))
    fn("Fungus2_11[left1]", lambda state: state.count('Fungus2_11[left1]', player) or state.count('Fungus2_11', player))
    fn("Fungus2_11[left2]", lambda state: state.count('Fungus2_11[left2]', player) or (state.count('Fungus2_11', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and (state._hk_option(player, 'ObscureSkips') or state.count('LEFTDASH', player))) or ((state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) and state.count('MASKSHARDS', player) > 15))))
    fn("Fungus2_11[right1]", lambda state: state.count('Fungus2_11[right1]', player) or state.count('Fungus2_11', player))
    fn("Fungus2_12[left1]", lambda state: state.count('Fungus2_12[left1]', player) or (state.count('Fungus2_12[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Fungus2_12[bot1]", lambda state: state.count('Fungus2_12[bot1]', player) or state.count('Fungus2_12[left1]', player))
    fn("Fungus2_13[top1]", lambda state: state.count('Fungus2_13[top1]', player) or (state.count('Fungus2_13', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Fungus2_13[left2]", lambda state: state.count('Fungus2_13[left2]', player) or state.count('Fungus2_13', player))
    fn("Fungus2_13[left3]", lambda state: state.count('Fungus2_13[left3]', player) or (state.count('Fungus2_13', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('ACID', player) or state._hk_option(player, 'EnemyPogos') or state._hk_option(player, 'PreciseMovement'))))
    fn("Fungus2_14[top1]", lambda state: state.count('Fungus2_14[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))) or (state.count('Fungus2_14', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player)) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Fungus2_14[right1]", lambda state: state.count('Fungus2_14[right1]', player) or (state.count('Fungus2_14', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('ACID', player) or (state.count('RIGHTDASH', player) and state._hk_option(player, 'EnemyPogos')) or state.count('RIGHTSUPERDASH', player) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DifficultSkips')))))
    fn("Fungus2_14[bot3]", lambda state: state.count('Fungus2_14[bot3]', player) or ((state.count('Fungus2_14', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state._hk_option(player, 'EnemyPogos')) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player)) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'EnemyPogos'))) or state.count('Fungus2_14[top1]', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'BackgroundObjectPogos'))))))
    fn("Fungus2_15[top3]", lambda state: state.count('Fungus2_15[top3]', player) or ((state.count('Fungus2_15[right1]', player) or (state.count('Fungus2_15[left1]', player) and state.count('RIGHTCLAW', player))) and (state.count('RIGHTCLAW', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTDASH', player) or state._hk_option(player, 'EnemyPogos')) or state.count('WINGS', player))))
    fn("Fungus2_15[right1]", lambda state: state.count('Fungus2_15[right1]', player) or (state.count('Fungus2_15[top3]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))) or (state.count('Fungus2_15[left1]', player) and state.count('RIGHTCLAW', player)))
    fn("Fungus2_15[left1]", lambda state: state.count('Fungus2_15[left1]', player) or ((state.count('Fungus2_15[top3]', player) or state.count('Fungus2_15[right1]', player)) and state.count('Defeated_Mantis_Lords', player)))
    fn("Fungus2_17[left1]", lambda state: state.count('Fungus2_17[left1]', player) or (state.count('Fungus2_17', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTDASH', player) and state.count('Fungus2_17[right1]', player)))))
    fn("Fungus2_17[right1]", lambda state: state.count('Fungus2_17[right1]', player) or (state.count('Fungus2_17', player) and (state.count('WINGS', player) or state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player))))))
    fn("Fungus2_17[bot1]", lambda state: state.count('Fungus2_17[bot1]', player) or state.count('Fungus2_17', player))
    fn("Fungus2_18[right1]", lambda state: state.count('Fungus2_18[right1]', player))
    fn("Fungus2_18[bot1]", lambda state: state.count('Fungus2_18[bot1]', player) or ((state.count('Fungus2_18[right1]', player) and (state.count('LEFTDASH', player) or state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)) or state._hk_option(player, 'EnemyPogos')) or state.count('Fungus2_18[top1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'ObscureSkips') or (state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))))))))
    fn("Fungus2_18[top1]", lambda state: state.count('Fungus2_18[top1]', player) or (state.count('Fungus2_18[right1]', player) and (state.count('LEFTDASH', player) or state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)) or state._hk_option(player, 'EnemyPogos'))) or (state.count('Fungus2_18[bot1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player))))
    fn("Fungus2_19[top1]", lambda state: state.count('Fungus2_19[top1]', player) or (state.count('Fungus2_19[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player))))
    fn("Fungus2_19[left1]", lambda state: state.count('Fungus2_19[left1]', player) or (state.count('Fungus2_19[top1]', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTDASH', player)))))
    fn("Fungus2_20[right1]", lambda state: state.count('Fungus2_20[right1]', player) or state.count('Fungus2_20', player))
    fn("Fungus2_20[left1]", lambda state: state.count('Fungus2_20[left1]', player) or state.count('Fungus2_20', player))
    fn("Fungus2_21[right1]", lambda state: state.count('Fungus2_21[right1]', player) or (state.count('Fungus2_21[left1]', player) and (state.count('RIGHTCLAW', player) and (state.count('RIGHTDASH', player) or (state.count('WINGS', player) and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True)) or state.count('RIGHTSUPERDASH', player) or state.count('ACID', player)) and state.count('CREST', player)))
    fn("Fungus2_21[left1]", lambda state: state.count('Fungus2_21[left1]', player) or (state.count('Fungus2_21[right1]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player))) and state.count('QUAKE', player)))
    fn("Fungus2_23[right1]", lambda state: state.count('Fungus2_23[right1]', player) or state.count('Fungus2_23', player))
    fn("Fungus2_23[right2]", lambda state: state.count('Fungus2_23[right2]', player) or (state.count('Fungus2_23', player) and state.count('Opened_Waterways_Exit', player)))
    fn("Fungus2_26[left1]", lambda state: state.count('Fungus2_26[left1]', player))
    fn("Fungus2_28[left1]", lambda state: state.count('Fungus2_28[left1]', player) or state.count('Fungus2_28[left2]', player))
    fn("Fungus2_28[left2]", lambda state: state.count('Fungus2_28[left2]', player) or state.count('Fungus2_28[left1]', player))
    fn("Fungus2_29[right1]", lambda state: state.count('Fungus2_29[right1]', player) or (state.count('Fungus2_29[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player))))
    fn("Fungus2_29[bot1]", lambda state: state.count('Fungus2_29[bot1]', player) or (state.count('Fungus2_29[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player)))
    fn("Fungus2_30[bot1]", lambda state: state.count('Fungus2_30[bot1]', player) or state.count('Fungus2_30[top1]', player))
    fn("Fungus2_30[top1]", lambda state: state.count('Fungus2_30[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))))
    fn("Fungus2_31[left1]", lambda state: state.count('Fungus2_31[left1]', player))
    fn("Fungus2_32[left1]", lambda state: state.count('Fungus2_32[left1]', player))
    fn("Fungus2_33[right1]", lambda state: state.count('Fungus2_33[right1]', player) or state.count('Fungus2_33[left1]', player))
    fn("Fungus2_33[left1]", lambda state: state.count('Fungus2_33[left1]', player) or state.count('Fungus2_33[right1]', player))
    fn("Deepnest_01[right1]", lambda state: state.count('Deepnest_01[right1]', player) or state.count('Deepnest_01', player))
    fn("Deepnest_01[bot1]", lambda state: state.count('Deepnest_01[bot1]', player))
    fn("Deepnest_01[bot2]", lambda state: state.count('Deepnest_01[bot2]', player) or state.count('Deepnest_01', player))
    fn("Deepnest_01[left1]", lambda state: state.count('Deepnest_01[left1]', player) or state.count('Deepnest_01', player))
    fn("Deepnest_01b[top1]", lambda state: state.count('Deepnest_01b[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips'))) or (state.count('Deepnest_01b', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) or (((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and (state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips')))) or (state.count('Deepnest_01b[right1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips')))))))
    fn("Deepnest_01b[top2]", lambda state: False)
    fn("Deepnest_01b[right1]", lambda state: state.count('Deepnest_01b[right1]', player))
    fn("Deepnest_01b[right2]", lambda state: state.count('Deepnest_01b[right2]', player) or state.count('Deepnest_01b[top1]', player) or state.count('Deepnest_01b[top2]', player) or (state.count('Deepnest_01b', player) and (state.count('WINGS', player) or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player))))
    fn("Deepnest_01b[bot1]", lambda state: state.count('Deepnest_01b[bot1]', player) or state.count('Deepnest_01b', player))
    fn("Deepnest_02[left1]", lambda state: state.count('Deepnest_02[left1]', player) or (state.count('Deepnest_02', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Deepnest_02[left2]", lambda state: state.count('Deepnest_02[left2]', player) or state.count('Deepnest_02', player))
    fn("Deepnest_02[right1]", lambda state: state.count('Deepnest_02[right1]', player) or state.count('Deepnest_02[left1]', player) or (state.count('Deepnest_02', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos') or state._hk_option(player, 'BackgroundObjectPogos'))))
    fn("Deepnest_03[right1]", lambda state: state.count('Deepnest_03[right1]', player) or state.count('Deepnest_03', player))
    fn("Deepnest_03[left1]", lambda state: state.count('Deepnest_03[left1]', player) or (state.count('Deepnest_03', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('Deepnest_03[top1]', player) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'ObscureSkips')))))
    fn("Deepnest_03[top1]", lambda state: state.count('Deepnest_03[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Deepnest_03', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('Deepnest_03[left1]', player)) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'ObscureSkips')) or (state.count('LEFTCLAW', player) and (state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips')))))))
    fn("Deepnest_03[left2]", lambda state: state.count('Deepnest_03[left2]', player) or (state.count('Deepnest_03', player) and (state.count('LEFTSUPERDASH', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips')))))))
    fn("Deepnest_09[left1]", lambda state: state.count('Deepnest_09[left1]', player) or (state.count('Can_Stag', player) and state.count('Distant_Village_Stag', player)))
    fn("Deepnest_10[right1]", lambda state: state.count('Deepnest_10[right1]', player) or (state.count('Deepnest_10', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('Deepnest_10[door1]', player) and (state.count('RIGHTCLAW', player) or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player))))))
    fn("Deepnest_10[right2]", lambda state: state.count('Deepnest_10[right2]', player) or state.count('Deepnest_10', player))
    fn("Deepnest_10[right3]", lambda state: state.count('Deepnest_10[right3]', player) or state.count('Deepnest_10', player))
    fn("Deepnest_10[door1]", lambda state: state.count('Deepnest_10[door1]', player) or (state.count('Deepnest_10', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('Deepnest_10[right1]', player))))
    fn("Deepnest_10[door2]", lambda state: state.count('Deepnest_10[door2]', player) or (state.count('Deepnest_10', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('Deepnest_10[door1]', player) or state.count('Deepnest_10[right1]', player))))
    fn("Room_spider_small[left1]", lambda state: state.count('Room_spider_small[left1]', player))
    fn("Deepnest_Spider_Town[left1]", lambda state: state.count('Deepnest_Spider_Town[left1]', player))
    fn("Deepnest_14[right1]", lambda state: state.count('Deepnest_14[right1]', player) or (state.count('Deepnest_14', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player)) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or state.count('Deepnest_14[left1]', player))))
    fn("Deepnest_14[left1]", lambda state: state.count('Deepnest_14[left1]', player) or (state.count('Deepnest_14', player) and (state.count('WINGS', player) or ((state.count('RIGHTCLAW', player) or state.count('RIGHTDASH', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player))) and (state.count('LEFTCLAW', player) or state.count('LEFTDASH', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)))))))
    fn("Deepnest_14[bot1]", lambda state: state.count('Deepnest_14[bot1]', player) or state.count('Deepnest_14', player))
    fn("Deepnest_14[bot2]", lambda state: state.count('Deepnest_14[bot2]', player) or state.count('Deepnest_14', player))
    fn("Deepnest_16[left1]", lambda state: state.count('Deepnest_16[left1]', player) or (state.count('Deepnest_16[bot1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player)))))
    fn("Deepnest_16[bot1]", lambda state: state.count('Deepnest_16[bot1]', player))
    fn("Deepnest_17[left1]", lambda state: state.count('Deepnest_17[left1]', player) or state.count('Deepnest_17', player))
    fn("Deepnest_17[right1]", lambda state: state.count('Deepnest_17[right1]', player) or state.count('Deepnest_17', player))
    fn("Deepnest_17[top1]", lambda state: state.count('Deepnest_17[top1]', player) or state.count('Deepnest_17', player))
    fn("Deepnest_17[bot1]", lambda state: state.count('Deepnest_17[bot1]', player) or state.count('Deepnest_17', player))
    fn("Fungus2_25[top1]", lambda state: state.count('Fungus2_25[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or ((state.count('Fungus2_25[top2]', player) or state.count('Fungus2_25[right1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Fungus2_25[top2]", lambda state: False)
    fn("Fungus2_25[right1]", lambda state: state.count('Fungus2_25[right1]', player) or ((state.count('Fungus2_25[top1]', player) or state.count('Fungus2_25[top2]', player)) and state.count('Defeated_Mantis_Lords', player)))
    fn("Deepnest_26[left1]", lambda state: state.count('Deepnest_26[left1]', player) or (state.count('Deepnest_26', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos'))) and state.count('Opened_Tramway_Exit_Gate', player)))
    fn("Deepnest_26[left2]", lambda state: state.count('Deepnest_26[left2]', player) or (state.count('Deepnest_26', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Deepnest_26[right1]", lambda state: state.count('Deepnest_26[right1]', player) or state.count('Deepnest_26', player))
    fn("Deepnest_26[bot1]", lambda state: state.count('Deepnest_26[bot1]', player) or state.count('Deepnest_26', player))
    fn("Deepnest_26b[right2]", lambda state: state.count('Deepnest_26b[right2]', player))
    fn("Deepnest_26b[right1]", lambda state: state.count('Deepnest_26b[right1]', player) or (state.count('Deepnest_26b[right2]', player) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state._hk_option(player, 'EnemyPogos'))))))
    fn("Deepnest_30[left1]", lambda state: state.count('Deepnest_30[left1]', player) or state.count('Deepnest_30[right1]', player) or (state.count('Deepnest_30[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_30[top1]", lambda state: state.count('Deepnest_30[top1]', player))
    fn("Deepnest_30[right1]", lambda state: state.count('Deepnest_30[right1]', player) or state.count('Deepnest_30[left1]', player) or (state.count('Deepnest_30[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_31[right1]", lambda state: state.count('Deepnest_31[right1]', player) or (state.count('Deepnest_31[right2]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTDASH', player)))))
    fn("Deepnest_31[right2]", lambda state: state.count('Deepnest_31[right2]', player) or (state.count('Deepnest_31[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Deepnest_32[left1]", lambda state: state.count('Deepnest_32[left1]', player))
    fn("Deepnest_33[top1]", lambda state: state.count('Deepnest_33[top1]', player))
    fn("Deepnest_33[top2]", lambda state: state.count('Deepnest_33[top2]', player) or ((state.count('Deepnest_33[top1]', player) or state.count('Deepnest_33[bot1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_33[bot1]", lambda state: state.count('Deepnest_33[bot1]', player) or state.count('Deepnest_33[top1]', player) or state.count('Deepnest_33[top2]', player))
    fn("Deepnest_34[left1]", lambda state: state.count('Deepnest_34[left1]', player) or (state.count('Deepnest_34', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_34[right1]", lambda state: state.count('Deepnest_34[right1]', player) or (state.count('Deepnest_34', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('RIGHTDASH', player))))
    fn("Deepnest_34[top1]", lambda state: state.count('Deepnest_34[top1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) or (state.count('Deepnest_34', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTDASH', player)))))))
    fn("Deepnest_35[left1]", lambda state: state.count('Deepnest_35[left1]', player) or state.count('Deepnest_35', player))
    fn("Deepnest_35[top1]", lambda state: state.count('Deepnest_35[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Deepnest_35', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Deepnest_35[bot1]", lambda state: state.count('Deepnest_35[bot1]', player) or state.count('Deepnest_35', player))
    fn("Deepnest_36[left1]", lambda state: state.count('Deepnest_36[left1]', player))
    fn("Deepnest_37[left1]", lambda state: state.count('Deepnest_37[left1]', player) or state.count('Deepnest_37', player))
    fn("Deepnest_37[right1]", lambda state: state.count('Deepnest_37[right1]', player) or state.count('Deepnest_37', player))
    fn("Deepnest_37[top1]", lambda state: state.count('Deepnest_37[top1]', player) or state.count('Deepnest_37', player))
    fn("Deepnest_37[bot1]", lambda state: state.count('Deepnest_37[bot1]', player) or state.count('Deepnest_37', player))
    fn("Deepnest_38[bot1]", lambda state: state.count('Deepnest_38[bot1]', player))
    fn("Deepnest_39[left1]", lambda state: state.count('Deepnest_39[left1]', player) or ((state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_39', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')))) or (state.count('Deepnest_39[top1]', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))))))
    fn("Deepnest_39[top1]", lambda state: state.count('Deepnest_39[top1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) or ((state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTCLAW', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True)) or state.count('WINGS', player)) and (state.count('Deepnest_39', player) and (state.count('Deepnest_39[left1]', player) or state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')))))))
    fn("Deepnest_39[door1]", lambda state: state.count('Deepnest_39[door1]', player) or ((state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('RIGHTSUPERDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True)))) and (state.count('Deepnest_39[right1]', player) and (state.count('RIGHTCLAW', player) or ((state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')) and state.count('WINGS', player))) or state.count('Deepnest_39[left1]', player) or state.count('Deepnest_39[top1]', player))))
    fn("Deepnest_39[right1]", lambda state: state.count('Deepnest_39[right1]', player) or ((state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and state.count('Deepnest_39', player)))
    fn("Deepnest_40[right1]", lambda state: state.count('Deepnest_40[right1]', player))
    fn("Deepnest_41[right1]", lambda state: state.count('Deepnest_41[right1]', player) or (state.count('Deepnest_41[left1]', player) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos')))) or (state.count('Deepnest_41[left2]', player) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))))
    fn("Deepnest_41[left1]", lambda state: state.count('Deepnest_41[left1]', player) or (state.count('Deepnest_41[right1]', player) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and (state.count('RIGHTCLAW', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'EnemyPogos')))) or (state.count('Deepnest_41[left2]', player) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))))
    fn("Deepnest_41[left2]", lambda state: state.count('Deepnest_41[left2]', player))
    fn("Deepnest_42[bot1]", lambda state: state.count('Deepnest_42[bot1]', player) or state.count('Deepnest_42', player))
    fn("Deepnest_42[left1]", lambda state: state.count('Deepnest_42[left1]', player) or state.count('Deepnest_42', player))
    fn("Deepnest_42[top1]", lambda state: state.count('Deepnest_42[top1]', player) or (state.count('Deepnest_42', player) and (state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Deepnest_43[bot1]", lambda state: state.count('Deepnest_43[bot1]', player) or ((state.count('Deepnest_43[left1]', player) or state.count('Deepnest_43[right1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_43[left1]", lambda state: state.count('Deepnest_43[left1]', player) or state.count('Deepnest_43[right1]', player) or (state.count('Deepnest_43[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))))
    fn("Deepnest_43[right1]", lambda state: state.count('Deepnest_43[right1]', player) or state.count('Deepnest_43[left1]', player) or (state.count('Deepnest_43[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))))
    fn("Deepnest_44[top1]", lambda state: state.count('Deepnest_44[top1]', player))
    fn("Deepnest_45_v02[left1]", lambda state: state.count('Deepnest_45_v02[left1]', player))
    fn("Room_Mask_Maker[right1]", lambda state: state.count('Room_Mask_Maker[right1]', player))
    fn("Deepnest_East_01[bot1]", lambda state: state.count('Deepnest_East_01[bot1]', player) or state.count('Deepnest_East_01[right1]', player) or state.count('Deepnest_East_01[top1]', player))
    fn("Deepnest_East_01[right1]", lambda state: state.count('Deepnest_East_01[right1]', player))
    fn("Deepnest_East_01[top1]", lambda state: state.count('Deepnest_East_01[top1]', player) or ((state.count('Deepnest_East_01[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or state.count('Deepnest_East_01[right1]', player)) and (state.count('RIGHTDASH', player) or state.count('LEFTCLAW', player) or state.count('WINGS', player))))
    fn("Deepnest_East_02[bot1]", lambda state: state.count('Deepnest_East_02[bot1]', player) or state.count('Deepnest_East_02', player))
    fn("Deepnest_East_02[bot2]", lambda state: state.count('Deepnest_East_02[bot2]', player) or (state.count('Deepnest_East_02', player) and state.count('QUAKE', player) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')) or (state.count('LEFTDASH', player) and state.count('WINGS', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Deepnest_East_02[top1]", lambda state: state.count('Deepnest_East_02[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Deepnest_East_02', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_East_02[right1]", lambda state: state.count('Deepnest_East_02[right1]', player) or state.count('Deepnest_East_02', player))
    fn("Deepnest_East_03[left1]", lambda state: state.count('Deepnest_East_03[left1]', player) or state.count('Deepnest_East_03', player))
    fn("Deepnest_East_03[left2]", lambda state: state.count('Deepnest_East_03[left2]', player) or (state.count('Deepnest_East_03', player) and state.count("Opened_Lower_Kingdom's_Edge_Wall", player)))
    fn("Deepnest_East_03[top1]", lambda state: state.count('Deepnest_East_03[top1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) or (state.count('Deepnest_East_03', player) and (((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or (state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'ObscureSkips'))) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player) and ((True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) and state.count('MASKSHARDS', player) > 15)))))
    fn("Deepnest_East_03[top2]", lambda state: False)
    fn("Deepnest_East_03[right1]", lambda state: state.count('Deepnest_East_03[right1]', player) or (state.count('Deepnest_East_03', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or state.count('Deepnest_East_03[top2]', player))))
    fn("Deepnest_East_03[right2]", lambda state: state.count('Deepnest_East_03[right2]', player) or state.count('Deepnest_East_03', player))
    fn("Deepnest_East_04[left1]", lambda state: state.count('Deepnest_East_04[left1]', player) or (state.count('Deepnest_East_04', player) and state.count('ACID', player)))
    fn("Deepnest_East_04[left2]", lambda state: state.count('Deepnest_East_04[left2]', player) or (state.count('Deepnest_East_04', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos') or state.count('Deepnest_East_04[right2]', player))))
    fn("Deepnest_East_04[right2]", lambda state: state.count('Deepnest_East_04[right2]', player) or (state.count('Deepnest_East_04', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos') or state.count('Deepnest_East_04[left2]', player)) and (state.count('WINGS', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state._hk_option(player, 'EnemyPogos')))))
    fn("Deepnest_East_04[right1]", lambda state: state.count('Deepnest_East_04[right1]', player) or state.count('Deepnest_East_04', player))
    fn("Deepnest_East_06[top1]", lambda state: state.count('Deepnest_East_06[top1]', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))) or (state.count('Deepnest_East_06[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))) or ((state.count('Deepnest_East_06[bot1]', player) or state.count('Deepnest_East_06[door1]', player) or state.count('Deepnest_East_06[right1]', player)) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Deepnest_East_06[left1]", lambda state: state.count('Deepnest_East_06[left1]', player) or state.count('Deepnest_East_06[top1]', player) or ((state.count('Deepnest_East_06[bot1]', player) or state.count('Deepnest_East_06[door1]', player) or state.count('Deepnest_East_06[right1]', player)) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Deepnest_East_06[bot1]", lambda state: state.count('Deepnest_East_06[bot1]', player))
    fn("Deepnest_East_06[door1]", lambda state: state.count('Deepnest_East_06[door1]', player) or state.count('Deepnest_East_06[right1]', player) or (state.count('Deepnest_East_06[left1]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'BackgroundObjectPogos')))) or ((state.count('Deepnest_East_06[top1]', player) or state.count('Deepnest_East_06[bot1]', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips')))))
    fn("Deepnest_East_06[right1]", lambda state: state.count('Deepnest_East_06[right1]', player) or state.count('Deepnest_East_06[door1]', player) or (state.count('Deepnest_East_06[left1]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'BackgroundObjectPogos')))) or ((state.count('Deepnest_East_06[top1]', player) or state.count('Deepnest_East_06[bot1]', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips')))))
    fn("Deepnest_East_07[bot1]", lambda state: state.count('Deepnest_East_07[bot1]', player))
    fn("Deepnest_East_07[bot2]", lambda state: state.count('Deepnest_East_07[bot2]', player) or state.count('Deepnest_East_07', player))
    fn("Deepnest_East_07[left1]", lambda state: state.count('Deepnest_East_07[left1]', player) or (state.count('Deepnest_East_07', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_East_07[left2]", lambda state: state.count('Deepnest_East_07[left2]', player) or state.count('Deepnest_East_07', player))
    fn("Deepnest_East_07[right1]", lambda state: state.count('Deepnest_East_07[right1]', player) or state.count('Deepnest_East_07', player))
    fn("Deepnest_East_08[right1]", lambda state: state.count('Deepnest_East_08[right1]', player) or state.count('Deepnest_East_08[top1]', player))
    fn("Deepnest_East_08[top1]", lambda state: state.count('Deepnest_East_08[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Deepnest_East_08[right1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_East_09[right1]", lambda state: state.count('Deepnest_East_09[right1]', player) or (state.count('Deepnest_East_09[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_East_09[left1]", lambda state: state.count('Deepnest_East_09[left1]', player) or state.count('Deepnest_East_09[right1]', player) or (state.count('Deepnest_East_09[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_East_09[bot1]", lambda state: state.count('Deepnest_East_09[bot1]', player) or state.count('Deepnest_East_09[right1]', player))
    fn("Deepnest_East_10[left1]", lambda state: state.count('Deepnest_East_10[left1]', player))
    fn("Deepnest_East_11[right1]", lambda state: state.count('Deepnest_East_11[right1]', player) or (state.count('Deepnest_East_11[top1]', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('Cyclone_Slash', player) or state.count('Great_Slash', player) or state.count('FIREBALL', player) or state.count('QUAKE', player))) or ((state.count('Deepnest_East_11[left1]', player) or state.count('Deepnest_East_11[bot1]', player)) and (state.count('WINGS', player) or ((state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player))) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips')))))
    fn("Deepnest_East_11[left1]", lambda state: state.count('Deepnest_East_11[left1]', player) or state.count('Deepnest_East_11[top1]', player) or state.count('Deepnest_East_11[right1]', player) or (state.count('Deepnest_East_11[bot1]', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos')) or state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos')) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips')))))
    fn("Deepnest_East_11[top1]", lambda state: state.count('Deepnest_East_11[top1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) or (state.count('Deepnest_East_11[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'BackgroundObjectPogos'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))) or ((state.count('Deepnest_East_11[left1]', player) or state.count('Deepnest_East_11[bot1]', player)) and (state.count('WINGS', player) or ((True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player))) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips'))) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'BackgroundObjectPogos'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))))
    fn("Deepnest_East_11[bot1]", lambda state: state.count('Deepnest_East_11[bot1]', player) or state.count('Deepnest_East_11[left1]', player) or state.count('Deepnest_East_11[top1]', player) or state.count('Deepnest_East_11[right1]', player))
    fn("Deepnest_East_12[right1]", lambda state: state.count('Deepnest_East_12[right1]', player) or state.count('Deepnest_East_12[left1]', player))
    fn("Deepnest_East_12[left1]", lambda state: state.count('Deepnest_East_12[left1]', player) or state.count('Deepnest_East_12[right1]', player))
    fn("Deepnest_East_13[bot1]", lambda state: state.count('Deepnest_East_13[bot1]', player))
    fn("Deepnest_East_14[top2]", lambda state: state.count('Deepnest_East_14[top2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))))
    fn("Deepnest_East_14[left1]", lambda state: state.count('Deepnest_East_14[left1]', player) or ((state.count('Deepnest_East_14[top2]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and state.count('QUAKE', player) or state.count('Deepnest_East_14[door1]', player)) and (state.count('LEFTDASH', player) or state._hk_option(player, 'SpikeTunnels'))))
    fn("Deepnest_East_14[door1]", lambda state: state.count('Deepnest_East_14[door1]', player) or (state.count('Deepnest_East_14[top2]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and state.count('QUAKE', player) and (state.count('RIGHTDASH', player) or state._hk_option(player, 'PreciseMovement'))) or (state.count('Deepnest_East_14[left1]', player) and (state.count('RIGHTDASH', player) or state._hk_option(player, 'SpikeTunnels'))))
    fn("Deepnest_East_14b[right1]", lambda state: state.count('Deepnest_East_14b[right1]', player) or state.count('Deepnest_East_14b[top1]', player))
    fn("Deepnest_East_14b[top1]", lambda state: state.count('Deepnest_East_14b[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) or (state.count('Deepnest_East_14b[right1]', player) and (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips') or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_East_15[left1]", lambda state: state.count('Deepnest_East_15[left1]', player))
    fn("Deepnest_East_16[left1]", lambda state: state.count('Deepnest_East_16[left1]', player) or state.count('Deepnest_East_16[bot1]', player))
    fn("Deepnest_East_16[bot1]", lambda state: state.count('Deepnest_East_16[bot1]', player) or (state.count('Deepnest_East_16[left1]', player) and state.count('QUAKE', player)))
    fn("Deepnest_East_17[left1]", lambda state: state.count('Deepnest_East_17[left1]', player))
    fn("Deepnest_East_18[top1]", lambda state: state.count('Deepnest_East_18[top1]', player) or (state.count('Deepnest_East_18', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Deepnest_East_18[bot1]", lambda state: state.count('Deepnest_East_18[bot1]', player) or state.count('Deepnest_East_18', player))
    fn("Deepnest_East_18[right2]", lambda state: state.count('Deepnest_East_18[right2]', player) or (state.count('Deepnest_East_18', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player))))
    fn("Room_nailmaster_03[left1]", lambda state: state.count('Room_nailmaster_03[left1]', player))
    fn("Deepnest_East_Hornet[left1]", lambda state: state.count('Deepnest_East_Hornet[left1]', player))
    fn("Deepnest_East_Hornet[left2]", lambda state: state.count('Deepnest_East_Hornet[left2]', player) or (state.count('Deepnest_East_Hornet[left1]', player) and state.count('Defeated_Hornet_2', player)))
    fn("Room_Wyrm[right1]", lambda state: state.count('Room_Wyrm[right1]', player))
    fn("GG_Lurker[left1]", lambda state: state.count('GG_Lurker[left1]', player))
    fn("Hive_01[left1]", lambda state: state.count('Hive_01[left1]', player) or state.count('Hive_01[right1]', player))
    fn("Hive_01[right1]", lambda state: state.count('Hive_01[right1]', player) or (state.count('Hive_01[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player))))))))
    fn("Hive_01[right2]", lambda state: state.count('Hive_01[right2]', player))
    fn("Hive_02[left1]", lambda state: state.count('Hive_02[left1]', player) or ((state.count('Hive_02[left2]', player) or state.count('Hive_02[left3]', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTCLAW', player)))))
    fn("Hive_02[left2]", lambda state: state.count('Hive_02[left2]', player) or ((state.count('Hive_02[left1]', player) or state.count('Hive_02[left3]', player)) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos'))) or state.count('WINGS', player))))
    fn("Hive_02[left3]", lambda state: state.count('Hive_02[left3]', player) or state.count('Hive_02[left2]', player) or state.count('Hive_02[left1]', player))
    fn("Hive_03_c[left1]", lambda state: state.count('Hive_03_c[left1]', player) or (state.count('Hive_03_c', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player))))
    fn("Hive_03_c[right2]", lambda state: state.count('Hive_03_c[right2]', player))
    fn("Hive_03_c[right3]", lambda state: state.count('Hive_03_c[right3]', player) or state.count('Hive_03_c', player))
    fn("Hive_03_c[top1]", lambda state: state.count('Hive_03_c[top1]', player) or (state.count('Hive_03_c', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))) or (state.count('Hive_03_c[right2]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))
    fn("Hive_03[bot1]", lambda state: state.count('Hive_03[bot1]', player) or state.count('Hive_03[right1]', player))
    fn("Hive_03[right1]", lambda state: state.count('Hive_03[right1]', player) or (state.count('Hive_03[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos')))))
    fn("Hive_03[top1]", lambda state: state.count('Hive_03[top1]', player))
    fn("Hive_04[left1]", lambda state: state.count('Hive_04[left1]', player) or (state.count('Hive_04[right1]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('LEFTDASH', player) or state.count('WINGS', player))))
    fn("Hive_04[left2]", lambda state: state.count('Hive_04[left2]', player) or state.count('Hive_04[left1]', player) or state.count('Hive_04[right1]', player))
    fn("Hive_04[right1]", lambda state: state.count('Hive_04[right1]', player) or (state.count('Hive_04[left1]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('RIGHTDASH', player) or state._hk_option(player, 'EnemyPogos')) or state.count('WINGS', player))))
    fn("Hive_05[left1]", lambda state: state.count('Hive_05[left1]', player))
    fn("Room_Colosseum_01[left1]", lambda state: state.count('Room_Colosseum_01[left1]', player) or state.count('Room_Colosseum_01[bot1]', player))
    fn("Room_Colosseum_01[bot1]", lambda state: state.count('Room_Colosseum_01[bot1]', player) or state.count('Room_Colosseum_01[left1]', player))
    fn("Room_Colosseum_02[top1]", lambda state: state.count('Room_Colosseum_02[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))) or (state.count('Room_Colosseum_02[top2]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Room_Colosseum_02[top2]", lambda state: state.count('Room_Colosseum_02[top2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))) or (state.count('Room_Colosseum_02[top1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Room_Colosseum_Spectate[bot1]", lambda state: state.count('Room_Colosseum_Spectate[bot1]', player) or state.count('Room_Colosseum_Spectate[right1]', player))
    fn("Room_Colosseum_Spectate[right1]", lambda state: state.count('Room_Colosseum_Spectate[right1]', player) or state.count('Room_Colosseum_Spectate[bot1]', player))
    fn("Abyss_01[left1]", lambda state: state.count('Abyss_01[left1]', player) or (state.count('Abyss_01', player) and state.count('Opened_Dung_Defender_Wall', player) and ((state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) or state.count('LEFTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')) or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))) or state.count('WINGS', player) or state.count('Abyss_01[right1]', player))))
    fn("Abyss_01[left2]", lambda state: state.count('Abyss_01[left2]', player) or (state.count('Abyss_01', player) and (state._hk_option(player, 'SpikeTunnels') and state.count('LEFTDASH', player) and (state.count('Dashmaster', player) and state.count('Can_Bench', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))) or (state._hk_option(player, 'SpikeTunnels') and state.count('RIGHTCLAW', player) and state.count('LEFTDASH', player)))) or (state.count('Abyss_01[right2]', player) and state.count('LEFTSUPERDASH', player)))
    fn("Abyss_01[left3]", lambda state: state.count('Abyss_01[left3]', player) or state.count('Abyss_01', player))
    fn("Abyss_01[right1]", lambda state: state.count('Abyss_01[right1]', player) or (state.count('Abyss_01', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player)) or (state.count('LEFTCLAW', player) and (state.count('WINGS', player) or (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))) or (state.count('Abyss_01[left1]', player) and state.count('LEFTCLAW', player) and (state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Abyss_01[right2]", lambda state: state.count('Abyss_01[right2]', player) or (state.count('Abyss_01', player) and (state._hk_option(player, 'SpikeTunnels') and state.count('RIGHTDASH', player) and (state.count('Dashmaster', player) and state.count('Can_Bench', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))) or (state._hk_option(player, 'SpikeTunnels') and state.count('RIGHTCLAW', player) and state.count('LEFTDASH', player) and state.count('RIGHTSUPERDASH', player)))) or (state.count('Abyss_01[left2]', player) and state.count('RIGHTSUPERDASH', player)))
    fn("Abyss_02[right1]", lambda state: state.count('Abyss_02[right1]', player) or (state.count('Abyss_02[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Abyss_02[bot1]", lambda state: state.count('Abyss_02[bot1]', player) or state.count('Abyss_02[right1]', player))
    fn("Abyss_03[bot1]", lambda state: state.count('Abyss_03[bot1]', player) or state.count('Abyss_03', player) or state.count('Lower_Tram', player))
    fn("Abyss_03[bot2]", lambda state: state.count('Abyss_03[bot2]', player) or state.count('Abyss_03', player) or state.count('Lower_Tram', player))
    fn("Abyss_03[top1]", lambda state: state.count('Abyss_03[top1]', player) or state.count('Abyss_03', player) or state.count('Lower_Tram', player))
    fn("Abyss_03_b[left1]", lambda state: state.count('Abyss_03_b[left1]', player) or state.count('Abyss_03_b', player) or state.count('Lower_Tram', player))
    fn("Abyss_03_c[right1]", lambda state: state.count('Abyss_03_c[right1]', player) or state.count('Abyss_03_c', player) or state.count('Lower_Tram', player))
    fn("Abyss_03_c[top1]", lambda state: state.count('Abyss_03_c[top1]', player) or ((state.count('Abyss_03_c', player) or state.count('Lower_Tram', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Abyss_04[top1]", lambda state: state.count('Abyss_04[top1]', player) or (state.count('Abyss_04', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Abyss_04[left1]", lambda state: state.count('Abyss_04[left1]', player) or state.count('Abyss_04', player))
    fn("Abyss_04[bot1]", lambda state: state.count('Abyss_04[bot1]', player) or state.count('Abyss_04', player))
    fn("Abyss_04[right1]", lambda state: state.count('Abyss_04[right1]', player) or (state.count('Abyss_04', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player)))
    fn("Abyss_05[left1]", lambda state: state.count('Abyss_05[left1]', player) or state.count('Abyss_05', player))
    fn("Abyss_05[right1]", lambda state: state.count('Abyss_05[right1]', player) or state.count('Abyss_05', player))
    fn("Abyss_06_Core[top1]", lambda state: state.count('Abyss_06_Core[top1]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'PreciseMovement')))))
    fn("Abyss_06_Core[left1]", lambda state: state.count('Abyss_06_Core[left1]', player) or state.count('Warp-Lifeblood_Core_to_Abyss', player) or (state.count('Abyss_06_Core', player) and (state.count('Lifeblood_Heart', player) or state.count('Lifeblood_Core', player) or state.count("Joni's_Blessing", player)) and (state.count('LEFTCLAW', player) and (state._hk_option(player, 'PreciseMovement') or state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) or state.count('WINGS', player) or (state.count('Abyss_06_Core[top1]', player) and state.count('BRAND', player)))))
    fn("Abyss_06_Core[left3]", lambda state: state.count('Abyss_06_Core[left3]', player) or state.count('Abyss_06_Core', player))
    fn("Abyss_06_Core[right2]", lambda state: state.count('Abyss_06_Core[right2]', player) or state.count('Abyss_06_Core', player))
    fn("Abyss_06_Core[bot1]", lambda state: state.count('Abyss_06_Core[bot1]', player) or (state.count('Abyss_06_Core', player) and (state.count('WHITEFRAGMENT', player) > 1 and state.count('Can_Bench', player) or state.count('WHITEFRAGMENT', player) > 2)))
    fn("Abyss_08[right1]", lambda state: state.count('Abyss_08[right1]', player))
    fn("Abyss_09[right1]", lambda state: state.count('Abyss_09[right1]', player) or (state.count('Abyss_09', player) and (state.count('Lit_Abyss_Lighthouse', player) or state.count('WHITEFRAGMENT', player) > 2) and (state.count('SWIM', player) or state.count('RIGHTSUPERDASH', player))))
    fn("Abyss_09[right2]", lambda state: state.count('Abyss_09[right2]', player) or (state.count('Abyss_09', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) or state.count('WINGS', player))))
    fn("Abyss_09[right3]", lambda state: state.count('Abyss_09[right3]', player))
    fn("Abyss_09[left1]", lambda state: state.count('Abyss_09[left1]', player) or state.count('Abyss_09', player))
    fn("Abyss_10[left1]", lambda state: state.count('Abyss_10[left1]', player) or (state.count('Abyss_10[left2]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player))))
    fn("Abyss_10[left2]", lambda state: state.count('Abyss_10[left2]', player) or (state.count('Abyss_10[left1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player)) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips')))) or ((state.count('WINGS', player) or state.count('LEFTCLAW', player)) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player) or state.count('WHITEFRAGMENT', player) > 2)))))
    fn("Abyss_12[right1]", lambda state: state.count('Abyss_12[right1]', player))
    fn("Abyss_15[top1]", lambda state: state.count('Abyss_15[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))))
    fn("Abyss_16[left1]", lambda state: state.count('Abyss_16[left1]', player) or (state.count('Abyss_16[right1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))))
    fn("Abyss_16[right1]", lambda state: state.count('Abyss_16[right1]', player) or (state.count('Abyss_16[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTDASH', player))))
    fn("Abyss_17[top1]", lambda state: state.count('Abyss_17[top1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)))
    fn("Abyss_18[left1]", lambda state: state.count('Abyss_18[left1]', player) or (state.count('Abyss_18[right1]', player) and (state.count('WINGS', player) or state.count('LEFTSUPERDASH', player))))
    fn("Abyss_18[right1]", lambda state: state.count('Abyss_18[right1]', player) or (state.count('Abyss_18[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player))))
    fn("Abyss_19[left1]", lambda state: state.count('Abyss_19[left1]', player) or (state.count('Abyss_19[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('Defeated_Broken_Vessel', player)))
    fn("Abyss_19[right1]", lambda state: state.count('Abyss_19[right1]', player) or (state.count('Abyss_19[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or (state.count('Abyss_19[bot2]', player) and state.count('WINGS', player)))
    fn("Abyss_19[bot1]", lambda state: state.count('Abyss_19[bot1]', player))
    fn("Abyss_19[bot2]", lambda state: state.count('Abyss_19[bot2]', player) or (state.count('Abyss_19[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or state.count('Abyss_19[right1]', player))
    fn("Abyss_20[top1]", lambda state: state.count('Abyss_20[top1]', player) or (state.count('Abyss_20[top2]', player) and (state.count('LEFTCLAW', player) or (state._hk_option(player, 'EnemyPogos') and state.count('WINGS', player)))))
    fn("Abyss_20[top2]", lambda state: state.count('Abyss_20[top2]', player) or (state.count('Abyss_20[top1]', player) and state.count('RIGHTCLAW', player)))
    fn("Abyss_21[right1]", lambda state: state.count('Abyss_21[right1]', player))
    fn("Abyss_22[left1]", lambda state: state.count('Abyss_22[left1]', player) or (state.count('Can_Stag', player) and state.count('Hidden_Station_Stag', player)))
    fn("Abyss_Lighthouse_room[left1]", lambda state: state.count('Abyss_Lighthouse_room[left1]', player))
    fn("Waterways_01[top1]", lambda state: state.count('Waterways_01[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))) or (state.count('Waterways_01', player) and state.count('Opened_Waterways_Manhole', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Waterways_01[left1]", lambda state: state.count('Waterways_01[left1]', player) or state.count('Waterways_01', player))
    fn("Waterways_01[right1]", lambda state: state.count('Waterways_01[right1]', player) or (state.count('Waterways_01', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Waterways_01[bot1]", lambda state: state.count('Waterways_01[bot1]', player) or state.count('Waterways_01', player))
    fn("Waterways_02[top1]", lambda state: state.count('Waterways_02[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))) or (state.count('Waterways_02', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state._hk_option(player, 'EnemyPogos') and state.count('WINGS', player)))))
    fn("Waterways_02[top2]", lambda state: state.count('Waterways_02[top2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Waterways_02', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player)) or ((state.count('WINGS', player) or state.count('LEFTCLAW', player)) and state._hk_option(player, 'EnemyPogos')))))
    fn("Waterways_02[top3]", lambda state: state.count('Waterways_02[top3]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))))
    fn("Waterways_02[bot1]", lambda state: state.count('Waterways_02[bot1]', player) or (state.count('Waterways_02[top1]', player) and state.count('QUAKE', player)) or (state.count('Waterways_02[top2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('SWIM', player)) and state.count('QUAKE', player)) or (state.count('Waterways_02[top3]', player) and state.count('QUAKE', player)) or (state.count('Waterways_02[bot1]', player) and state.count('QUAKE', player)) or (state.count('Waterways_02[bot2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('SWIM', player)) and state.count('QUAKE', player)))
    fn("Waterways_02[bot2]", lambda state: state.count('Waterways_02[bot2]', player) or state.count('Waterways_02[top1]', player) or state.count('Waterways_02[top2]', player) or (state.count('Waterways_02[top3]', player) and state.count('QUAKE', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or (state._hk_option(player, 'EnemyPogos') and state.count('SWIM', player)) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips') and state.count('RIGHTDASH', player)))) or (state.count('Waterways_02[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and state.count('SWIM', player)) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips') and state.count('RIGHTDASH', player)))) or state.count('Waterways_02[bot2]', player))
    fn("Waterways_03[left1]", lambda state: state.count('Waterways_03[left1]', player))
    fn("Waterways_04[bot1]", lambda state: state.count('Waterways_04[bot1]', player) or (state.count('Waterways_04[right1]', player) and state.count('QUAKE', player)) or (state.count('Waterways_04[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) and state.count('QUAKE', player)) or (state.count('Waterways_04[left2]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips'))) and state.count('QUAKE', player)))
    fn("Waterways_04[right1]", lambda state: state.count('Waterways_04[right1]', player) or (state.count('Waterways_04[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player))) or (state.count('Waterways_04[left2]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Waterways_04[left1]", lambda state: state.count('Waterways_04[left1]', player) or (state.count('Waterways_04[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state.count('WINGS', player))) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))) or (state.count('Waterways_04[left2]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips'))) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Waterways_04[left2]", lambda state: state.count('Waterways_04[left2]', player) or (state.count('Waterways_04[right1]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))) or (state.count('Waterways_04[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Waterways_04b[right1]", lambda state: state.count('Waterways_04b[right1]', player) or (state.count('Waterways_04b[left1]', player) and state.count('WINGS', player)) or (state.count('Waterways_04b[right2]', player) and state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')) and (state.count('SWIM', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player)))))
    fn("Waterways_04b[right2]", lambda state: state.count('Waterways_04b[right2]', player) or (state.count('Waterways_04b[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or state.count('SWIM', player))) or (state.count('Waterways_04b[right1]', player) and (state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state.count('LEFTSUPERDASH', player))) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or state.count('SWIM', player))))
    fn("Waterways_04b[left1]", lambda state: state.count('Waterways_04b[left1]', player) or (state.count('Waterways_04b[right1]', player) and (state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state.count('LEFTSUPERDASH', player)))) or (state.count('Waterways_04b[right2]', player) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos'))) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')) and (state.count('SWIM', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player)))))
    fn("Waterways_05[right1]", lambda state: state.count('Waterways_05[right1]', player) or (state.count('Waterways_05[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('Defeated_Dung_Defender', player)) or state.count('Waterways_05[bot2]', player))
    fn("Waterways_05[bot1]", lambda state: state.count('Waterways_05[bot1]', player))
    fn("Waterways_05[bot2]", lambda state: state.count('Waterways_05[bot2]', player) or ((state.count('Waterways_05[right1]', player) or (state.count('Waterways_05[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('Defeated_Dung_Defender', player))) and state.count('QUAKE', player)))
    fn("Waterways_06[right1]", lambda state: state.count('Waterways_06[right1]', player) or (state.count('Waterways_06[top1]', player) and (state.count('ACID', player) or state.count('RIGHTSUPERDASH', player))))
    fn("Waterways_06[top1]", lambda state: state.count('Waterways_06[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Waterways_06[right1]', player) and (state.count('ACID', player) or state.count('LEFTSUPERDASH', player)) and (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips') or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) or state._hk_option(player, 'EnemyPogos') or state.count('RIGHTCLAW', player))) or state.count('WINGS', player))))
    fn("Waterways_07[right1]", lambda state: state.count('Waterways_07[right1]', player) or (state.count('Lever-Dung_Defender', player) and (state.count('Waterways_07', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or ((state.count('Waterways_07[door1]', player) or state.count('Waterways_07[top1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))))
    fn("Waterways_07[right2]", lambda state: state.count('Waterways_07[right2]', player) or (state.count('Waterways_07', player) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Waterways_07[left1]", lambda state: state.count('Waterways_07[left1]', player) or (state.count('Waterways_07', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and (state.count('ACID', player) or (state.count('LEFTDASH', player) and state.count('WINGS', player)))) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player) and (state.count('ACID', player) or state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)))) and (state.count('LEFTSUPERDASH', player) or (state.count('ACID', player) and state.count('WINGS', player)))))
    fn("Waterways_07[door1]", lambda state: state.count('Waterways_07[door1]', player) or (state.count('Waterways_07', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('Waterways_07[top1]', player) and state.count('WINGS', player)))
    fn("Waterways_07[top1]", lambda state: state.count('Waterways_07[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Waterways_08[top1]", lambda state: state.count('Waterways_08[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Waterways_08[left1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player))) or (state.count('Waterways_08[left2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Waterways_08[left1]", lambda state: state.count('Waterways_08[left1]', player) or (state.count('Waterways_08[top1]', player) and (state._hk_option(player, 'EnemyPogos') or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player))) or state.count('Waterways_08[left2]', player))
    fn("Waterways_08[left2]", lambda state: state.count('Waterways_08[left2]', player) or (state.count('Waterways_08[left1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player))))
    fn("Waterways_09[right1]", lambda state: state.count('Waterways_09[right1]', player) or state.count('Waterways_09[left1]', player))
    fn("Waterways_09[left1]", lambda state: state.count('Waterways_09[left1]', player) or (state.count('Waterways_09[right1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))))))
    fn("Waterways_12[right1]", lambda state: state.count('Waterways_12[right1]', player))
    fn("Waterways_13[left1]", lambda state: state.count('Waterways_13[left1]', player) or (state.count('Waterways_13[left2]', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player))) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and state._hk_option(player, 'AcidSkips')))))
    fn("Waterways_13[left2]", lambda state: state.count('Waterways_13[left2]', player) or (state.count('Waterways_13[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player)))) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Waterways_14[bot1]", lambda state: state.count('Waterways_14[bot1]', player) or (state.count('Waterways_14[bot2]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))) and (state.count('ACID', player) or state.count('LEFTSUPERDASH', player))))
    fn("Waterways_14[bot2]", lambda state: state.count('Waterways_14[bot2]', player) or (state.count('Waterways_14[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('ACID', player) or state.count('RIGHTSUPERDASH', player))))
    fn("Waterways_15[top1]", lambda state: state.count('Waterways_15[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))))
    fn("GG_Pipeway[right1]", lambda state: state.count('GG_Pipeway[right1]', player) or (state.count('GG_Pipeway[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("GG_Pipeway[left1]", lambda state: state.count('GG_Pipeway[left1]', player) or (state.count('GG_Pipeway[right1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("GG_Waterways[right1]", lambda state: state.count('GG_Waterways[right1]', player) or (state.count('GG_Waterways[door1]', player) and (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player)) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player)))))
    fn("GG_Waterways[door1]", lambda state: state.count('GG_Waterways[door1]', player) or (state.count('GG_Waterways[right1]', player) and ((state.count('LEFTSUPERDASH', player) or state.count('SWIM', player)) and (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('RIGHTSUPERDASH', player) and state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player) and state._hk_option(player, 'PreciseMovement'))) or (state.count('WINGS', player) and state.count('RIGHTDASH', player) and state.count('RIGHTCLAW', player) and state._hk_option(player, 'DifficultSkips')))))
    fn("Room_GG_Shortcut[left1]", lambda state: state.count('Room_GG_Shortcut[left1]', player) or (state.count('Room_GG_Shortcut[top1]', player) and (state.count('WINGS', player) or state.count('SWIM', player) or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player))))
    fn("Room_GG_Shortcut[top1]", lambda state: state.count('Room_GG_Shortcut[top1]', player) and (state.count('WINGS', player) or state.count('LEFTCLAW', player)) or (state.count('Room_GG_Shortcut[left1]', player) and (state.count('WINGS', player) or state.count('LEFTCLAW', player)) and (state.count('RIGHTCLAW', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player) or (state.count('RIGHTDASH', player) and state.count('SWIM', player))) or (state.count('LEFTCLAW', player) and state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))))))
    fn("Ruins1_01[left1]", lambda state: state.count('Ruins1_01[left1]', player) or state.count('Ruins1_01[top1]', player) or (state.count('Ruins1_01[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins1_01[top1]", lambda state: state.count('Ruins1_01[top1]', player) or state.count('Ruins1_01[left1]', player) or (state.count('Ruins1_01[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins1_01[bot1]", lambda state: state.count('Ruins1_01[bot1]', player) or state.count('Ruins1_01[top1]', player) or state.count('Ruins1_01[left1]', player))
    fn("Ruins1_02[top1]", lambda state: state.count('Ruins1_02[top1]', player) or (state.count('Ruins1_02[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins1_02[bot1]", lambda state: state.count('Ruins1_02[bot1]', player) or state.count('Ruins1_02[top1]', player))
    fn("Ruins1_03[top1]", lambda state: state.count('Ruins1_03[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Ruins1_03', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins1_03[left1]", lambda state: state.count('Ruins1_03[left1]', player) or state.count('Ruins1_03', player))
    fn("Ruins1_03[right1]", lambda state: state.count('Ruins1_03[right1]', player) or state.count('Ruins1_03', player))
    fn("Ruins1_03[right2]", lambda state: state.count('Ruins1_03[right2]', player) or state.count('Ruins1_03', player))
    fn("Ruins1_04[right1]", lambda state: state.count('Ruins1_04[right1]', player) or state.count('Ruins1_04[door1]', player) or (state.count('Ruins1_04[bot1]', player) and (state._hk_option(player, 'EnemyPogos') or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player) or state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'PreciseMovement')))))
    fn("Ruins1_04[door1]", lambda state: state.count('Ruins1_04[door1]', player) or ((state.count('Ruins1_04[bot1]', player) or (state.count('Ruins1_04[right1]', player) and (state._hk_option(player, 'EnemyPogos') or state.count('LEFTDASH', player) or state.count('WINGS', player) or state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'PreciseMovement'))))) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('RIGHTDASH', player))))))
    fn("Ruins1_04[bot1]", lambda state: state.count('Ruins1_04[bot1]', player))
    fn("Ruins1_05b[left1]", lambda state: state.count('Ruins1_05b[left1]', player) or state.count('Ruins1_05b', player))
    fn("Ruins1_05b[top1]", lambda state: state.count('Ruins1_05b[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))))
    fn("Ruins1_05b[bot1]", lambda state: state.count('Ruins1_05b[bot1]', player) or (state.count('Ruins1_05b', player) and state.count('Opened_Waterways_Manhole', player)))
    fn("Ruins1_05b[right1]", lambda state: state.count('Ruins1_05b[right1]', player) or state.count('Ruins1_05b', player))
    fn("Ruins1_05c[left2]", lambda state: state.count('Ruins1_05c[left2]', player) or state.count('Ruins1_05c', player))
    fn("Ruins1_05c[bot1]", lambda state: state.count('Ruins1_05c[bot1]', player) or state.count('Ruins1_05c', player))
    fn("Ruins1_05c[top1]", lambda state: state.count('Ruins1_05c[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))) or (state.count('Ruins1_05c', player) and (state.count('WINGS', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DifficultSkips'))) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) or state._hk_option(player, 'EnemyPogos') or state.count('Ruins1_05c[top2]', player))))))
    fn("Ruins1_05c[top2]", lambda state: state.count('Ruins1_05c[top2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Ruins1_05c[top3]", lambda state: state.count('Ruins1_05c[top3]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) or (state.count('Ruins1_05c[top2]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Ruins1_05[bot1]", lambda state: state.count('Ruins1_05[bot1]', player))
    fn("Ruins1_05[bot2]", lambda state: state.count('Ruins1_05[bot2]', player) or (state.count('Ruins1_05[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state._hk_option(player, 'EnemyPogos'))))))
    fn("Ruins1_05[bot3]", lambda state: state.count('Ruins1_05[bot3]', player) or state.count('Ruins1_05', player))
    fn("Ruins1_05[right1]", lambda state: state.count('Ruins1_05[right1]', player) or (state.count('Ruins1_05', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('Ruins1_05[top1]', player))))
    fn("Ruins1_05[right2]", lambda state: state.count('Ruins1_05[right2]', player) or state.count('Ruins1_05', player))
    fn("Ruins1_05[top1]", lambda state: state.count('Ruins1_05[top1]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state._hk_option(player, 'PreciseMovement')))) or (state.count('Ruins1_05', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))) and (state.count('WINGS', player) or state.count('LEFTCLAW', player) or state.count('Ruins1_05[right1]', player))))
    fn("Ruins1_06[left1]", lambda state: state.count('Ruins1_06[left1]', player) or state.count('Ruins1_06[right1]', player))
    fn("Ruins1_06[right1]", lambda state: state.count('Ruins1_06[right1]', player) or state.count('Ruins1_06[left1]', player))
    fn("Ruins1_09[top1]", lambda state: state.count('Ruins1_09[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Ruins1_09[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins1_09[left1]", lambda state: state.count('Ruins1_09[left1]', player) or state.count('Ruins1_09[top1]', player))
    fn("Ruins1_17[top1]", lambda state: state.count('Ruins1_17[top1]', player) or state.count('Ruins1_17[right1]', player))
    fn("Ruins1_17[right1]", lambda state: state.count('Ruins1_17[right1]', player) or state.count('Ruins1_17[top1]', player))
    fn("Ruins1_17[bot1]", lambda state: state.count('Ruins1_17[bot1]', player) or state.count('Ruins1_17[top1]', player) or state.count('Ruins1_17[right1]', player))
    fn("Ruins1_18[left1]", lambda state: state.count('Ruins1_18[left1]', player) or state.count('Ruins1_18[right1]', player))
    fn("Ruins1_18[right1]", lambda state: state.count('Ruins1_18[right1]', player))
    fn("Ruins1_18[right2]", lambda state: state.count('Ruins1_18[right2]', player))
    fn("Ruins1_23[top1]", lambda state: state.count('Ruins1_23[top1]', player) and state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement') or (state.count('Ruins1_23', player) and state.count('Defeated_Sanctum_Warrior', player) and state.count('Broke_Sanctum_Glass_Floor', player) and state.count('WINGS', player) and (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player)) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))) or state._hk_option(player, 'BackgroundObjectPogos'))))
    fn("Ruins1_23[right1]", lambda state: state.count('Ruins1_23[right1]', player) or ((state.count('Ruins1_23', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'EnemyPogos'))) or state.count('Ruins1_23[top1]', player)) and state.count('Defeated_Sanctum_Warrior', player)))
    fn("Ruins1_23[right2]", lambda state: state.count('Ruins1_23[right2]', player))
    fn("Ruins1_23[bot1]", lambda state: state.count('Ruins1_23[bot1]', player) or state.count('Ruins1_23', player))
    fn("Ruins1_23[left1]", lambda state: state.count('Ruins1_23[left1]', player) or state.count('Ruins1_23', player))
    fn("Ruins1_24[left1]", lambda state: state.count('Ruins1_24[left1]', player) or (state.count('Ruins1_24[right1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player))) and state.count('Defeated_Soul_Master', player)))
    fn("Ruins1_24[right1]", lambda state: state.count('Ruins1_24[right1]', player))
    fn("Ruins1_24[left2]", lambda state: state.count('Ruins1_24[left2]', player) or state.count('Ruins1_24[right2]', player))
    fn("Ruins1_24[right2]", lambda state: state.count('Ruins1_24[right2]', player) or state.count('Ruins1_24[left2]', player))
    fn("Ruins1_25[left1]", lambda state: state.count('Ruins1_25[left1]', player) or ((state.count('Ruins1_25[left2]', player) or state.count('Ruins1_25[left3]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins1_25[left2]", lambda state: state.count('Ruins1_25[left2]', player) or ((state.count('Ruins1_25[left1]', player) or state.count('Ruins1_25[left3]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins1_25[left3]", lambda state: state.count('Ruins1_25[left3]', player) or (state.count('Ruins1_25[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or state.count('Ruins1_25[left2]', player))
    fn("Ruins1_27[left1]", lambda state: state.count('Ruins1_27[left1]', player) or state.count('Ruins1_27[right1]', player))
    fn("Ruins1_27[right1]", lambda state: state.count('Ruins1_27[right1]', player) or (state.count('Ruins1_27[left1]', player) and state.count('RIGHTCLAW', player) and state.count('WINGS', player)))
    fn("Ruins1_28[left1]", lambda state: state.count('Ruins1_28[left1]', player) or state.count('Ruins1_28', player))
    fn("Ruins1_28[right1]", lambda state: state.count('Ruins1_28[right1]', player) or state.count('Ruins1_28', player))
    fn("Ruins1_28[bot1]", lambda state: state.count('Ruins1_28[bot1]', player) or state.count('Ruins1_28', player))
    fn("Ruins1_29[left1]", lambda state: state.count('Ruins1_29[left1]', player) or (state.count('Can_Stag', player) and state.count('City_Storerooms_Stag', player)))
    fn("Ruins1_30[left1]", lambda state: state.count('Ruins1_30[left1]', player) or (state.count('Ruins1_30', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins1_30[left2]", lambda state: state.count('Ruins1_30[left2]', player))
    fn("Ruins1_30[bot1]", lambda state: state.count('Ruins1_30[bot1]', player) or (state.count('Ruins1_30', player) and state.count('QUAKE', player)))
    fn("Ruins1_30[right1]", lambda state: state.count('Ruins1_30[right1]', player) or (state.count('Ruins1_30', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Ruins1_30[left1]', player))))
    fn("Ruins1_31[bot1]", lambda state: state.count('Ruins1_31[bot1]', player) or state.count('Ruins1_31', player) or state.count('Ruins1_31[left1]', player))
    fn("Ruins1_31[left1]", lambda state: state.count('Ruins1_31[left1]', player) or state.count('Ruins1_31', player) or state.count('Ruins1_31[bot1]', player))
    fn("Ruins1_31[left2]", lambda state: state.count('Ruins1_31[left2]', player) or (state.count('Ruins1_31', player) and state.count('Lever-Shade_Soul', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('RIGHTCLAW', player) or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player))))
    fn("Ruins1_31[left3]", lambda state: state.count('Ruins1_31[left3]', player) or (state.count('Ruins1_31', player) and state.count('ELEGANT', player)))
    fn("Ruins1_31[right1]", lambda state: state.count('Ruins1_31[right1]', player) or state.count('Ruins1_31', player))
    fn("Ruins1_31b[right1]", lambda state: state.count('Ruins1_31b[right1]', player) or (state.count('Ruins1_31b[right2]', player) and state.count('Defeated_Elegant_Warrior', player)))
    fn("Ruins1_31b[right2]", lambda state: state.count('Ruins1_31b[right2]', player) or (state.count('Ruins1_31b[right1]', player) and state.count('Defeated_Elegant_Warrior', player)))
    fn("Ruins1_32[right1]", lambda state: state.count('Ruins1_32[right1]', player))
    fn("Ruins1_32[right2]", lambda state: state.count('Ruins1_32[right2]', player) or (state.count('Ruins1_32[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('QUAKE', player)))
    fn("Room_nailsmith[left1]", lambda state: state.count('Room_nailsmith[left1]', player))
    fn("Ruins2_01[top1]", lambda state: state.count('Ruins2_01[top1]', player) or (state.count('Ruins2_01', player) and (state.count('Ruins2_01[left2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DifficultSkips')))))
    fn("Ruins2_01[bot1]", lambda state: state.count('Ruins2_01[bot1]', player) or state.count('Ruins2_01', player))
    fn("Ruins2_01[left2]", lambda state: state.count('Ruins2_01[left2]', player) or (state.count('Ruins2_01', player) and (state.count('Ruins2_01[top1]', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DifficultSkips')))))
    fn("Ruins2_01_b[top1]", lambda state: state.count('Ruins2_01_b[top1]', player) or (state.count('Ruins2_01_b', player) and (state.count('LEFTCLAW', player) and state._hk_option(player, 'BackgroundObjectPogos') or state.count('WINGS', player))))
    fn("Ruins2_01_b[left1]", lambda state: state.count('Ruins2_01_b[left1]', player) or state.count('Ruins2_01_b', player))
    fn("Ruins2_01_b[right1]", lambda state: state.count('Ruins2_01_b[right1]', player) or state.count('Ruins2_01_b', player))
    fn("Ruins2_03b[top1]", lambda state: state.count('Ruins2_03b[top1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) or (state.count('Ruins2_03b', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips')))))
    fn("Ruins2_03b[top2]", lambda state: state.count('Ruins2_03b[top2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Ruins2_03b', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins2_03b[left1]", lambda state: state.count('Ruins2_03b[left1]', player) or state.count('Ruins2_03b', player))
    fn("Ruins2_03b[bot1]", lambda state: state.count('Ruins2_03b[bot1]', player) or state.count('Ruins2_03b', player))
    fn("Ruins2_03[top1]", lambda state: state.count('Ruins2_03[top1]', player) or (state.count('Ruins2_03[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('Defeated_Watcher_Knights', player)))
    fn("Ruins2_03[bot1]", lambda state: state.count('Ruins2_03[bot1]', player) or (state.count('Ruins2_03[top1]', player) and state.count('Defeated_Watcher_Knights', player)))
    fn("Ruins2_03[bot2]", lambda state: state.count('Ruins2_03[bot2]', player))
    fn("Ruins2_04[left1]", lambda state: state.count('Ruins2_04[left1]', player) or state.count('Ruins2_04', player))
    fn("Ruins2_04[left2]", lambda state: state.count('Ruins2_04[left2]', player) or state.count('Ruins2_04', player))
    fn("Ruins2_04[right1]", lambda state: state.count('Ruins2_04[right1]', player) or (state.count('Ruins2_04', player) and ((state.count('LEFTDASH', player) or state.count('LEFTCLAW', player)) and (state.count('RIGHTDASH', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Ruins2_04[door_Ruin_House_02]', player) or (state.count('Ruins2_04[door_Ruin_Elevator]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))))
    fn("Ruins2_04[right2]", lambda state: state.count('Ruins2_04[right2]', player) or state.count('Ruins2_04', player))
    fn("Ruins2_04[door_Ruin_House_01]", lambda state: state.count('Ruins2_04[door_Ruin_House_01]', player) or (state.count('Ruins2_04', player) and ((state.count('LEFTDASH', player) or state.count('LEFTCLAW', player)) and (state.count('RIGHTDASH', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Ruins2_04[right1]', player) or state.count('Ruins2_04[door_Ruin_House_02]', player) or (state.count('Ruins2_04[door_Ruin_Elevator]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('RIGHTSUPERDASH', player))))))
    fn("Ruins2_04[door_Ruin_House_02]", lambda state: state.count('Ruins2_04[door_Ruin_House_02]', player) or (state.count('Ruins2_04', player) and ((state.count('LEFTDASH', player) or state.count('LEFTCLAW', player)) and (state.count('RIGHTDASH', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Ruins2_04[right1]', player) or (state.count('Ruins2_04[door_Ruin_Elevator]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))))
    fn("Ruins2_04[door_Ruin_House_03]", lambda state: state.count('Ruins2_04[door_Ruin_House_03]', player) or (state.count('Ruins2_04', player) and state.count('Opened_Emilitia_Door', player)))
    fn("Ruins2_04[door_Ruin_Elevator]", lambda state: state.count('Ruins2_04[door_Ruin_Elevator]', player) or (state.count('Ruins2_04', player) and state.count('SIMPLE', player) > 3 and ((state.count('LEFTDASH', player) or state.count('LEFTCLAW', player)) and (state.count('RIGHTDASH', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Ruins2_04[right1]', player) or state.count('Ruins2_04[door_Ruin_House_02]', player))))
    fn("Ruins2_05[left1]", lambda state: state.count('Ruins2_05[left1]', player) or state.count('Ruins2_05[top1]', player) or (state.count('Ruins2_05[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Ruins2_05[top1]", lambda state: state.count('Ruins2_05[top1]', player) or ((state.count('Ruins2_05[left1]', player) or state.count('Ruins2_05[bot1]', player)) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Ruins2_05[bot1]", lambda state: state.count('Ruins2_05[bot1]', player) or state.count('Ruins2_05[left1]', player) or state.count('Ruins2_05[top1]', player))
    fn("Ruins2_06[left1]", lambda state: state.count('Ruins2_06[left1]', player) or state.count('Ruins2_06[left1]', player) or state.count('Ruins2_06[top1]', player) or (state.count('Ruins2_06[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('Ruins2_06[right2]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('Ruins2_06[left2]', player) and (state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state._hk_option(player, 'PreciseMovement'))) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Ruins2_06[left2]", lambda state: state.count('Ruins2_06[left2]', player) or ((state.count('Ruins2_06[left1]', player) or state.count('Ruins2_06[top1]', player) or state.count('Ruins2_06[right1]', player) or state.count('Ruins2_06[right2]', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state.count('WINGS', player) or state.count('SWIM', player) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DifficultSkips')) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True))))
    fn("Ruins2_06[right1]", lambda state: state.count('Ruins2_06[right1]', player) or state.count('Ruins2_06[left1]', player) or state.count('Ruins2_06[top1]', player) or state.count('Ruins2_06[right1]', player) or (state.count('Ruins2_06[right2]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) or state._hk_option(player, 'EnemyPogos'))) or (state.count('Ruins2_06[left2]', player) and (state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state._hk_option(player, 'PreciseMovement'))) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) or state._hk_option(player, 'EnemyPogos'))))
    fn("Ruins2_06[right2]", lambda state: state.count('Ruins2_06[right2]', player) or state.count('Ruins2_06[left1]', player) or state.count('Ruins2_06[top1]', player) or state.count('Ruins2_06[right1]', player) or state.count('Ruins2_06[right2]', player) or (state.count('Ruins2_06[left2]', player) and (state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state._hk_option(player, 'PreciseMovement')))))
    fn("Ruins2_06[top1]", lambda state: state.count('Ruins2_06[top1]', player) or state.count('Ruins2_06[left1]', player) or state.count('Ruins2_06[top1]', player) or (state.count('Ruins2_06[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('Ruins2_06[right2]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('Ruins2_06[left2]', player) and (state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state._hk_option(player, 'PreciseMovement'))) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Ruins2_07[right1]", lambda state: state.count('Ruins2_07[right1]', player) or (state.count('Ruins2_07[left1]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')) or (state._hk_option(player, 'DifficultSkips') and state._hk_option(player, 'AcidSkips') and state.count('RIGHTDASH', player) and state.count('RIGHTCLAW', player) and state.count('WINGS', player) and ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True or ((state.count('Sharp_Shadow', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) and state.count('Can_Bench', player)) and True))))) or state.count('Ruins2_07[right1]', player) or state.count('Ruins2_07[top1]', player))
    fn("Ruins2_07[left1]", lambda state: state.count('Ruins2_07[left1]', player) or state.count('Ruins2_07[left1]', player) or (state.count('Ruins2_07[right1]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')) or (state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'AcidSkips') and state.count('LEFTDASH', player) and state.count('RIGHTCLAW', player) and state.count('WINGS', player) and ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True or ((state.count('Sharp_Shadow', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player)) and state.count('Can_Bench', player)) and True))))) or (state.count('Ruins2_07[top1]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')) or (state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'AcidSkips') and state.count('LEFTDASH', player) and state.count('RIGHTCLAW', player) and state.count('WINGS', player) and ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True or ((state.count('Sharp_Shadow', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player)) and state.count('Can_Bench', player)) and True))))))
    fn("Ruins2_07[top1]", lambda state: state.count('Ruins2_07[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Ruins2_07[left1]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')) or (state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'AcidSkips') and state.count('RIGHTDASH', player) and state.count('RIGHTCLAW', player) and state.count('WINGS', player) and ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True or ((state.count('Sharp_Shadow', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) and state.count('Can_Bench', player)) and True)))) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or (state.count('Ruins2_07[right1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('SWIM', player) or state.count('LEFTDASH', player))))) or (state.count('Ruins2_07[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Ruins2_08[left1]", lambda state: state.count('Ruins2_08[left1]', player) or (state.count('Can_Stag', player) and state.count("King's_Station_Stag", player)))
    fn("Ruins2_09[bot1]", lambda state: state.count('Ruins2_09[bot1]', player))
    fn("Ruins2_10[right1]", lambda state: state.count('Ruins2_10[right1]', player) or (state.count('Right_Elevator', player) and state.count('Opened_Resting_Grounds_Catacombs_Wall', player)))
    fn("Ruins2_10[left1]", lambda state: state.count('Ruins2_10[left1]', player) or state.count('Right_Elevator', player))
    fn("Ruins2_10b[right1]", lambda state: state.count('Ruins2_10b[right1]', player) or ((state.count('Right_Elevator', player) or state.count('Ruins2_10b[right2]', player)) and (state.count('LEFTCLAW', player) and state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player) and state.count('LEFTDASH', player)) or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)))) or (state.count('Ruins2_10b[left1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player) and state.count('LEFTDASH', player)))))
    fn("Ruins2_10b[right2]", lambda state: state.count('Ruins2_10b[right2]', player) or state.count('Ruins2_10b[left1]', player) or state.count('Ruins2_10b[right1]', player) or state.count('Right_Elevator', player))
    fn("Ruins2_10b[left1]", lambda state: state.count('Ruins2_10b[left1]', player) or ((state.count('Right_Elevator', player) or state.count('Ruins2_10b[right1]', player) or state.count('Ruins2_10b[right2]', player)) and state.count('Opened_Pleasure_House_Wall', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state.count('Ruins2_10b[right1]', player))))
    fn("Ruins2_11_b[right1]", lambda state: state.count('Ruins2_11_b[right1]', player) or state.count('Ruins2_11_b[left1]', player))
    fn("Ruins2_11_b[left1]", lambda state: state.count('Ruins2_11_b[left1]', player) or (state.count('Ruins2_11_b[right1]', player) and state.count('LOVE', player)))
    fn("Ruins2_11_b[bot1]", lambda state: state.count('Ruins2_11_b[bot1]', player) or state.count('Ruins2_11_b[right1]', player) or state.count('Ruins2_11_b[left1]', player))
    fn("Ruins2_11[right1]", lambda state: state.count('Ruins2_11[right1]', player))
    fn("Ruins2_Watcher_Room[bot1]", lambda state: state.count('Ruins2_Watcher_Room[bot1]', player))
    fn("Ruins_House_01[left1]", lambda state: state.count('Ruins_House_01[left1]', player))
    fn("Ruins_House_02[left1]", lambda state: state.count('Ruins_House_02[left1]', player))
    fn("Ruins_House_03[left1]", lambda state: state.count('Ruins_House_03[left1]', player) or (state.count('Ruins_House_03[left2]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Ruins_House_03[left2]", lambda state: state.count('Ruins_House_03[left2]', player) or state.count('Ruins_House_03[left1]', player))
    fn("Ruins_Elevator[left1]", lambda state: state.count('Ruins_Elevator[left1]', player) or state.count('Ruins_Elevator[left2]', player))
    fn("Ruins_Elevator[left2]", lambda state: state.count('Ruins_Elevator[left2]', player) or state.count('Ruins_Elevator[left1]', player))
    fn("Ruins_Bathhouse[door1]", lambda state: state.count('Ruins_Bathhouse[door1]', player) or state.count('Ruins_Bathhouse[right1]', player))
    fn("Ruins_Bathhouse[right1]", lambda state: state.count('Ruins_Bathhouse[right1]', player) or state.count('Ruins_Bathhouse[door1]', player))
    fn("RestingGrounds_02[right1]", lambda state: state.count('RestingGrounds_02[right1]', player) or state.count('RestingGrounds_02', player))
    fn("RestingGrounds_02[left1]", lambda state: state.count('RestingGrounds_02[left1]', player) or state.count('RestingGrounds_02', player))
    fn("RestingGrounds_02[bot1]", lambda state: state.count('RestingGrounds_02[bot1]', player) or (state.count('RestingGrounds_02', player) and state.count('Opened_Resting_Grounds_Floor', player)))
    fn("RestingGrounds_02[top1]", lambda state: False)
    fn("RestingGrounds_04[left1]", lambda state: state.count('RestingGrounds_04[left1]', player) or state.count('RestingGrounds_04[right1]', player))
    fn("RestingGrounds_04[right1]", lambda state: state.count('RestingGrounds_04[right1]', player) or state.count('RestingGrounds_04[left1]', player))
    fn("RestingGrounds_05[left1]", lambda state: state.count('RestingGrounds_05[left1]', player) or state.count('RestingGrounds_05', player))
    fn("RestingGrounds_05[left2]", lambda state: state.count('RestingGrounds_05[left2]', player) or state.count('RestingGrounds_05', player))
    fn("RestingGrounds_05[left3]", lambda state: state.count('RestingGrounds_05[left3]', player) or state.count('RestingGrounds_05', player))
    fn("RestingGrounds_05[right1]", lambda state: state.count('RestingGrounds_05[right1]', player) or (state.count('RestingGrounds_05', player) and state.count('Opened_Glade_Door', player)))
    fn("RestingGrounds_05[right2]", lambda state: state.count('RestingGrounds_05[right2]', player) or state.count('RestingGrounds_05', player))
    fn("RestingGrounds_05[bot1]", lambda state: state.count('RestingGrounds_05[bot1]', player) or (state.count('RestingGrounds_05', player) and state.count('QUAKE', player)))
    fn("RestingGrounds_06[left1]", lambda state: state.count('RestingGrounds_06[left1]', player) or state.count('RestingGrounds_06[right1]', player) or state.count('RestingGrounds_06[top1]', player))
    fn("RestingGrounds_06[right1]", lambda state: state.count('RestingGrounds_06[right1]', player) or state.count('RestingGrounds_06[left1]', player) or state.count('RestingGrounds_06[top1]', player))
    fn("RestingGrounds_06[top1]", lambda state: state.count('RestingGrounds_06[top1]', player) or ((state.count('RestingGrounds_06[left1]', player) or state.count('RestingGrounds_06[right1]', player)) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('LEFTDASH', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("RestingGrounds_07[right1]", lambda state: state.count('RestingGrounds_07[right1]', player))
    fn("RestingGrounds_08[left1]", lambda state: state.count('RestingGrounds_08[left1]', player))
    fn("RestingGrounds_09[left1]", lambda state: state.count('RestingGrounds_09[left1]', player) or (state.count('Can_Stag', player) and state.count('Resting_Grounds_Stag', player)))
    fn("RestingGrounds_10[left1]", lambda state: state.count('RestingGrounds_10[left1]', player) or state.count('RestingGrounds_10', player))
    fn("RestingGrounds_10[top1]", lambda state: state.count('RestingGrounds_10[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement'))))
    fn("RestingGrounds_10[top2]", lambda state: state.count('RestingGrounds_10[top2]', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and (state.count('RIGHTCLAW', player) or state._hk_option(player, 'PreciseMovement')))) or (state.count('RestingGrounds_10', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))))
    fn("RestingGrounds_12[bot1]", lambda state: state.count('RestingGrounds_12[bot1]', player) or state.count('RestingGrounds_12[door_Mansion]', player))
    fn("RestingGrounds_12[door_Mansion]", lambda state: state.count('RestingGrounds_12[door_Mansion]', player) or state.count('RestingGrounds_12[bot1]', player))
    fn("RestingGrounds_17[right1]", lambda state: state.count('RestingGrounds_17[right1]', player))
    fn("Room_Mansion[left1]", lambda state: state.count('Room_Mansion[left1]', player))
    fn("Mines_01[bot1]", lambda state: state.count('Mines_01[bot1]', player) or (state.count('Mines_01[left1]', player) and state.count('QUAKE', player)))
    fn("Mines_01[left1]", lambda state: state.count('Mines_01[left1]', player))
    fn("Mines_02[top1]", lambda state: state.count('Mines_02[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Mines_02', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Mines_02[top2]", lambda state: state.count('Mines_02', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Mines_02[left1]", lambda state: state.count('Mines_02[left1]', player) or state.count('Mines_02', player))
    fn("Mines_02[right1]", lambda state: state.count('Mines_02[right1]', player) or state.count('Mines_02', player))
    fn("Mines_03[right1]", lambda state: state.count('Mines_03[right1]', player) or (state.count('Mines_03', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('Mines_03[top1]', player))))
    fn("Mines_03[bot1]", lambda state: state.count('Mines_03[bot1]', player) or state.count('Mines_03', player))
    fn("Mines_03[top1]", lambda state: state.count('Mines_03[top1]', player) or (state.count('Mines_03', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('Mines_03[right1]', player)) or (state._hk_option(player, 'SpikeTunnels') and state.count('WINGS', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True))))))
    fn("Mines_04[right1]", lambda state: state.count('Mines_04[right1]', player) or state.count('Mines_04', player))
    fn("Mines_04[top1]", lambda state: state.count('Mines_04[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Mines_04[left1]", lambda state: state.count('Mines_04[left1]', player) or (state.count('Mines_04', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTDASH', player) and state._hk_option(player, 'EnemyPogos')) or state.count('Mines_04[top1]', player))))
    fn("Mines_04[left2]", lambda state: state.count('Mines_04[left2]', player) or state.count('Mines_04', player))
    fn("Mines_04[left3]", lambda state: state.count('Mines_04[left3]', player) or state.count('Mines_04', player))
    fn("Mines_05[right1]", lambda state: state.count('Mines_05[right1]', player) or (state.count('Mines_05', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and ((True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) or state._hk_option(player, 'BackgroundObjectPogos'))) or state.count('Mines_05[left1]', player) or state.count('Mines_05[top1]', player))))
    fn("Mines_05[top1]", lambda state: state.count('Mines_05[top1]', player) or (state.count('Mines_05', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and ((True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) or state._hk_option(player, 'BackgroundObjectPogos'))) or (state.count('RIGHTCLAW', player) and state.count('Mines_05[right1]', player)) or state.count('Mines_05[left1]', player))))
    fn("Mines_05[bot1]", lambda state: state.count('Mines_05[bot1]', player) or state.count('Mines_05', player))
    fn("Mines_05[left1]", lambda state: state.count('Mines_05[left1]', player) or (state.count('Mines_05', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and ((True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) or state._hk_option(player, 'BackgroundObjectPogos'))) or (state.count('RIGHTCLAW', player) and state.count('Mines_05[right1]', player)) or state.count('Mines_05[top1]', player))))
    fn("Mines_05[left2]", lambda state: state.count('Mines_05[left2]', player) or state.count('Mines_05', player))
    fn("Mines_06[right1]", lambda state: state.count('Mines_06[right1]', player) or state.count('Mines_06[left1]', player))
    fn("Mines_06[left1]", lambda state: state.count('Mines_06[left1]', player) or (state.count('Mines_06[right1]', player) and (state.count('LEFTSUPERDASH', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('WINGS', player) and state.count('LEFTDASH', player) and state._hk_option(player, 'BackgroundObjectPogos') and state._hk_option(player, 'PreciseMovement') and state._hk_option(player, 'ComplexSkips')))))
    fn("Mines_07[right1]", lambda state: state.count('Mines_07[right1]', player) or (state.count('Mines_07[left1]', player) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms'))))
    fn("Mines_07[left1]", lambda state: state.count('Mines_07[left1]', player) or (state.count('Mines_07[right1]', player) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms'))))
    fn("Mines_10[right1]", lambda state: state.count('Mines_10[right1]', player) or (state.count('Mines_10', player) and state.count('RIGHTCLAW', player) and state.count('RIGHTSUPERDASH', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTDASH', player) and state.count('WINGS', player)))))
    fn("Mines_10[left1]", lambda state: state.count('Mines_10[left1]', player) or state.count('Mines_10', player))
    fn("Mines_10[bot1]", lambda state: state.count('Mines_10[bot1]', player) or state.count('Mines_10', player))
    fn("Mines_11[right1]", lambda state: state.count('Mines_11[right1]', player) or state.count('Mines_11', player))
    fn("Mines_11[top1]", lambda state: state.count('Mines_11[top1]', player) or state.count('Mines_11', player))
    fn("Mines_11[bot1]", lambda state: state.count('Mines_11[bot1]', player) or state.count('Mines_11', player))
    fn("Mines_13[right1]", lambda state: state.count('Mines_13[right1]', player) or (state.count('Mines_13[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or state.count('Mines_13[top1]', player))
    fn("Mines_13[top1]", lambda state: False)
    fn("Mines_13[bot1]", lambda state: state.count('Mines_13[bot1]', player) or state.count('Mines_13[top1]', player) or state.count('Mines_13[right1]', player))
    fn("Mines_16[top1]", lambda state: state.count('Mines_16[top1]', player))
    fn("Mines_17[right1]", lambda state: state.count('Mines_17[right1]', player) or state.count('Mines_17[left1]', player))
    fn("Mines_17[left1]", lambda state: state.count('Mines_17[left1]', player) or state.count('Mines_17[right1]', player))
    fn("Mines_18[top1]", lambda state: state.count('Mines_18[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Mines_18', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player)))
    fn("Mines_18[left1]", lambda state: state.count('Mines_18[left1]', player) or state.count('Mines_18', player))
    fn("Mines_18[right1]", lambda state: state.count('Mines_18[right1]', player) or state.count('Mines_18', player))
    fn("Mines_19[left1]", lambda state: state.count('Mines_19[left1]', player) or state.count('Mines_19[right1]', player))
    fn("Mines_19[right1]", lambda state: state.count('Mines_19[right1]', player) or state.count('Mines_19[left1]', player))
    fn("Mines_20[left1]", lambda state: state.count('Mines_20[left1]', player) or state.count('Mines_20', player))
    fn("Mines_20[left2]", lambda state: state.count('Mines_20[left2]', player) or state.count('Mines_20', player))
    fn("Mines_20[left3]", lambda state: state.count('Mines_20[left3]', player) or state.count('Mines_20', player) or state.count('Mines_20[bot1]', player) or state.count('Mines_20[left2]', player) or state.count('Mines_20[right2]', player))
    fn("Mines_20[bot1]", lambda state: state.count('Mines_20[bot1]', player) or state.count('Mines_20', player) or state.count('Mines_20[left3]', player) or state.count('Mines_20[left2]', player) or state.count('Mines_20[right2]', player))
    fn("Mines_20[right1]", lambda state: state.count('Mines_20[right1]', player) or (state.count('Mines_20', player) and (state.count('RIGHTCLAW', player) and state._hk_option(player, 'BackgroundObjectPogos') or (state.count('LEFTDASH', player) and state.count('LEFTCLAW', player) and state._hk_option(player, 'BackgroundObjectPogos')) or state.count('WINGS', player))))
    fn("Mines_20[right2]", lambda state: state.count('Mines_20[right2]', player) or state.count('Mines_20', player))
    fn("Mines_23[left1]", lambda state: state.count('Mines_23[left1]', player) or (state.count('Mines_23[right1]', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or state.count('LEFTSUPERDASH', player) or state.count('LEFTCLAW', player) or state._hk_option(player, 'PreciseMovement') or state._hk_option(player, 'EnemyPogos'))) or state.count('Mines_23[top1]', player) or (state.count('Mines_23[right2]', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('LEFTSUPERDASH', player)))))
    fn("Mines_23[right1]", lambda state: state.count('Mines_23[right1]', player) or (state.count('Mines_23[top1]', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('RIGHTSUPERDASH', player) and state.count('RIGHTCLAW', player)))) or (state.count('Mines_23[left1]', player) and (state.count('WINGS', player) or (state.count('RIGHTDASH', player) and state.count('RIGHTCLAW', player)) or (state.count('RIGHTSUPERDASH', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player))))) or (state.count('Mines_23[right2]', player) and (state.count('WINGS', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))))
    fn("Mines_23[right2]", lambda state: state.count('Mines_23[right2]', player) or state.count('Mines_23[right1]', player) or (state.count('Mines_23[top1]', player) and (state.count('RIGHTDASH', player) or (state.count('RIGHTSUPERDASH', player) and state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or (state.count('Mines_23[left1]', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTSUPERDASH', player)))))
    fn("Mines_23[top1]", lambda state: False)
    fn("Mines_24[left1]", lambda state: state.count('Mines_24[left1]', player))
    fn("Mines_25[left1]", lambda state: state.count('Mines_25[left1]', player) or state.count('Mines_25[top1]', player))
    fn("Mines_25[top1]", lambda state: state.count('Mines_25[top1]', player) and (state.count('WINGS', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state._hk_option(player, 'PreciseMovement')) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'ComplexSkips'))) or (state.count('Mines_25[left1]', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player))) and (state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'ComplexSkips')))))
    fn("Mines_28[left1]", lambda state: state.count('Mines_28[left1]', player) or (state.count('Mines_28[door1]', player) and (state.count('LEFTSUPERDASH', player) or (state.count('WINGS', player) and state.count('LEFTDASH', player)) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True and (state.count('WINGS', player) or state.count('LEFTDASH', player))))))
    fn("Mines_28[bot1]", lambda state: state.count('Mines_28[bot1]', player) or state.count('Mines_28[left1]', player) or state.count('Mines_28[door1]', player))
    fn("Mines_28[door1]", lambda state: state.count('Mines_28[door1]', player) or (state.count('Mines_28[left1]', player) and (state.count('RIGHTSUPERDASH', player) or (state.count('WINGS', player) and state.count('RIGHTDASH', player)) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True and (state.count('WINGS', player) or state.count('RIGHTDASH', player))))))
    fn("Mines_29[left1]", lambda state: state.count('Mines_29[left1]', player) or state.count('Mines_29[right1]', player) or state.count('Mines_29[right2]', player))
    fn("Mines_29[right1]", lambda state: state.count('Mines_29[right1]', player) or state.count('Mines_29[left1]', player) or state.count('Mines_29[right2]', player))
    fn("Mines_29[right2]", lambda state: state.count('Mines_29[right2]', player) or state.count('Mines_29[left1]', player) or state.count('Mines_29[right1]', player))
    fn("Mines_30[left1]", lambda state: state.count('Mines_30[left1]', player) or (state.count('Mines_30[right1]', player) and state.count('LEFTSUPERDASH', player)))
    fn("Mines_30[right1]", lambda state: state.count('Mines_30[right1]', player) or (state.count('Mines_30[left1]', player) and state.count('RIGHTSUPERDASH', player)))
    fn("Mines_31[left1]", lambda state: state.count('Mines_31[left1]', player))
    fn("Mines_32[bot1]", lambda state: state.count('Mines_32[bot1]', player))
    fn("Mines_33[right1]", lambda state: state.count('Mines_33[right1]', player) or (state.count('Mines_33[left1]', player) and state.count('LANTERN', player)))
    fn("Mines_33[left1]", lambda state: state.count('Mines_33[left1]', player) or (state.count('Mines_33[right1]', player) and state.count('LANTERN', player)))
    fn("Mines_34[bot1]", lambda state: state.count('Mines_34[bot1]', player))
    fn("Mines_34[bot2]", lambda state: state.count('Mines_34[bot2]', player) or (state.count('Mines_34[bot1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player))) and (state.count('WINGS', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) or (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Mines_34[left1]", lambda state: state.count('Mines_34[left1]', player) or ((state.count('Mines_34[bot1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player))) and (state.count('WINGS', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) or (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) and (state.count('LEFTSUPERDASH', player) or (state.count('WINGS', player) and state.count('LEFTDASH', player)))))
    fn("Mines_35[left1]", lambda state: state.count('Mines_35[left1]', player))
    fn("Mines_36[right1]", lambda state: state.count('Mines_36[right1]', player))
    fn("Mines_37[bot1]", lambda state: state.count('Mines_37[bot1]', player) or (state.count('Mines_37[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or ((state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and state.count('RIGHTCLAW', player) and state._hk_option(player, 'ObscureSkips') and state._hk_option(player, 'PreciseMovement') and state._hk_option(player, 'ComplexSkips')) or ((state.count('Dashmaster', player) and state.count('Sprintmaster', player) and (state.count('NOTCHES', player) > state._hk_notches(player, 30, 36)) and state.count('Can_Bench', player)) and state._hk_option(player, 'ObscureSkips')))))
    fn("Mines_37[top1]", lambda state: state.count('Mines_37[top1]', player) or (state.count('Mines_37[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Fungus3_04[left1]", lambda state: state.count('Fungus3_04[left1]', player) or state.count('Fungus3_04[left2]', player))
    fn("Fungus3_04[left2]", lambda state: state.count('Fungus3_04[left2]', player) or state.count('Fungus3_04[left1]', player))
    fn("Fungus3_04[right1]", lambda state: state.count('Fungus3_04[right1]', player) or state.count('Fungus3_04', player))
    fn("Fungus3_04[right2]", lambda state: state.count('Fungus3_04[right2]', player) or state.count('Fungus3_04', player))
    fn("Fungus3_05[left1]", lambda state: state.count('Fungus3_05[left1]', player) or state.count('Fungus3_05[right1]', player))
    fn("Fungus3_05[right1]", lambda state: state.count('Fungus3_05[right1]', player) or (state.count('Fungus3_05[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Fungus3_05[right2]", lambda state: state.count('Fungus3_05[right2]', player) or ((state.count('Fungus3_05[left1]', player) or state.count('Fungus3_05[right1]', player)) and (state.count('LEFTDASH', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player)) or ((state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and state.count('LEFTSUPERDASH', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player))))))
    fn("Fungus3_08[left1]", lambda state: state.count('Fungus3_08[left1]', player) or state.count('Fungus3_08[right1]', player) or state.count('Fungus3_08[top1]', player))
    fn("Fungus3_08[right1]", lambda state: state.count('Fungus3_08[right1]', player) or state.count('Fungus3_08[left1]', player) or state.count('Fungus3_08[top1]', player))
    fn("Fungus3_08[top1]", lambda state: state.count('Fungus3_08[top1]', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state._hk_option(player, 'PreciseMovement')))) or ((state.count('Fungus3_08[right1]', player) or state.count('Fungus3_08[left1]', player)) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and (state.count('RIGHTCLAW', player) or state._hk_option(player, 'EnemyPogos'))))))
    fn("Fungus3_10[top1]", lambda state: state.count('Fungus3_10[top1]', player) or (state.count('Fungus3_10[bot1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player)) and state.count("Defeated_West_Queen's_Gardens_Arena", player)))
    fn("Fungus3_10[bot1]", lambda state: state.count('Fungus3_10[bot1]', player) or (state.count('Fungus3_10[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player)) and state.count("Defeated_West_Queen's_Gardens_Arena", player)))
    fn("Fungus3_11[left1]", lambda state: state.count('Fungus3_11[left1]', player) or state.count('Fungus3_11', player))
    fn("Fungus3_11[left2]", lambda state: state.count('Fungus3_11[left2]', player) or state.count('Fungus3_11', player))
    fn("Fungus3_11[right1]", lambda state: state.count('Fungus3_11[right1]', player) or state.count('Fungus3_11', player))
    fn("Fungus3_13[left1]", lambda state: state.count('Fungus3_13[left1]', player) or (state.count('Fungus3_13', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('Fungus3_13[left3]', player) and state._hk_option(player, 'EnemyPogos')) or state.count('Fungus3_13[right1]', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) and state._hk_option(player, 'DifficultSkips') and (state.count('MASKSHARDS', player) > 15)))))
    fn("Fungus3_13[left2]", lambda state: state.count('Fungus3_13[left2]', player) or (state.count('Fungus3_13', player) and state.count('Opened_Gardens_Stag_Exit', player)))
    fn("Fungus3_13[left3]", lambda state: state.count('Fungus3_13[left3]', player) or (state.count('Fungus3_13', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('Fungus3_13[right1]', player) or state.count('Fungus3_13[left1]', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) and state._hk_option(player, 'DifficultSkips') and (state.count('MASKSHARDS', player) > 15)))))
    fn("Fungus3_13[bot1]", lambda state: state.count('Fungus3_13[bot1]', player) or state.count('Fungus3_13', player))
    fn("Fungus3_13[right1]", lambda state: state.count('Fungus3_13[right1]', player) or (state.count('Fungus3_13', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('Fungus3_13[left3]', player) and state._hk_option(player, 'EnemyPogos')) or state.count('Fungus3_13[left1]', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (True and state._hk_option(player, 'ShadeSkips') or ((state.count('DREAMNAIL', player) > 1 and state.count('ESSENCE', player)) and state._hk_option(player, 'ShadeSkips'))) and state._hk_option(player, 'DifficultSkips') and (state.count('MASKSHARDS', player) > 15)))))
    fn("Fungus3_21[right1]", lambda state: state.count('Fungus3_21[right1]', player) or (state.count('Fungus3_21[top1]', player) and state.count('RIGHTDASH', player)))
    fn("Fungus3_21[top1]", lambda state: state.count('Fungus3_21[top1]', player) or (state.count('Fungus3_21[right1]', player) and state.count('LEFTDASH', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player))))
    fn("Fungus3_22[right1]", lambda state: state.count('Fungus3_22[right1]', player) or (state.count('Fungus3_22', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Fungus3_22[left1]", lambda state: state.count('Fungus3_22[left1]', player) or state.count('Fungus3_22', player))
    fn("Fungus3_22[bot1]", lambda state: state.count('Fungus3_22[bot1]', player) or state.count('Fungus3_22', player))
    fn("Fungus3_23[right1]", lambda state: state.count('Fungus3_23[right1]', player) or (state.count('Fungus3_23[left1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) and state.count('Defeated_Traitor_Lord', player)))
    fn("Fungus3_23[left1]", lambda state: state.count('Fungus3_23[left1]', player) or (state.count('Fungus3_23[right1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('Defeated_Traitor_Lord', player)))
    fn("Fungus3_34[right1]", lambda state: state.count('Fungus3_34[right1]', player) or state.count('Fungus3_34', player))
    fn("Fungus3_34[left1]", lambda state: state.count('Fungus3_34[left1]', player) or (state.count('Fungus3_34', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTSUPERDASH', player) or state._hk_option(player, 'BackgroundObjectPogos') or state._hk_option(player, 'EnemyPogos'))))))
    fn("Fungus3_34[top1]", lambda state: state.count('Fungus3_34[top1]', player) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('Fungus3_34', player) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))))
    fn("Fungus3_39[right1]", lambda state: state.count('Fungus3_39[right1]', player) or state.count('Fungus3_39[left1]', player))
    fn("Fungus3_39[left1]", lambda state: state.count('Fungus3_39[left1]', player))
    fn("Fungus3_40[right1]", lambda state: state.count('Fungus3_40[right1]', player) or (state.count('Fungus3_40[top1]', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player)) or state._hk_option(player, 'EnemyPogos') or state._hk_option(player, 'ShadeSkips') or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True))) or (state.count('Can_Stag', player) and state.count("Queen's_Gardens_Stag", player)))
    fn("Fungus3_40[top1]", lambda state: state.count('Fungus3_40[top1]', player) or ((state.count('Fungus3_40[right1]', player) or (state.count('Can_Stag', player) and state.count("Queen's_Gardens_Stag", player))) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player))))
    fn("Fungus3_48[right1]", lambda state: state.count('Fungus3_48[right1]', player) or state.count('Fungus3_48[door1]', player))
    fn("Fungus3_48[right2]", lambda state: state.count('Fungus3_48[right2]', player) or (state.count('Fungus3_48[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Fungus3_48[door1]", lambda state: state.count('Fungus3_48[door1]', player) or state.count('Fungus3_48[right1]', player))
    fn("Fungus3_48[bot1]", lambda state: state.count('Fungus3_48[bot1]', player) or state.count('Fungus3_48[right2]', player))
    fn("Fungus3_49[right1]", lambda state: state.count('Fungus3_49[right1]', player))
    fn("Fungus3_50[right1]", lambda state: state.count('Fungus3_50[right1]', player))
    fn("Room_Queen[left1]", lambda state: state.count('Room_Queen[left1]', player))
    fn("Cliffs_01[right1]", lambda state: state.count('Cliffs_01[right1]', player) or (state.count('Cliffs_01', player) and ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos') or state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))) or state.count('WINGS', player))))
    fn("Cliffs_01[right2]", lambda state: state.count('Cliffs_01[right2]', player) or (state.count('Cliffs_01', player) and ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos') or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Cliffs_01[right1]', player))))
    fn("Cliffs_01[right3]", lambda state: state.count('Cliffs_01[right3]', player) or state.count('Cliffs_01', player))
    fn("Cliffs_01[right4]", lambda state: state.count('Cliffs_01[right4]', player) or (state.count('Cliffs_01', player) and ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos') or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Cliffs_01[right1]', player) or state.count('Cliffs_01[right2]', player))))
    fn("Cliffs_02[right1]", lambda state: state.count('Cliffs_02[right1]', player) or (state.count('Cliffs_02', player) and (state.count('RIGHTSUPERDASH', player) or (state.count('WINGS', player) and state.count('RIGHTDASH', player)))))
    fn("Cliffs_02[bot1]", lambda state: state.count('Cliffs_02[bot1]', player))
    fn("Cliffs_02[bot2]", lambda state: state.count('Cliffs_02[bot2]', player) or state.count('Cliffs_02', player) or (state.count('Cliffs_02[bot1]', player) and state.count('RIGHTCLAW', player)))
    fn("Cliffs_02[door1]", lambda state: state.count('Cliffs_02[door1]', player) or state.count('Cliffs_02', player))
    fn("Cliffs_02[left1]", lambda state: state.count('Cliffs_02[left1]', player) or state.count('Cliffs_02', player))
    fn("Cliffs_02[left2]", lambda state: state.count('Cliffs_02[left2]', player) or (state.count('Cliffs_02', player) and state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))
    fn("Cliffs_03[right1]", lambda state: state.count('Cliffs_03[right1]', player) or ((state.count('STAGS', player) > 8 or state.count('Stag_Nest_Stag', player)) and state.count('Can_Stag', player)))
    fn("Cliffs_04[right1]", lambda state: state.count('Cliffs_04[right1]', player) or (state.count('Cliffs_04[left1]', player) and (state._hk_option(player, 'DarkRooms') or state.count('LANTERN', player))))
    fn("Cliffs_04[left1]", lambda state: state.count('Cliffs_04[left1]', player) or (state.count('Cliffs_04[right1]', player) and (state._hk_option(player, 'DarkRooms') or state.count('LANTERN', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('QUAKE', player))))
    fn("Cliffs_05[left1]", lambda state: state.count('Cliffs_05[left1]', player))
    fn("Cliffs_06[left1]", lambda state: state.count('Cliffs_06[left1]', player))
    fn("Room_nailmaster[left1]", lambda state: state.count('Room_nailmaster[left1]', player))
    fn("White_Palace_01[left1]", lambda state: state.count('White_Palace_01[left1]', player) or state.count('White_Palace_01', player))
    fn("White_Palace_01[right1]", lambda state: state.count('White_Palace_01[right1]', player) or state.count('White_Palace_01', player))
    fn("White_Palace_01[top1]", lambda state: state.count('White_Palace_01[top1]', player) or (state.count('White_Palace_01', player) and state.count('Palace_Entrance_Lantern_Lit', player)))
    fn("White_Palace_02[left1]", lambda state: state.count('White_Palace_02[left1]', player))
    fn("White_Palace_03_hub[left1]", lambda state: state.count('White_Palace_03_hub[left1]', player))
    fn("White_Palace_03_hub[left2]", lambda state: state.count('White_Palace_03_hub[left2]', player) or state.count('White_Palace_03_hub', player))
    fn("White_Palace_03_hub[right1]", lambda state: state.count('White_Palace_03_hub[right1]', player) or (state.count('White_Palace_03_hub', player) and (state.count('RIGHTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('LEFTCLAW', player)) or state.count('WINGS', player))))
    fn("White_Palace_03_hub[top1]", lambda state: state.count('White_Palace_03_hub[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('White_Palace_03_hub', player) and state.count('Palace_Atrium_Gates_Opened', player) and (state.count('WINGS', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('LEFTSUPERDASH', player)))))
    fn("White_Palace_03_hub[bot1]", lambda state: state.count('White_Palace_03_hub[bot1]', player) or state.count('White_Palace_03_hub', player))
    fn("White_Palace_04[top1]", lambda state: state.count('White_Palace_04[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('White_Palace_04[right2]', player) and state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('WINGS', player)))
    fn("White_Palace_04[right2]", lambda state: state.count('White_Palace_04[right2]', player) or (state.count('White_Palace_04[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('WINGS', player)))
    fn("White_Palace_05[left1]", lambda state: state.count('White_Palace_05[left1]', player) or (state.count('White_Palace_05[right1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))
    fn("White_Palace_05[left2]", lambda state: state.count('White_Palace_05[left2]', player) or state.count('White_Palace_05[right2]', player))
    fn("White_Palace_05[right1]", lambda state: state.count('White_Palace_05[right1]', player) or (state.count('White_Palace_05[left1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))
    fn("White_Palace_05[right2]", lambda state: state.count('White_Palace_05[right2]', player) or state.count('White_Palace_05[left2]', player))
    fn("White_Palace_06[left1]", lambda state: state.count('White_Palace_06[left1]', player) or state.count('White_Palace_06[top1]', player) or state.count('White_Palace_06[bot1]', player) or state.count('Warp-Path_of_Pain_Complete', player))
    fn("White_Palace_06[top1]", lambda state: state.count('White_Palace_06[top1]', player) or ((state.count('White_Palace_06[left1]', player) or state.count('White_Palace_06[bot1]', player) or state.count('Warp-Path_of_Pain_Complete', player)) and (state.count('RIGHTCLAW', player) and (state.count('WINGS', player) or state.count('LEFTCLAW', player)))))
    fn("White_Palace_06[bot1]", lambda state: state.count('White_Palace_06[bot1]', player) or state.count('White_Palace_06[left1]', player) or state.count('White_Palace_06[top1]', player) or state.count('Warp-Path_of_Pain_Complete', player))
    fn("White_Palace_07[top1]", lambda state: state.count('White_Palace_07[top1]', player) or (state.count('White_Palace_07[bot1]', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) and state.count('WINGS', player)))
    fn("White_Palace_07[bot1]", lambda state: state.count('White_Palace_07[bot1]', player) or state.count('White_Palace_07[top1]', player))
    fn("White_Palace_08[left1]", lambda state: state.count('White_Palace_08[left1]', player) or state.count('White_Palace_08[right1]', player))
    fn("White_Palace_08[right1]", lambda state: state.count('White_Palace_08[right1]', player) or (state.count('White_Palace_08[left1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player)))
    fn("White_Palace_09[right1]", lambda state: state.count('White_Palace_09[right1]', player))
    fn("White_Palace_11[door2]", lambda state: (state.count('White_Palace_11[door2]', player) or state.count('Warp-Palace_Grounds_to_White_Palace', player)) and ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')))))
    fn("White_Palace_12[right1]", lambda state: state.count('White_Palace_12[right1]', player) or (state.count('White_Palace_12[bot1]', player) and (state._hk_option(player, 'SpikeTunnels') or state.count('RIGHTDASH', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player)) or state.count('WINGS', player)) and state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)))
    fn("White_Palace_12[bot1]", lambda state: state.count('White_Palace_12[bot1]', player))
    fn("White_Palace_13[right1]", lambda state: state.count('White_Palace_13[right1]', player) or ((state.count('White_Palace_13', player) or state.count('White_Palace_13[left1]', player)) and state.count('RIGHTSUPERDASH', player) and (state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTCLAW', player)))))
    fn("White_Palace_13[left1]", lambda state: state.count('White_Palace_13[left1]', player) or (state.count('White_Palace_13', player) and state.count('RIGHTCLAW', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))))
    fn("White_Palace_13[left2]", lambda state: state.count('White_Palace_13[left2]', player) or (state.count('White_Palace_13', player) and (state.count('LEFTCLAW', player) and state.count('WINGS', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('LEFTSUPERDASH', player)) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player)))))
    fn("White_Palace_13[left3]", lambda state: state.count('White_Palace_13[left3]', player) or (state.count('White_Palace_13', player) and state.count('WINGS', player)))
    fn("White_Palace_14[bot1]", lambda state: state.count('White_Palace_14[bot1]', player) or (state.count('White_Palace_14[right1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))
    fn("White_Palace_14[right1]", lambda state: state.count('White_Palace_14[right1]', player) or (state.count('White_Palace_14[bot1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))
    fn("White_Palace_15[left1]", lambda state: state.count('White_Palace_15[left1]', player) or state.count('White_Palace_15[right1]', player) or ((state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player))) and state.count('White_Palace_15[right2]', player)))
    fn("White_Palace_15[right1]", lambda state: state.count('White_Palace_15[right1]', player))
    fn("White_Palace_15[right2]", lambda state: state.count('White_Palace_15[right2]', player) or state.count('White_Palace_15[right1]', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('White_Palace_15[left1]', player)))
    fn("White_Palace_16[left1]", lambda state: state.count('White_Palace_16[left1]', player) or (state.count('White_Palace_16[left2]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player))))
    fn("White_Palace_16[left2]", lambda state: state.count('White_Palace_16[left2]', player) or state.count('White_Palace_16[left1]', player))
    fn("White_Palace_17[right1]", lambda state: state.count('White_Palace_17[right1]', player) or (state.count('White_Palace_17[bot1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))))
    fn("White_Palace_17[bot1]", lambda state: state.count('White_Palace_17[bot1]', player))
    fn("White_Palace_18[top1]", lambda state: state.count('White_Palace_18[top1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) or (state.count('White_Palace_18[right1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))))
    fn("White_Palace_18[right1]", lambda state: state.count('White_Palace_18[right1]', player) or (state.count('White_Palace_18[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))))
    fn("White_Palace_19[top1]", lambda state: state.count('White_Palace_19[top1]', player) or (state.count('White_Palace_19[left1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and state.count('WINGS', player)))
    fn("White_Palace_19[left1]", lambda state: state.count('White_Palace_19[left1]', player) or (state.count('White_Palace_19[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and state.count('WINGS', player)))
    fn("White_Palace_20[bot1]", lambda state: state.count('White_Palace_20[bot1]', player))

    # Locations
    
    fn("Sly", lambda state: state.count('Room_shop[left1]', player) and state.count('Rescued_Sly', player))
    fn("Sly_(Key)", lambda state: state.count('Room_shop[left1]', player) and state.count('Rescued_Sly', player) and state.count('SHOPKEY', player))
    fn("Iselda", lambda state: state.count('Room_mapper[left1]', player))
    fn("Salubra", lambda state: state.count('Room_Charm_Shop[left1]', player))
    fn("Leg_Eater", lambda state: state.count('Fungus2_26[left1]', player))
    fn("Grubfather", lambda state: state.count('Crossroads_38[right1]', player))
    fn("Seer", lambda state: state.count('RestingGrounds_07[right1]', player))
    fn("Lurien", lambda state: state.count('Ruins2_Watcher_Room[bot1]', player) and state.count('DREAMNAIL', player))
    fn("Monomon", lambda state: state.count('Fungus3_archive_02[top1]', player) and state.count('DREAMNAIL', player) and state.count('Defeated_Uumuu', player) and (state.count('ACID', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player))) or (state.count('LEFTSUPERDASH', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)))))
    fn("Herrah", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) and state.count('DREAMNAIL', player) and (state.count('RIGHTSLASH', player) or ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) or state.count('LEFTDASH', player) or state.count('Herrah', player) or ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("World_Sense", lambda state: state.count('Room_temple[left1]', player) and state.count('Opened_Black_Egg_Temple', player))
    fn("Mothwing_Cloak", lambda state: state.count('Fungus1_04[right1]', player) and state.count('Defeated_Hornet_1', player))
    fn("Mantis_Claw", lambda state: state.count('Fungus2_14', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or (state.count('LEFTSUPERDASH', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or state._hk_option(player, 'EnemyPogos')))
    fn("Crystal_Heart", lambda state: state.count('Mines_31[left1]', player) and (state.count('RIGHTSUPERDASH', player) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))))) or (state.count('WINGS', player) and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Monarch_Wings", lambda state: state.count('Abyss_21[right1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)))
    fn("Shade_Cloak", lambda state: (state.count('Abyss_10[left2]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) or (state.count('Abyss_10[left1]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))) and (state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or (state.count('RIGHTDASH', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'PreciseMovement') or state._hk_option(player, 'BackgroundObjectPogos')))) or ((state.count('Abyss_10[left2]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) or state.count('Abyss_10[left1]', player)) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player) or (state.count('WHITEFRAGMENT', player) > 2 and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state.count('SWIM', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player))))) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player)) or (state.count('LEFTCLAW', player) and state.count('RIGHTDASH', player)) or (state._hk_option(player, 'BackgroundObjectPogos') and state.count('RIGHTDASH', player)))))
    fn("Isma's_Tear", lambda state: state.count('Waterways_13[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player)))) or (state.count('Waterways_13[left2]', player) and (state.count('ACID', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) or (state._hk_option(player, 'AcidSkips') and state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) and (state.count('WINGS', player) or state.count('RIGHTCLAW', player))))))
    fn("Dream_Nail", lambda state: state.count('RestingGrounds_04[left1]', player) or state.count('RestingGrounds_04[right1]', player))
    fn("Vengeful_Spirit", lambda state: state.count('Crossroads_ShamanTemple[left1]', player))
    fn("Shade_Soul", lambda state: state.count('Ruins1_31b[right1]', player) or (state.count('Ruins1_31b[right2]', player) and state.count('Defeated_Elegant_Warrior', player)))
    fn("Desolate_Dive", lambda state: state.count('Ruins1_24[right1]', player) and state.count('Defeated_Soul_Master', player))
    fn("Descending_Dark", lambda state: state.count('Mines_35[left1]', player) and state.count('QUAKE', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'PreciseMovement') and (state.count('RIGHTDASH', player) or (state._hk_option(player, 'DifficultSkips') and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))))) or state.count('WINGS', player)))
    fn("Howling_Wraiths", lambda state: state.count('Room_Fungus_Shaman[left1]', player))
    fn("Abyss_Shriek", lambda state: state.count('Abyss_12[right1]', player) and state.count('SCREAM', player))
    fn("Cyclone_Slash", lambda state: state.count('Room_nailmaster[left1]', player))
    fn("Dash_Slash", lambda state: state.count('Room_nailmaster_03[left1]', player) and state.count('Ruins1_05b[top1]', player))
    fn("Great_Slash", lambda state: state.count('Room_nailmaster_02[left1]', player))
    fn("Focus", lambda state: state.count('Tutorial_01', player))
    fn("Baldur_Shell", lambda state: ((state.count('FIREBALL', player) or state.count('QUAKE', player) or (state.count('Glowing_Womb', player) and state.count('Can_Bench', player)) or ((state.count('Weaversong', player) and state.count('Can_Bench', player) or ((state.count('Spore_Shroom', player) and state.count('Can_Bench', player)) and state.count('FOCUS', player))) and state._hk_option(player, 'ObscureSkips')) or (state.count('CYCLONE', player) and state._hk_option(player, 'DifficultSkips'))) or ((state.count("Grubberfly's_Elegy", player) and state.count('Can_Bench', player)) and state.count('RIGHTSLASH', player)) or (state.count('Dash_Slash', player) and state.count('RIGHTDASH', player)) or (((state.count('Mark_of_Pride', player) and state.count('Can_Bench', player)) and state.count('RIGHTSLASH', player) or (state.count('RIGHTDASH', player) and state.count('RIGHTSLASH', player))) and state._hk_option(player, 'DifficultSkips'))) and (state.count('Fungus1_28[left1]', player) or (state.count('Fungus1_28[left2]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'ShadeSkips')))))
    fn("Fury_of_the_Fallen", lambda state: state.count('Tutorial_01', player))
    fn("Lifeblood_Core", lambda state: state.count('Abyss_08[right1]', player) and (state._hk_option(player, 'PreciseMovement') or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('WINGS', player))))
    fn("Defender's_Crest", lambda state: state.count('Waterways_05[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('Defeated_Dung_Defender', player))
    fn("Flukenest", lambda state: state.count('Waterways_12[right1]', player) and (state.count('SWIM', player) or state.count('LEFTSUPERDASH', player)) and state.count('Defeated_Flukemarm', player))
    fn("Thorns_of_Agony", lambda state: state.count('Fungus1_14[left1]', player) and (state.count('RIGHTDASH', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player))))
    fn("Mark_of_Pride", lambda state: state.count('Fungus2_31[left1]', player) and state.count('Defeated_Mantis_Lords', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'ShadeSkips'))))
    fn("Sharp_Shadow", lambda state: state.count('Deepnest_44[top1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player) or state.count('MASKSHARDS', player) > 15))
    fn("Spore_Shroom", lambda state: (state.count('Fungus2_20[left1]', player) or state.count('Fungus2_20[right1]', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and (state.count('ACID', player) or state.count('RIGHTDASH', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player))))
    fn("Soul_Catcher", lambda state: state.count('Crossroads_ShamanTemple[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or ((state.count('FIREBALL', player) or state.count('QUAKE', player) or (state.count('Glowing_Womb', player) and state.count('Can_Bench', player)) or ((state.count('Weaversong', player) and state.count('Can_Bench', player) or ((state.count('Spore_Shroom', player) and state.count('Can_Bench', player)) and state.count('FOCUS', player))) and state._hk_option(player, 'ObscureSkips')) or (state.count('CYCLONE', player) and state._hk_option(player, 'DifficultSkips'))) or ((state.count("Grubberfly's_Elegy", player) and state.count('Can_Bench', player)) and state.count('LEFTSLASH', player)) or (state.count('Dash_Slash', player) and state.count('LEFTDASH', player)) or (((state.count('Mark_of_Pride', player) and state.count('Can_Bench', player)) and state.count('LEFTSLASH', player) or (state.count('LEFTDASH', player) and state.count('LEFTSLASH', player))) and state._hk_option(player, 'DifficultSkips'))) or (state.count('WINGS', player) and state._hk_option(player, 'ShadeSkips'))) and (((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or (((state.count('FIREBALL', player) or state.count('QUAKE', player) or (state.count('Glowing_Womb', player) and state.count('Can_Bench', player)) or ((state.count('Weaversong', player) and state.count('Can_Bench', player) or ((state.count('Spore_Shroom', player) and state.count('Can_Bench', player)) and state.count('FOCUS', player))) and state._hk_option(player, 'ObscureSkips')) or (state.count('CYCLONE', player) and state._hk_option(player, 'DifficultSkips'))) or ((state.count("Grubberfly's_Elegy", player) and state.count('Can_Bench', player)) and state.count('LEFTSLASH', player)) or (state.count('Dash_Slash', player) and state.count('LEFTDASH', player)) or (((state.count('Mark_of_Pride', player) and state.count('Can_Bench', player)) and state.count('LEFTSLASH', player) or (state.count('LEFTDASH', player) and state.count('LEFTSLASH', player))) and state._hk_option(player, 'DifficultSkips'))) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player))) and state._hk_option(player, 'ObscureSkips'))))
    fn("Soul_Eater", lambda state: state.count('RestingGrounds_10', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Glowing_Womb", lambda state: state.count('Crossroads_22[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'BackgroundObjectPogos') or state._hk_option(player, 'EnemyPogos')))
    fn("Nailmaster's_Glory", lambda state: state.count('Room_shop[left1]', player) and state.count('Rescued_Sly', player) and state.count('Cyclone_Slash', player) and state.count('Dash_Slash', player) and state.count('Great_Slash', player))
    fn("Joni's_Blessing", lambda state: state.count('Cliffs_05[left1]', player))
    fn("Shape_of_Unn", lambda state: state.count('Fungus1_Slug[right1]', player) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and state._hk_option(player, 'AcidSkips'))))
    fn("Hiveblood", lambda state: state.count('Hive_05[left1]', player) and state.count('Defeated_Hive_Knight', player))
    fn("Dashmaster", lambda state: state.count('Fungus2_23', player))
    fn("Quick_Slash", lambda state: state.count('Deepnest_East_14b[top1]', player) or (state.count('Deepnest_East_14b[right1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips')))))
    fn("Spell_Twister", lambda state: state.count('Ruins1_30', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Deep_Focus", lambda state: state.count('Mines_36[right1]', player))
    fn("Queen_Fragment", lambda state: state.count('Room_Queen[left1]', player))
    fn("King_Fragment", lambda state: state.count('White_Palace_09[right1]', player) and state.count('LEFTSUPERDASH', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player)))
    fn("Void_Heart", lambda state: state.count('Abyss_15[top1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) and state.count('DREAMNAIL', player) and (state._hk_option(player, 'EnemyPogos') or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'ObscureSkips') and state.count('RIGHTCLAW', player)) or (state._hk_option(player, 'ObscureSkips') and state.count('LEFTCLAW', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)))))
    fn("Dreamshield", lambda state: state.count('RestingGrounds_17[right1]', player))
    fn("Weaversong", lambda state: state.count('Deepnest_45_v02[left1]', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos'))))
    fn("Grimmchild", lambda state: state.count('Nightmare_Lantern_Lit', player) and state.count('Grimm_Main_Tent[left1]', player))
    fn("Unbreakable_Heart", lambda state: state.count('Grimm_Divine[left1]', player) and (state.count('Fragile_Heart', player) and state.count('Can_Bench', player) and (state.count('Can_Repair_Fragile_Charms', player) or state.count('Fragile_Heart', player) > 1)))
    fn("Unbreakable_Greed", lambda state: state.count('Grimm_Divine[left1]', player) and (state.count('Fragile_Greed', player) and state.count('Can_Bench', player) and (state.count('Can_Repair_Fragile_Charms', player) or state.count('Fragile_Greed', player) > 1)))
    fn("Unbreakable_Strength", lambda state: state.count('Grimm_Divine[left1]', player) and (state.count('Fragile_Strength', player) and state.count('Can_Bench', player) and (state.count('Can_Repair_Fragile_Charms', player) or state.count('Fragile_Strength', player) > 1)))
    fn("City_Crest", lambda state: (state.count('Crossroads_10[left1]', player) or state.count('Crossroads_10[right1]', player)) and state.count('Defeated_False_Knight', player))
    fn("Tram_Pass", lambda state: state.count('Deepnest_26b[right2]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)))
    fn("Simple_Key-Basin", lambda state: state.count('Abyss_20[top1]', player) or state.count('Abyss_20[top2]', player))
    fn("Simple_Key-City", lambda state: (state.count('Ruins1_17[top1]', player) or state.count('Ruins1_17[right1]', player)) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Simple_Key-Lurker", lambda state: state.count('GG_Lurker[left1]', player) and (state.count('SWIM', player) or state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player))) and state.count('RIGHTCLAW', player) and state.count('Defeated_Pale_Lurker', player))
    fn("Shopkeeper's_Key", lambda state: state.count('Mines_11', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Love_Key", lambda state: state.count('Fungus3_39[left1]', player) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')) or (state._hk_option(player, 'AcidSkips') and state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state.count('WINGS', player) and (state.count('Dashmaster', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))))) or (state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'AcidSkips') and (state.count('Sharp_Shadow', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) and state.count('Can_Bench', player)) and state.count('WINGS', player))))
    fn("King's_Brand", lambda state: state.count('Room_Wyrm[right1]', player))
    fn("Godtuner", lambda state: (state.count('GG_Waterways[door1]', player) or (state.count('GG_Waterways[right1]', player) and (state.count('LEFTSUPERDASH', player) or state.count('SWIM', player)))) and state.count('SIMPLE', player) > 3)
    fn("Collector's_Map", lambda state: state.count('Ruins2_11[right1]', player) and (state.count('LEFTCLAW', player) or ((state.count('WINGS', player) or state.count('RIGHTDASH', player)) and state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips'))) and state.count('Defeated_Collector', player))
    fn("Mask_Shard-Brooding_Mawlek", lambda state: (state.count('Crossroads_09[left1]', player) or state.count('Crossroads_09[right1]', player)) and state.count('Defeated_Brooding_Mawlek', player))
    fn("Mask_Shard-Crossroads_Goam", lambda state: (state.count('Crossroads_13[left1]', player) or state.count('Crossroads_13[right1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Mask_Shard-Stone_Sanctuary", lambda state: state.count('Fungus1_36[left1]', player))
    fn("Mask_Shard-Queen's_Station", lambda state: state.count('Fungus2_01', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)) or state.count('WINGS', player) or (state.count('RIGHTDASH', player) and state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)) and state._hk_option(player, 'ObscureSkips'))))
    fn("Mask_Shard-Deepnest", lambda state: state.count('Fungus2_25[top2]', player))
    fn("Mask_Shard-Waterways", lambda state: state.count('Waterways_04b[left1]', player) and (state.count('SWIM', player) or (state.count('LEFTCLAW', player) and state.count('LEFTDASH', player))) or (state.count('Waterways_04b[right1]', player) and (state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state.count('LEFTSUPERDASH', player))) and (state.count('SWIM', player) or (state.count('LEFTCLAW', player) and state.count('LEFTDASH', player)))) or (state.count('Waterways_04b[right2]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Mask_Shard-Enraged_Guardian", lambda state: state.count('Mines_32[bot1]', player) and state.count('Defeated_Enraged_Guardian', player))
    fn("Mask_Shard-Hive", lambda state: state.count('Hive_04[left1]', player) or state.count('Hive_04[left2]', player) or state.count('Hive_04[right1]', player))
    fn("Mask_Shard-Grey_Mourner", lambda state: state.count('Room_Mansion[left1]', player) and state.count('Fungus3_49[right1]', player) and state.count('QUAKE', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and state.count('ACID', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and (((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player)) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player)))
    fn("Mask_Shard-Bretta", lambda state: state.count('Room_Bretta[right1]', player))
    fn("Vessel_Fragment-Greenpath", lambda state: state.count('Fungus1_13[right1]', player) and (state.count('LEFTCLAW', player) or (state._hk_option(player, 'DamageBoosts') and state.count('MASKSHARDS', player) > 7 and state.count('WINGS', player)) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)))) or False)
    fn("Vessel_Fragment-City", lambda state: state.count('Ruins2_09[bot1]', player) and state.count("Defeated_King's_Station_Arena", player))
    fn("Vessel_Fragment-Crossroads", lambda state: state.count('Crossroads_37[right1]', player))
    fn("Vessel_Fragment-Basin", lambda state: state.count('Abyss_04', player) and state.count('Ruins1_05b[top1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('Abyss_04[top1]', player) or state._hk_option(player, 'EnemyPogos')))))
    fn("Vessel_Fragment-Deepnest", lambda state: state.count('Deepnest_38[bot1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)))
    fn("Vessel_Fragment-Stag_Nest", lambda state: state.count('Cliffs_03[right1]', player) or ((state.count('STAGS', player) > 8 or state.count('Stag_Nest_Stag', player)) and state.count('Can_Stag', player)))
    fn("Charm_Notch-Shrumal_Ogres", lambda state: (state.count('Fungus2_05[bot1]', player) or state.count('Fungus2_05[right1]', player)) and state.count('Defeated_Shrumal_Ogre_Arena', player))
    fn("Charm_Notch-Fog_Canyon", lambda state: state.count('Fungus3_28[right1]', player) and (state.count('ACID', player) or (state._hk_option(player, 'AcidSkips') and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips') or (state.count('WINGS', player) and state.count('LEFTDASH', player)) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player) and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))) or (state._hk_option(player, 'DamageBoosts') and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player)) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos'))))
    fn("Charm_Notch-Colosseum", lambda state: state.count('Room_Colosseum_01[left1]', player) and state.count('Can_Replenish_Geo', player) and state.count('Defeated_Colosseum_1', player))
    fn("Charm_Notch-Grimm", lambda state: state.count('Grimm_Main_Tent[left1]', player) and state.count('Defeated_Grimm', player))
    fn("Pale_Ore-Basin", lambda state: state.count('Abyss_17[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or (state.count('LEFTDASH', player) and state._hk_option(player, 'ObscureSkips')) or (state._hk_option(player, 'DamageBoosts') and state.count('MASKSHARDS', player) > 7)))
    fn("Pale_Ore-Crystal_Peak", lambda state: state.count('Mines_34[bot1]', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player))) and (state.count('WINGS', player) or (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))))
    fn("Pale_Ore-Nosk", lambda state: state.count('Deepnest_32[left1]', player) and state.count('Defeated_Nosk', player))
    fn("Pale_Ore-Colosseum", lambda state: state.count('Room_Colosseum_01[left1]', player) and state.count('Can_Replenish_Geo', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or ((state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips')) and state.count('WINGS', player))) and state.count('Defeated_Colosseum_2', player))
    fn("Geo_Chest-False_Knight", lambda state: (state.count('Crossroads_10[left1]', player) or state.count('Crossroads_10[right1]', player)) and state.count('Defeated_False_Knight', player))
    fn("Geo_Chest-Soul_Master", lambda state: state.count('Ruins1_32[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))
    fn("Geo_Chest-Watcher_Knights", lambda state: state.count('Ruins2_03[top1]', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('Defeated_Watcher_Knights', player) and state.count('Ruins2_03[bot1]', player)))
    fn("Geo_Chest-Greenpath", lambda state: state.count('Fungus1_13[right1]', player))
    fn("Geo_Chest-Mantis_Lords", lambda state: state.count('Fungus2_31[left1]', player) and state.count('Defeated_Mantis_Lords', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Geo_Chest-Resting_Grounds", lambda state: state.count('RestingGrounds_10', player))
    fn("Geo_Chest-Crystal_Peak", lambda state: ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state.count("Grubberfly's_Elegy", player) and state.count('LEFTSLASH', player) and state._hk_option(player, 'ShadeSkips') and state._hk_option(player, 'ComplexSkips'))) and (state.count('Mines_37[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or ((state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and state.count('RIGHTCLAW', player) and state._hk_option(player, 'ObscureSkips') and state._hk_option(player, 'PreciseMovement')) or ((state.count('Dashmaster', player) and state.count('Sprintmaster', player) and (state.count('NOTCHES', player) > state._hk_notches(player, 30, 36)) and state.count('Can_Bench', player)) and state._hk_option(player, 'ObscureSkips'))) or state.count('Mines_37[bot1]', player)))
    fn("Geo_Chest-Weavers_Den", lambda state: state.count('Deepnest_45_v02[left1]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')))) and (state.count('LEFTDASH', player) and state.count('WINGS', player) or state.count('LEFTSUPERDASH', player)) and (state.count('LEFTDASH', player) or state._hk_option(player, 'SpikeTunnels')) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('LEFTSLASH', player) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player)))
    fn("Geo_Chest-Junk_Pit_1", lambda state: state.count('GG_Waterways[door1]', player) or (state.count('GG_Waterways[right1]', player) and (state.count('LEFTSUPERDASH', player) or state.count('SWIM', player))))
    fn("Geo_Chest-Junk_Pit_2", lambda state: state.count('GG_Waterways[door1]', player) or (state.count('GG_Waterways[right1]', player) and (state.count('LEFTSUPERDASH', player) or state.count('SWIM', player))))
    fn("Geo_Chest-Junk_Pit_3", lambda state: state.count('GG_Waterways[door1]', player) or (state.count('GG_Waterways[right1]', player) and (state.count('LEFTSUPERDASH', player) or state.count('SWIM', player))))
    fn("Geo_Chest-Junk_Pit_5", lambda state: state.count('GG_Waterways[door1]', player) or (state.count('GG_Waterways[right1]', player) and (state.count('LEFTSUPERDASH', player) or state.count('SWIM', player))))
    fn("Lumafly_Escape-Junk_Pit_Chest_4", lambda state: state.count('GG_Waterways[door1]', player) or (state.count('GG_Waterways[right1]', player) and (state.count('LEFTSUPERDASH', player) or state.count('SWIM', player))))
    fn("Rancid_Egg-Sheo", lambda state: state.count('Fungus1_15[right1]', player) or state.count('Fungus1_15[door1]', player))
    fn("Rancid_Egg-Fungal_Core", lambda state: state.count('Fungus2_29[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) or (state.count('Fungus2_29[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player))))
    fn("Rancid_Egg-Queen's_Gardens", lambda state: state.count('Fungus3_34', player) and (state.count('RIGHTCLAW', player) and state._hk_option(player, 'BackgroundObjectPogos') or state.count('WINGS', player) or (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))) or (state.count('Fungus3_34[left1]', player) and state.count('RIGHTDASH', player)))
    fn("Rancid_Egg-Blue_Lake", lambda state: state.count('Crossroads_50[left1]', player) and state.count('RIGHTSUPERDASH', player) or ((state.count('Crossroads_50[left1]', player) or state.count('Crossroads_50[right1]', player)) and state.count('SWIM', player) and state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))
    fn("Rancid_Egg-Crystal_Peak_Dive_Entrance", lambda state: state.count('Mines_01[left1]', player) and state.count('QUAKE', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player))) or (state.count('Mines_01[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))) or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'PreciseMovement')) or (state.count('LEFTCLAW', player) and state.count('WINGS', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player))))))
    fn("Rancid_Egg-Crystal_Peak_Dark_Room", lambda state: state.count('Mines_29[left1]', player) or state.count('Mines_29[right1]', player) or state.count('Mines_29[right2]', player))
    fn("Rancid_Egg-Crystal_Peak_Tall_Room", lambda state: state.count('Mines_20', player) and state.count('QUAKE', player))
    fn("Rancid_Egg-City_of_Tears_Left", lambda state: state.count('Ruins1_05c', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'BackgroundObjectPogos')))
    fn("Rancid_Egg-City_of_Tears_Pleasure_House", lambda state: state.count('Ruins_Elevator[left1]', player) or state.count('Ruins_Elevator[left2]', player))
    fn("Rancid_Egg-Beast's_Den", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Rancid_Egg-Dark_Deepnest", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_39[left1]', player) or state.count('Deepnest_39[top1]', player) or state.count('Deepnest_39[door1]', player) or (state.count('Deepnest_39[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player)) or ((state.count('WINGS', player) or state.count('RIGHTCLAW', player)) and state._hk_option(player, 'EnemyPogos'))))))
    fn("Rancid_Egg-Weaver's_Den", lambda state: state.count('Deepnest_45_v02[left1]', player) and (state._hk_option(player, 'SpikeTunnels') or state.count('LEFTDASH', player)))
    fn("Rancid_Egg-Near_Quick_Slash", lambda state: state.count('Deepnest_East_14[top2]', player) and state.count('QUAKE', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)))
    fn("Rancid_Egg-Upper_Kingdom's_Edge", lambda state: state.count('Deepnest_East_07', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Rancid_Egg-Waterways_East", lambda state: state.count('Waterways_07', player))
    fn("Rancid_Egg-Waterways_Main", lambda state: state.count('Waterways_02', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Waterways_02[top1]', player) or (state.count('QUAKE', player) and state.count('Waterways_02[top3]', player))))
    fn("Rancid_Egg-Waterways_West_Bluggsac", lambda state: state.count('Waterways_04[right1]', player) and (state.count('SWIM', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or state._hk_option(player, 'EnemyPogos')) or (((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')) and state.count('WINGS', player)) or (state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'FireballSkips') and state._hk_option(player, 'AcidSkips') and state.count('FIREBALL', player) and state.count('LEFTDASH', player) and state.count('RIGHTCLAW', player) and state.count('WINGS', player))) or (state.count('Waterways_04[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) and (state.count('SWIM', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or state._hk_option(player, 'EnemyPogos')) or (((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')) and state.count('WINGS', player)) or (state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'FireballSkips') and state._hk_option(player, 'AcidSkips') and state.count('FIREBALL', player) and state.count('LEFTDASH', player) and state.count('RIGHTCLAW', player) and state.count('WINGS', player)))) or (state.count('Waterways_04[left2]', player) and (state.count('SWIM', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or state._hk_option(player, 'EnemyPogos')) or (((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')) and state.count('WINGS', player)))))
    fn("Rancid_Egg-Waterways_West_Pickup", lambda state: state.count('Waterways_04b[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips'))))
    fn("Rancid_Egg-Tuk_Defender's_Crest", lambda state: state.count('Waterways_03[left1]', player) and (state.count("Defender's_Crest", player) and state.count('Can_Bench', player)))
    fn("Wanderer's_Journal-Cliffs", lambda state: state.count('Cliffs_01[right1]', player) or state.count('Cliffs_01[right2]', player) or (state.count('Cliffs_01[right3]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos')))) or state.count('Cliffs_01[right4]', player))
    fn("Wanderer's_Journal-Greenpath_Stag", lambda state: state.count('Fungus1_22[left1]', player) or state.count('Fungus1_22[top1]', player))
    fn("Wanderer's_Journal-Greenpath_Lower", lambda state: state.count('Fungus1_11', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))
    fn("Wanderer's_Journal-Fungal_Wastes_Thorns_Gauntlet", lambda state: state.count('Fungus2_04', player) and (state.count('LEFTCLAW', player) and state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('WINGS', player) or state.count('RIGHTDASH', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player)) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))))))
    fn("Wanderer's_Journal-Above_Mantis_Village", lambda state: state.count('Fungus2_17', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))
    fn("Wanderer's_Journal-Crystal_Peak_Crawlers", lambda state: state.count('Mines_20', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Wanderer's_Journal-Resting_Grounds_Catacombs", lambda state: state.count('RestingGrounds_10', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Wanderer's_Journal-King's_Station", lambda state: state.count('Ruins2_05[bot1]', player) and state._hk_option(player, 'EnemyPogos') or state.count('Ruins2_05[left1]', player) or state.count('Ruins2_05[top1]', player))
    fn("Wanderer's_Journal-Pleasure_House", lambda state: state.count('Ruins_Elevator[left1]', player) or state.count('Ruins_Elevator[left2]', player))
    fn("Wanderer's_Journal-City_Storerooms", lambda state: state.count('Ruins1_28', player) or state.count('Ruins1_28[left1]', player))
    fn("Wanderer's_Journal-Ancient_Basin", lambda state: (state.count('Abyss_02[right1]', player) or (state.count('Abyss_02[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)))) and (state.count('RIGHTDASH', player) or state._hk_option(player, 'SpikeTunnels')))
    fn("Wanderer's_Journal-Kingdom's_Edge_Entrance", lambda state: state.count('Deepnest_East_07[bot1]', player))
    fn("Wanderer's_Journal-Kingdom's_Edge_Camp", lambda state: state.count('Deepnest_East_13[bot1]', player))
    fn("Wanderer's_Journal-Kingdom's_Edge_Requires_Dive", lambda state: state.count('Deepnest_East_18', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Deepnest_East_18[top1]', player)) and state.count('QUAKE', player))
    fn("Hallownest_Seal-Crossroads_Well", lambda state: (state.count('Crossroads_01[left1]', player) or state.count('Crossroads_01[top1]', player) or state.count('Crossroads_01[right1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and (state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15 or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) or (state.count('LEFTDASH', player) or state.count('RIGHTDASH', player))) or (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player)))) or ((state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player)) and (state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))))))
    fn("Hallownest_Seal-Greenpath", lambda state: (state.count('Fungus1_10[left1]', player) or state.count('Fungus1_10[top1]', player) or state.count('Fungus1_10[right1]', player)) and (state.count('ACID', player) or (state.count('WINGS', player) and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))) or (state.count('LEFTDASH', player) and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)) or (state.count('Dashmaster', player) and state._hk_option(player, 'ObscureSkips')) or state.count('WINGS', player) or state.count('LEFTCLAW', player))) or state.count('LEFTSUPERDASH', player)))
    fn("Hallownest_Seal-Fog_Canyon_West", lambda state: state.count('Fungus3_30[bot1]', player))
    fn("Hallownest_Seal-Fog_Canyon_East", lambda state: (state.count('Fungus3_26', player) and (state.count('Fungus3_26[top1]', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or (state.count('RIGHTDASH', player) and (state.count('LEFTDASH', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))) and state._hk_option(player, 'EnemyPogos')))) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('LEFTSUPERDASH', player) or state.count('LEFTDASH', player) or (state._hk_option(player, 'DamageBoosts') and state.count('MASKSHARDS', player) > 7)))
    fn("Hallownest_Seal-Queen's_Station", lambda state: state.count('Fungus2_34[right1]', player) and state.count('WINGS', player))
    fn("Hallownest_Seal-Fungal_Wastes_Sporgs", lambda state: state.count('Fungus2_03', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')) and (state.count('RIGHTDASH', player) or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('LEFTCLAW', player) or state._hk_option(player, 'PreciseMovement') or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips'))))
    fn("Hallownest_Seal-Mantis_Lords", lambda state: state.count('Fungus2_31[left1]', player) and state.count('Defeated_Mantis_Lords', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Hallownest_Seal-Resting_Grounds_Catacombs", lambda state: state.count('RestingGrounds_10', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Hallownest_Seal-King's_Station", lambda state: state.count('Ruins2_08[left1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTDASH', player))))
    fn("Hallownest_Seal-City_Rafters", lambda state: state.count('Ruins1_03', player))
    fn("Hallownest_Seal-Soul_Sanctum", lambda state: state.count('Ruins1_32[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('QUAKE', player))
    fn("Hallownest_Seal-Watcher_Knight", lambda state: (state.count('Ruins2_03[top1]', player) or (state.count('Ruins2_03[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('Defeated_Watcher_Knights', player))) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player)) or (state.count('RIGHTDASH', player) and state._hk_option(player, 'BackgroundObjectPogos'))))
    fn("Hallownest_Seal-Deepnest_By_Mantis_Lords", lambda state: state.count('Deepnest_16[bot1]', player) and (state.count('LEFTCLAW', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player))))
    fn("Hallownest_Seal-Beast's_Den", lambda state: state.count('Deepnest_Spider_Town[left1]', player))
    fn("Hallownest_Seal-Queen's_Gardens", lambda state: (state.count('Fungus3_48[right2]', player) or state.count('Fungus3_48[bot1]', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips'))))
    fn("King's_Idol-Cliffs", lambda state: state.count('Cliffs_01', player))
    fn("King's_Idol-Crystal_Peak", lambda state: (state.count('Mines_30[right1]', player) or (state.count('RIGHTSUPERDASH', player) and state.count('Mines_30[left1]', player))) and (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state._hk_option(player, 'BackgroundObjectPogos') or state.count('WINGS', player)))
    fn("King's_Idol-Glade_of_Hope", lambda state: state.count('RestingGrounds_08[left1]', player) and (state.count('SWIM', player) and state.count('LEFTCLAW', player) or (state.count('SWIM', player) and state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('RIGHTSUPERDASH', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player))) or (state.count('RIGHTSUPERDASH', player) and state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state.count('RIGHTDASH', player)) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state._hk_option(player, 'DifficultSkips') and (state.count('SWIM', player) or state.count('RIGHTSUPERDASH', player)))))
    fn("King's_Idol-Dung_Defender", lambda state: state.count('Waterways_15[top1]', player))
    fn("King's_Idol-Great_Hopper", lambda state: state.count('Deepnest_East_08[top1]', player) or state.count('Deepnest_East_08[right1]', player))
    fn("King's_Idol-Pale_Lurker", lambda state: state.count('GG_Lurker[left1]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips'))))
    fn("King's_Idol-Deepnest", lambda state: state.count('Deepnest_33[top1]', player))
    fn("Arcane_Egg-Lifeblood_Core", lambda state: state.count('Abyss_08[right1]', player) and (state._hk_option(player, 'PreciseMovement') or state.count('LEFTDASH', player)) and (state.count('RIGHTSUPERDASH', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player))))
    fn("Arcane_Egg-Shade_Cloak", lambda state: state.count('Abyss_10[left2]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) or (state.count('Abyss_10[left1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player) or (state.count('WHITEFRAGMENT', player) > 2 and (state.count('SWIM', player) or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))))
    fn("Arcane_Egg-Birthplace", lambda state: state.count('Abyss_15[top1]', player))
    fn("Whispering_Root-Crossroads", lambda state: state.count('Crossroads_07', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))) and (state.count('WINGS', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) or (state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player))) and state.count('DREAMNAIL', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Whispering_Root-Greenpath", lambda state: state.count('Fungus1_13[left1]', player) and state.count('Fungus1_13[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or (state.count('MASKSHARDS', player) > 7 and state._hk_option(player, 'DamageBoosts'))))) and state.count('DREAMNAIL', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('Great_Slash', player) or state.count('Cyclone_Slash', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('Dash_Slash', player))))
    fn("Whispering_Root-Leg_Eater", lambda state: (state.count('Fungus2_33[left1]', player) or state.count('Fungus2_33[right1]', player)) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-Mantis_Village", lambda state: state.count('Fungus2_17', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-Deepnest", lambda state: state.count('Deepnest_39', player) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos'))) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-Queens_Gardens", lambda state: state.count('Fungus3_11', player) and state.count('LEFTCLAW', player) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-Kingdoms_Edge", lambda state: state.count('Deepnest_East_07', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-Waterways", lambda state: state.count('Abyss_01[left3]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-City", lambda state: (state.count('Ruins1_17[top1]', player) or state.count('Ruins1_17[right1]', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) or state._hk_option(player, 'EnemyPogos')) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-Resting_Grounds", lambda state: state.count('RestingGrounds_05', player) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-Spirits_Glade", lambda state: state.count('RestingGrounds_08[left1]', player) and state.count('DREAMNAIL', player) and (state.count('WINGS', player) and (state.count('SWIM', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('RIGHTDASH', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('RIGHTSUPERDASH', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))) or (state.count('LEFTCLAW', player) and state.count('SWIM', player) and state.count('RIGHTDASH', player)) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('RIGHTSUPERDASH', player) and state.count('RIGHTDASH', player)) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state._hk_option(player, 'DifficultSkips') and (state.count('SWIM', player) or state.count('RIGHTSUPERDASH', player)))))
    fn("Whispering_Root-Crystal_Peak", lambda state: (state.count('Mines_23[left1]', player) or state.count('Mines_23[top1]', player) or state.count('Mines_23[right1]', player) or state.count('Mines_23[right2]', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or state.count('WINGS', player)) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-Howling_Cliffs", lambda state: state.count('Cliffs_01', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))) or state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos'))) and state.count('DREAMNAIL', player))
    fn("Whispering_Root-Ancestral_Mound", lambda state: state.count('Crossroads_ShamanTemple[left1]', player) and (state.count('WINGS', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state._hk_option(player, 'EnemyPogos'))) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or ((state.count('FIREBALL', player) or state.count('QUAKE', player) or (state.count('Glowing_Womb', player) and state.count('Can_Bench', player)) or ((state.count('Weaversong', player) and state.count('Can_Bench', player) or ((state.count('Spore_Shroom', player) and state.count('Can_Bench', player)) and state.count('FOCUS', player))) and state._hk_option(player, 'ObscureSkips')) or (state.count('CYCLONE', player) and state._hk_option(player, 'DifficultSkips'))) or ((state.count("Grubberfly's_Elegy", player) and state.count('Can_Bench', player)) and state.count('LEFTSLASH', player)) or (state.count('Dash_Slash', player) and state.count('LEFTDASH', player)) or (((state.count('Mark_of_Pride', player) and state.count('Can_Bench', player)) and state.count('LEFTSLASH', player) or (state.count('LEFTDASH', player) and state.count('LEFTSLASH', player))) and state._hk_option(player, 'DifficultSkips')))) and state.count('DREAMNAIL', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Whispering_Root-Hive", lambda state: (state.count('Hive_02[left1]', player) or state.count('Hive_02[left2]', player) or state.count('Hive_02[left3]', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTCLAW', player))) and state.count('DREAMNAIL', player))
    fn("Boss_Essence-Elder_Hu", lambda state: state.count('Fungus2_32[left1]', player) and state.count('DREAMNAIL', player) and state.count('Defeated_Elder_Hu', player))
    fn("Boss_Essence-Xero", lambda state: state.count('RestingGrounds_02', player) and state.count('DREAMNAIL', player) and state.count('Defeated_Xero', player))
    fn("Boss_Essence-Gorb", lambda state: state.count('Cliffs_02', player) and state.count('DREAMNAIL', player) and state.count('Defeated_Gorb', player))
    fn("Boss_Essence-Marmu", lambda state: (state.count('Fungus3_40[top1]', player) or (state.count('Fungus3_40[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player)))) and state.count('DREAMNAIL', player) and state.count('Defeated_Marmu', player))
    fn("Boss_Essence-No_Eyes", lambda state: (state.count('Fungus1_35[left1]', player) or state.count('Fungus1_35[right1]', player)) and state.count('LANTERN', player) and state.count('DREAMNAIL', player) and state.count('Defeated_No_Eyes', player))
    fn("Boss_Essence-Galien", lambda state: state.count('Deepnest_40[right1]', player) and state.count('DREAMNAIL', player) and state.count('Defeated_Galien', player))
    fn("Boss_Essence-Markoth", lambda state: state.count('Deepnest_East_10[left1]', player) and state.count('DREAMNAIL', player) and state.count('Defeated_Markoth', player))
    fn("Boss_Essence-Failed_Champion", lambda state: (state.count('Crossroads_10[left1]', player) or state.count('Crossroads_10[right1]', player)) and state.count('Defeated_False_Knight', player) and state.count('Defeated_Failed_Champion', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player)))) and state.count('DREAMNAIL', player))
    fn("Boss_Essence-Soul_Tyrant", lambda state: (state.count('Ruins1_24[right1]', player) or state.count('Ruins1_24[left1]', player)) and state.count('Defeated_Soul_Master', player) and state.count('Defeated_Soul_Tyrant', player) and state.count('DREAMNAIL', player))
    fn("Boss_Essence-Lost_Kin", lambda state: state.count('Abyss_19[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and state.count('DREAMNAIL', player) and state.count('Defeated_Broken_Vessel', player) and state.count('Defeated_Lost_Kin', player))
    fn("Boss_Essence-White_Defender", lambda state: state.count('Waterways_15[top1]', player) and state.count('DREAMNAIL', player) and (state.count('DREAMER', player) > 2) and state.count('Defeated_Dung_Defender', player) and state.count('Defeated_White_Defender', player))
    fn("Boss_Essence-Grey_Prince_Zote", lambda state: state.count('Room_Bretta[right1]', player) and state.count('DREAMNAIL', player) and state.count('WINGS', player) and state.count('Rescued_Bretta', player) and state.count('Defeated_Colosseum_Zote', player) and state.count('Defeated_Grey_Prince_Zote', player))
    fn("Grub-Crossroads_Acid", lambda state: state.count('Crossroads_35[right1]', player) or (state.count('Crossroads_35[bot1]', player) and state.count('RIGHTCLAW', player) and (state.count('ACID', player) or ((state.count('LEFTSUPERDASH', player) and state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTDASH', player))) and state._hk_option(player, 'AcidSkips')))))
    fn("Grub-Crossroads_Center", lambda state: (state.count('Crossroads_05[left1]', player) or state.count('Crossroads_05[right1]', player)) and (state._hk_option(player, 'EnemyPogos') or state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player)))
    fn("Grub-Crossroads_Stag", lambda state: state.count('Crossroads_03', player))
    fn("Grub-Crossroads_Spike", lambda state: state.count('Crossroads_31[right1]', player))
    fn("Grub-Crossroads_Guarded", lambda state: state.count('Crossroads_48[left1]', player))
    fn("Grub-Greenpath_Cornifer", lambda state: (state.count('Fungus1_06[left1]', player) or state.count('Fungus1_06[bot1]', player)) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('Great_Slash', player) or state.count('Cyclone_Slash', player) or state.count('RIGHTDASH', player) or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Grub-Greenpath_Journal", lambda state: (state.count('Fungus1_07[left1]', player) or state.count('Fungus1_07[top1]', player) or state.count('Fungus1_07[right1]', player)) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('Great_Slash', player) or state.count('Cyclone_Slash', player) or state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state.count('ACID', player) and (state.count('RIGHTCLAW', player) or state._hk_option(player, 'EnemyPogos'))) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DifficultSkips'))))
    fn("Grub-Greenpath_MMC", lambda state: state.count('Fungus1_13[right1]', player))
    fn("Grub-Greenpath_Stag", lambda state: state.count('Fungus1_21', player))
    fn("Grub-Fog_Canyon", lambda state: state.count('LEFTSUPERDASH', player) and state.count('Fungus3_47', player))
    fn("Grub-Fungal_Bouncy", lambda state: state.count('Fungus2_18[right1]', player))
    fn("Grub-Fungal_Spore_Shroom", lambda state: state.count('Fungus2_20[left1]', player) or state.count('Fungus2_20[right1]', player))
    fn("Grub-Deepnest_Mimic", lambda state: state.count('Deepnest_36[left1]', player))
    fn("Grub-Deepnest_Nosk", lambda state: state.count('Deepnest_31[right1]', player) or (state.count('Deepnest_31[right2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Grub-Deepnest_Spike", lambda state: state.count('Deepnest_03', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('Deepnest_03[top1]', player))))
    fn("Grub-Dark_Deepnest", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_39', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')))) or state.count('Deepnest_39[top1]', player) or (state.count('Deepnest_39[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTDASH', player)))))
    fn("Grub-Beast's_Den", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Grub-Kingdom's_Edge_Oro", lambda state: ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) and (state.count('Deepnest_East_14[top2]', player) and state.count('QUAKE', player) and (state._hk_option(player, 'PreciseMovement') or state.count('RIGHTDASH', player)) or (state.count('Deepnest_East_14[left1]', player) and (state._hk_option(player, 'SpikeTunnels') or state.count('RIGHTDASH', player))) or state.count('Deepnest_East_14[door1]', player)))
    fn("Grub-Kingdom's_Edge_Camp", lambda state: state.count('Deepnest_East_11', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or (state._hk_option(player, 'PreciseMovement') and state.count('LEFTDASH', player))))
    fn("Grub-Hive_External", lambda state: state.count('Hive_03[top1]', player))
    fn("Grub-Hive_Internal", lambda state: (state.count('Hive_04[left1]', player) or state.count('Hive_04[right1]', player)) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DifficultSkips'))))
    fn("Grub-Basin_Requires_Wings", lambda state: state.count('Abyss_19', player) and state.count('WINGS', player) and (state.count('RIGHTCLAW', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and state._hk_option(player, 'EnemyPogos'))))
    fn("Grub-Basin_Requires_Dive", lambda state: state.count('Abyss_17[top1]', player) and state.count('QUAKE', player))
    fn("Grub-Waterways_Main", lambda state: state.count('Waterways_04[right1]', player) and (state.count('RIGHTCLAW', player) or state.count('SWIM', player) or state.count('CYCLONE', player) or state.count('FIREBALL', player) or state.count('SCREAM', player)) or (state.count('Waterways_04[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) and (state.count('RIGHTCLAW', player) or state.count('SWIM', player) or state.count('CYCLONE', player) or state.count('FIREBALL', player) or state.count('SCREAM', player))) or (state.count('Waterways_04[left2]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Grub-Isma's_Grove", lambda state: (state.count('Waterways_13[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos'))) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player)))) or (state.count('Waterways_13[left2]', player) and (state.count('RIGHTCLAW', player) or ((state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) and state.count('LEFTCLAW', player))))) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips'))))
    fn("Grub-Waterways_Requires_Tram", lambda state: state.count('Waterways_14[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('RIGHTSUPERDASH', player) and state.count('WINGS', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos'))) or (state.count('ACID', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player))))) or (state.count('Waterways_14[bot2]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))) and (state.count('LEFTSUPERDASH', player) and state.count('WINGS', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos'))) or (state.count('ACID', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player)))))))
    fn("Grub-City_of_Tears_Left", lambda state: state.count('Ruins1_05', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and (state.count('Ruins1_05[top1]', player) or state.count('Ruins1_05[right1]', player)))))
    fn("Grub-Soul_Sanctum", lambda state: state.count('Ruins1_32[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('QUAKE', player))
    fn("Grub-Watcher's_Spire", lambda state: state.count('Ruins2_03[bot2]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))))
    fn("Grub-City_of_Tears_Guarded", lambda state: state.count('Ruins_House_01[left1]', player))
    fn("Grub-King's_Station", lambda state: state.count('Ruins2_07[left1]', player) and (state.count('SWIM', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips'))) or (state.count('Ruins2_07[top1]', player) and (state.count('LEFTDASH', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement')))) or (state.count('Ruins2_07[right1]', player) and (state.count('LEFTDASH', player) or state.count('SWIM', player) or ((state.count('RIGHTCLAW', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player))) and state.count('LEFTSUPERDASH', player)) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player) and state._hk_option(player, 'PreciseMovement')))))
    fn("Grub-Resting_Grounds", lambda state: state.count('RestingGrounds_10', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Grub-Crystal_Peak_Below_Chest", lambda state: state.count('Mines_04[top1]', player))
    fn("Grub-Crystallized_Mound", lambda state: state.count('Mines_35[left1]', player) and state.count('QUAKE', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'PreciseMovement') and (state.count('RIGHTDASH', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))))) or state.count('WINGS', player)))
    fn("Grub-Crystal_Peak_Spike", lambda state: state.count('Mines_03', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) or (state.count('WINGS', player) and state._hk_option(player, 'SpikeTunnels') and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))))))
    fn("Grub-Crystal_Peak_Mimic", lambda state: state.count('Mines_16[top1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)))
    fn("Grub-Crystal_Peak_Crushers", lambda state: (state.count('Mines_19[left1]', player) and state.count('Mines_19[right1]', player)) and state.count('LEFTDASH', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Grub-Crystal_Heart", lambda state: state.count('Mines_31[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('RIGHTDASH', player) and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))))))
    fn("Grub-Hallownest_Crown", lambda state: state.count('Mines_24[left1]', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'SpikeTunnels')))
    fn("Grub-Howling_Cliffs", lambda state: state.count('Fungus1_28[left1]', player) or (state.count('Fungus1_28[left2]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) and ((state.count('FIREBALL', player) or state.count('QUAKE', player) or (state.count('Glowing_Womb', player) and state.count('Can_Bench', player)) or ((state.count('Weaversong', player) and state.count('Can_Bench', player) or ((state.count('Spore_Shroom', player) and state.count('Can_Bench', player)) and state.count('FOCUS', player))) and state._hk_option(player, 'ObscureSkips')) or (state.count('CYCLONE', player) and state._hk_option(player, 'DifficultSkips'))) or ((state.count("Grubberfly's_Elegy", player) and state.count('Can_Bench', player)) and state.count('RIGHTSLASH', player)) or (state.count('Dash_Slash', player) and state.count('RIGHTDASH', player)) or (((state.count('Mark_of_Pride', player) and state.count('Can_Bench', player)) and state.count('RIGHTSLASH', player) or (state.count('RIGHTDASH', player) and state.count('RIGHTSLASH', player))) and state._hk_option(player, 'DifficultSkips'))) or (state.count('WINGS', player) and state.count('LEFTCLAW', player)))))
    fn("Grub-Queen's_Gardens_Stag", lambda state: state.count('Fungus3_10[bot1]', player) and (state.count('WINGS', player) or (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))) and state.count("Defeated_West_Queen's_Gardens_Arena", player) or state.count('Fungus3_10[top1]', player))
    fn("Grub-Queen's_Gardens_Marmu", lambda state: (state.count('Fungus3_48[bot1]', player) or state.count('Fungus3_48[right2]', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))))
    fn("Grub-Queen's_Gardens_Top", lambda state: state.count('Fungus3_22', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('LEFTSUPERDASH', player) and (state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player)) or (state._hk_option(player, 'ComplexSkips') and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and state.count('WINGS', player) and state.count('LEFTCLAW', player) and (state.count('RIGHTCLAW', player) and (state.count('Sharp_Shadow', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player)) and state.count('Can_Bench', player)) or (state.count('RIGHTCLAW', player) and state.count('LEFTDASH', player) and state._hk_option(player, 'DifficultSkips')) or ((state.count('Sharp_Shadow', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('LEFTDASH', player)) and state.count('Can_Bench', player)) and state._hk_option(player, 'DifficultSkips'))))))
    fn("Grub-Collector_1", lambda state: state.count('Ruins2_11[right1]', player) and (state.count('LEFTCLAW', player) or ((state.count('WINGS', player) or state.count('RIGHTDASH', player)) and state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips'))) and state.count('Defeated_Collector', player))
    fn("Grub-Collector_2", lambda state: state.count('Ruins2_11[right1]', player) and (state.count('LEFTCLAW', player) or ((state.count('WINGS', player) or state.count('RIGHTDASH', player)) and state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips'))) and state.count('Defeated_Collector', player))
    fn("Grub-Collector_3", lambda state: state.count('Ruins2_11[right1]', player) and (state.count('LEFTCLAW', player) or ((state.count('WINGS', player) or state.count('RIGHTDASH', player)) and state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips'))) and state.count('Defeated_Collector', player))
    fn("Mimic_Grub-Deepnest_1", lambda state: state.count('Deepnest_36[left1]', player))
    fn("Mimic_Grub-Deepnest_2", lambda state: state.count('Deepnest_36[left1]', player))
    fn("Mimic_Grub-Deepnest_3", lambda state: state.count('Deepnest_36[left1]', player))
    fn("Mimic_Grub-Crystal_Peak", lambda state: state.count('Mines_16[top1]', player))
    fn("Crossroads_Map", lambda state: state.count('Crossroads_33', player))
    fn("Greenpath_Map", lambda state: state.count('Fungus1_06[left1]', player) or state.count('Fungus1_06[bot1]', player))
    fn("Fog_Canyon_Map", lambda state: (state.count('Fungus3_25[left1]', player) and ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) or state.count('Fungus3_25[right1]', player)) and (state.count('LEFTCLAW', player) and state.count('LEFTDASH', player) and state._hk_option(player, 'EnemyPogos') or state.count('WINGS', player)) or (False and state.count('LEFTDASH', player) and state.count('LEFTCLAW', player)))
    fn("Fungal_Wastes_Map", lambda state: state.count('Fungus2_18[top1]', player) or state.count('Fungus2_18[right1]', player) or (state.count('Fungus2_18[bot1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player))))
    fn("Deepnest_Map-Upper", lambda state: state.count('Deepnest_01b', player))
    fn("Deepnest_Map-Right", lambda state: (state.count('Fungus2_25[top1]', player) or state.count('Fungus2_25[top2]', player) or state.count('Fungus2_25[right1]', player)) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))
    fn("Ancient_Basin_Map", lambda state: state.count('Abyss_04[top1]', player) and (state.count('RIGHTDASH', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'PreciseMovement')) or ((state.count('Abyss_04[left1]', player) or state.count('Abyss_04[right1]', player) or state.count('Abyss_04[bot1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Kingdom's_Edge_Map", lambda state: state.count('Deepnest_East_03', player))
    fn("City_of_Tears_Map", lambda state: state.count('Ruins1_31', player) or state.count('Ruins1_31[bot1]', player) or state.count('Ruins1_31[left1]', player))
    fn("Royal_Waterways_Map", lambda state: (state.count('Waterways_09[left1]', player) or state.count('Waterways_09[right1]', player)) and (state.count('LEFTCLAW', player) or ((state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)) and state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or False)
    fn("Howling_Cliffs_Map", lambda state: state.count('Cliffs_01', player) and ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos') or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Cliffs_01[right1]', player) or state.count('Cliffs_01[right2]', player)))
    fn("Crystal_Peak_Map", lambda state: state.count('Mines_30[right1]', player) or (state.count('RIGHTSUPERDASH', player) and state.count('Mines_30[left1]', player)))
    fn("Queen's_Gardens_Map", lambda state: state.count('Fungus1_24[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Resting_Grounds_Map", lambda state: state.count('RestingGrounds_09[left1]', player) or (state.count('Resting_Grounds_Stag', player) and state.count('Can_Stag', player)))
    fn("Dirtmouth_Stag", lambda state: state.count('Room_Town_Stag_Station[left1]', player) or state.count('Can_Stag', player))
    fn("Crossroads_Stag", lambda state: state.count('Crossroads_47[right1]', player) or (state.count('Crossroads_Stag', player) and state.count('Can_Stag', player)))
    fn("Greenpath_Stag", lambda state: state.count('Fungus1_16_alt[right1]', player) or (state.count('Greenpath_Stag', player) and state.count('Can_Stag', player)))
    fn("Queen's_Station_Stag", lambda state: state.count('Fungus2_02[right1]', player) or (state.count("Queen's_Station_Stag", player) and state.count('Can_Stag', player)))
    fn("Queen's_Gardens_Stag", lambda state: state.count('Fungus3_40[top1]', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player)) or state._hk_option(player, 'EnemyPogos') or state._hk_option(player, 'ShadeSkips') or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and True)) or state.count('Fungus3_40[right1]', player) or (state.count("Queen's_Gardens_Stag", player) and state.count('Can_Stag', player)))
    fn("City_Storerooms_Stag", lambda state: state.count('Ruins1_29[left1]', player) or (state.count('City_Storerooms_Stag', player) and state.count('Can_Stag', player)))
    fn("King's_Station_Stag", lambda state: state.count('Ruins2_08[left1]', player) or (state.count("King's_Station_Stag", player) and state.count('Can_Stag', player)))
    fn("Resting_Grounds_Stag", lambda state: state.count('RestingGrounds_09[left1]', player) or (state.count('Resting_Grounds_Stag', player) and state.count('Can_Stag', player)))
    fn("Distant_Village_Stag", lambda state: state.count('Deepnest_09[left1]', player) or (state.count('Distant_Village_Stag', player) and state.count('Can_Stag', player)))
    fn("Hidden_Station_Stag", lambda state: state.count('Abyss_22[left1]', player) or (state.count('Hidden_Station_Stag', player) and state.count('Can_Stag', player)))
    fn("Stag_Nest_Stag", lambda state: state.count('Cliffs_03[right1]', player) or (state.count('STAGS', player) > 8 and state.count('Can_Stag', player)))
    fn("Lifeblood_Cocoon-King's_Pass", lambda state: state.count('Tutorial_01', player))
    fn("Lifeblood_Cocoon-Ancestral_Mound", lambda state: state.count('Crossroads_ShamanTemple[left1]', player) and (((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or ((state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player))) and state._hk_option(player, 'ObscureSkips'))))
    fn("Lifeblood_Cocoon-Greenpath", lambda state: state.count('Fungus1_32[bot1]', player) or state.count('Fungus1_32[top1]', player) or state.count('Fungus1_32[left1]', player))
    fn("Lifeblood_Cocoon-Fog_Canyon_West", lambda state: state.count('Fungus3_30[bot1]', player))
    fn("Lifeblood_Cocoon-Mantis_Village", lambda state: (state.count('Fungus2_15[top3]', player) or state.count('Fungus2_15[right1]', player) or state.count('Fungus2_15[left1]', player)) and (state.count('LEFTCLAW', player) and state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player))))
    fn("Lifeblood_Cocoon-Failed_Tramway", lambda state: state.count('Deepnest_26', player) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and (state._hk_option(player, 'EnemyPogos') or state._hk_option(player, 'ShadeSkips')))))
    fn("Lifeblood_Cocoon-Galien", lambda state: state.count('Deepnest_40[right1]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))))
    fn("Lifeblood_Cocoon-Kingdom's_Edge", lambda state: state.count('Deepnest_East_15[left1]', player))
    fn("Grimmkin_Flame-City_Storerooms", lambda state: state.count('Ruins1_28', player) and state.count('GRIMMCHILD', player))
    fn("Grimmkin_Flame-Greenpath", lambda state: (state.count('Fungus1_10[left1]', player) or state.count('Fungus1_10[top1]', player) or state.count('Fungus1_10[right1]', player)) and state.count('GRIMMCHILD', player))
    fn("Grimmkin_Flame-Crystal_Peak", lambda state: ((state.count('Mines_10[left1]', player) or state.count('Mines_10[bot1]', player)) and (state.count('WINGS', player) and state.count('RIGHTDASH', player) and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'ShadeSkips') and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and (state.count('MASKSHARDS', player) > 15))) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('RIGHTSUPERDASH', player))) or (state.count('Mines_10[right1]', player) and (state.count('LEFTSUPERDASH', player) or (state.count('LEFTDASH', player) and state.count('WINGS', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))))))) and state.count('GRIMMCHILD', player))
    fn("Grimmkin_Flame-King's_Pass", lambda state: state.count('Tutorial_01', player) and state.count('First_Grimmchild_Upgrade', player))
    fn("Grimmkin_Flame-Resting_Grounds", lambda state: (state.count('RestingGrounds_06[left1]', player) or state.count('RestingGrounds_06[right1]', player) or state.count('RestingGrounds_06[top1]', player)) and state.count('First_Grimmchild_Upgrade', player))
    fn("Grimmkin_Flame-Kingdom's_Edge", lambda state: state.count('Deepnest_East_03', player) and state.count('First_Grimmchild_Upgrade', player))
    fn("Grimmkin_Flame-Fungal_Core", lambda state: state.count('Fungus2_30[top1]', player) and state.count('Second_Grimmchild_Upgrade', player))
    fn("Grimmkin_Flame-Ancient_Basin", lambda state: (state.count('Abyss_02[right1]', player) or (state.count('Abyss_02[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')))) and state.count('Second_Grimmchild_Upgrade', player))
    fn("Grimmkin_Flame-Hive", lambda state: (state.count('Hive_03[right1]', player) or (state.count('Hive_03[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos'))))) and state.count('Second_Grimmchild_Upgrade', player))
    fn("Grimmkin_Flame-Brumm", lambda state: state.count('Room_spider_small[left1]', player) and state.count('Second_Grimmchild_Upgrade', player))
    fn("Hunter's_Journal", lambda state: state.count('Fungus1_08[left1]', player))
    fn("Journal_Entry-Void_Tendrils", lambda state: state.count('Abyss_09[right3]', player))
    fn("Journal_Entry-Charged_Lumafly", lambda state: state.count('Fungus3_archive_02[top1]', player) and state.count('Defeated_Uumuu', player) and ((state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player))) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player) or state.count('ACID', player)) or (state._hk_option(player, 'AcidSkips') and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player))))
    fn("Journal_Entry-Goam", lambda state: state.count('Crossroads_52[left1]', player) and state.count('QUAKE', player))
    fn("Journal_Entry-Garpede", lambda state: state.count('Deepnest_44[top1]', player))
    fn("Journal_Entry-Seal_of_Binding", lambda state: state.count('White_Palace_20[bot1]', player) and state.count('Completed_Path_of_Pain', player))
    fn("Elevator_Pass", lambda state: state.count('Crossroads_49b[right1]', player))
    fn("Split_Mothwing_Cloak", lambda state: state.count('Fungus1_04[right1]', player) and state.count('Defeated_Hornet_1', player))
    fn("Left_Mantis_Claw", lambda state: state.count('Fungus2_14', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or (state.count('LEFTSUPERDASH', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or state._hk_option(player, 'EnemyPogos')))
    fn("Right_Mantis_Claw", lambda state: state.count('Fungus2_14', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or (state.count('LEFTSUPERDASH', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or state._hk_option(player, 'EnemyPogos')))
    fn("Split_Crystal_Heart", lambda state: state.count('Mines_31[left1]', player) and (state.count('RIGHTSUPERDASH', player) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))))) or (state.count('WINGS', player) and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Leftslash", lambda state: state.count('Tutorial_01', player))
    fn("Rightslash", lambda state: state.count('Tutorial_01', player))
    fn("Upslash", lambda state: state.count('Tutorial_01', player))
    fn("Egg_Shop", lambda state: state.count('Room_Ouiji[left1]', player))
    fn("Geo_Rock-Broken_Elevator_1", lambda state: state.count('Abyss_01[right1]', player) or state.count('Abyss_01[left1]', player) or (state.count('Abyss_01', player) and (state.count('WINGS', player) or state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))))
    fn("Geo_Rock-Broken_Elevator_2", lambda state: (state.count('Abyss_01[right1]', player) or state.count('Abyss_01[left1]', player) or (state.count('Abyss_01', player) and (state.count('WINGS', player) or state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))) and (state.count('RIGHTDASH', player) or state._hk_option(player, 'SpikeTunnels')))
    fn("Geo_Rock-Broken_Elevator_3", lambda state: state.count('Abyss_01[right1]', player) or state.count('Abyss_01[left1]', player) or (state.count('Abyss_01', player) and (state.count('WINGS', player) or state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))))
    fn("Geo_Rock-Broken_Bridge_Upper", lambda state: (state.count('Abyss_02[right1]', player) or (state.count('Abyss_02[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)))) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Geo_Rock-Broken_Bridge_Lower", lambda state: state.count('Abyss_02[right1]', player) or (state.count('Abyss_02[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player))))
    fn("Geo_Rock-Broken_Bridge_Lower_Dupe", lambda state: state.count('Abyss_02[right1]', player) or (state.count('Abyss_02[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player))))
    fn("Geo_Rock-Abyss_1", lambda state: state.count('Abyss_06_Core[top1]', player) and state.count('BRAND', player) and (state.count('LEFTDASH', player) or state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player)) or ((state.count('Abyss_06_Core[left1]', player) or state.count('Abyss_06_Core[left3]', player) or state.count('Abyss_06_Core[right2]', player) or state.count('Abyss_06_Core[bot1]', player)) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Abyss_2", lambda state: state.count('Abyss_06_Core[top1]', player) and state.count('BRAND', player) and (state.count('LEFTDASH', player) or state.count('LEFTCLAW', player) or state.count('WINGS', player)) or ((state.count('Abyss_06_Core[left1]', player) or state.count('Abyss_06_Core[left3]', player) or state.count('Abyss_06_Core[right2]', player) or state.count('Abyss_06_Core[bot1]', player)) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Abyss_3", lambda state: state.count('Abyss_06_Core[top1]', player) and state.count('BRAND', player) or ((state.count('Abyss_06_Core[left3]', player) or state.count('Abyss_06_Core[right2]', player) or state.count('Abyss_06_Core[bot1]', player)) and (state.count('LEFTCLAW', player) and (state._hk_option(player, 'PreciseMovement') or state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) or state.count('WINGS', player))) or state.count('Abyss_06_Core[left1]', player))
    fn("Geo_Rock-Basin_Tunnel", lambda state: state.count('Abyss_18[right1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state.count('LEFTSUPERDASH', player)) or (state.count('Abyss_18[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player))))
    fn("Geo_Rock-Basin_Grub", lambda state: state.count('Abyss_19', player) and state.count('WINGS', player))
    fn("Geo_Rock-Basin_Before_Broken_Vessel", lambda state: state.count('Abyss_19[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or state.count('Abyss_19[bot2]', player) or state.count('Abyss_19[right1]', player))
    fn("Geo_Rock-Cliffs_Main_1", lambda state: state.count('Cliffs_01[right1]', player) or (state.count('Cliffs_01[right2]', player) and (state.count('LEFTDASH', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))) or ((state.count('Cliffs_01[right3]', player) or state.count('Cliffs_01[right4]', player)) and ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos') or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Cliffs_Main_2", lambda state: state.count('Cliffs_01[right1]', player) or state.count('Cliffs_01[right2]', player) or ((state.count('Cliffs_01[right3]', player) or state.count('Cliffs_01[right4]', player)) and ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos') or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Cliffs_Main_3", lambda state: (state.count('Cliffs_01[right1]', player) or state.count('Cliffs_01[right2]', player)) and (state.count('RIGHTDASH', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos') or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))) or ((state.count('Cliffs_01[right3]', player) or state.count('Cliffs_01[right4]', player)) and ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos') or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Cliffs_Main_4", lambda state: state.count('Cliffs_01[right1]', player) or state.count('Cliffs_01[right2]', player) or ((state.count('Cliffs_01[right3]', player) or state.count('Cliffs_01[right4]', player)) and ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos') or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Below_Gorb_Dupe", lambda state: state.count('Cliffs_02', player))
    fn("Geo_Rock-Below_Gorb", lambda state: state.count('Cliffs_02', player))
    fn("Geo_Rock-Crossroads_Well", lambda state: state.count('Crossroads_01[left1]', player) or state.count('Crossroads_01[top1]', player) or state.count('Crossroads_01[right1]', player))
    fn("Geo_Rock-Crossroads_Center_Grub", lambda state: state.count('Crossroads_05[left1]', player) or state.count('Crossroads_05[right1]', player))
    fn("Geo_Rock-Crossroads_Root", lambda state: state.count('Crossroads_07', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Geo_Rock-Crossroads_Root_Dupe_1", lambda state: state.count('Crossroads_07', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Geo_Rock-Crossroads_Root_Dupe_2", lambda state: state.count('Crossroads_07', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Geo_Rock-Crossroads_Aspid_Arena", lambda state: state.count('Crossroads_08', player))
    fn("Geo_Rock-Crossroads_Aspid_Arena_Dupe_1", lambda state: state.count('Crossroads_08', player))
    fn("Geo_Rock-Crossroads_Aspid_Arena_Dupe_2", lambda state: state.count('Crossroads_08', player))
    fn("Geo_Rock-Crossroads_Aspid_Arena_Hidden", lambda state: state.count('Crossroads_08', player))
    fn("Geo_Rock-Crossroads_Above_False_Knight", lambda state: (state.count('Crossroads_10[left1]', player) or state.count('Crossroads_10[right1]', player)) and state.count('Defeated_False_Knight', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))
    fn("Geo_Rock-Crossroads_Before_Acid_Grub", lambda state: state.count('Crossroads_12[left1]', player) or state.count('Crossroads_12[right1]', player))
    fn("Geo_Rock-Crossroads_Below_Goam_Mask_Shard", lambda state: state.count('Crossroads_13[left1]', player) or state.count('Crossroads_13[right1]', player))
    fn("Geo_Rock-Crossroads_After_Goam_Mask_Shard", lambda state: state.count('Crossroads_13[left1]', player) or state.count('Crossroads_13[right1]', player))
    fn("Geo_Rock-Crossroads_Above_Lever", lambda state: state.count('Crossroads_16[left1]', player) or state.count('Crossroads_16[right1]', player) or state.count('Crossroads_16[bot1]', player))
    fn("Geo_Rock-Crossroads_Before_Fungal", lambda state: state.count('Crossroads_18[right1]', player) or state.count('Crossroads_18[bot1]', player) or state.count('Crossroads_18[right2]', player))
    fn("Geo_Rock-Crossroads_Before_Fungal_Dupe_1", lambda state: state.count('Crossroads_18[right1]', player) or state.count('Crossroads_18[bot1]', player) or state.count('Crossroads_18[right2]', player))
    fn("Geo_Rock-Crossroads_Before_Fungal_Dupe_2", lambda state: state.count('Crossroads_18[right1]', player) or state.count('Crossroads_18[bot1]', player) or state.count('Crossroads_18[right2]', player))
    fn("Geo_Rock-Crossroads_Before_Shops", lambda state: state.count('Crossroads_19', player))
    fn("Geo_Rock-Crossroads_Before_Glowing_Womb", lambda state: state.count('Crossroads_21', player))
    fn("Geo_Rock-Crossroads_Above_Tram", lambda state: state.count('Crossroads_27', player))
    fn("Geo_Rock-Crossroads_Above_Mawlek", lambda state: state.count('Crossroads_36[right1]', player) or state.count('Crossroads_36[right2]', player))
    fn("Geo_Rock-Crossroads_Vessel_Fragment", lambda state: state.count('Crossroads_37[right1]', player))
    fn("Geo_Rock-Crossroads_Goam_Alcove", lambda state: state.count('Crossroads_42[left1]', player) or state.count('Crossroads_42[right1]', player))
    fn("Geo_Rock-Crossroads_Goam_Damage_Boost", lambda state: (state.count('Crossroads_42[left1]', player) or state.count('Crossroads_42[right1]', player)) and (state.count('MASKSHARDS', player) > 7 or (state.count('Lifeblood_Heart', player) or state.count('Lifeblood_Core', player) or state.count("Joni's_Blessing", player))))
    fn("Geo_Rock-Crossroads_Tram", lambda state: state.count('Crossroads_46[left1]', player) or (state.count('Crossroads_46b[right1]', player) and state.count('TRAM', player)))
    fn("Geo_Rock-Crossroads_Goam_Journal", lambda state: state.count('Crossroads_52[left1]', player) and state.count('QUAKE', player))
    fn("Geo_Rock-Crossroads_Goam_Journal_Dupe", lambda state: state.count('Crossroads_52[left1]', player) and state.count('QUAKE', player))
    fn("Geo_Rock-Ancestral_Mound", lambda state: state.count('Crossroads_ShamanTemple[left1]', player) and (((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or ((state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player))) and state._hk_option(player, 'ObscureSkips'))))
    fn("Geo_Rock-Ancestral_Mound_Dupe", lambda state: state.count('Crossroads_ShamanTemple[left1]', player) and (((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or ((state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player))) and state._hk_option(player, 'ObscureSkips'))))
    fn("Geo_Rock-Ancestral_Mound_Tree", lambda state: state.count('Crossroads_ShamanTemple[left1]', player) and state.count('WINGS', player) and (((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or ((state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player))) and state._hk_option(player, 'ObscureSkips'))))
    fn("Geo_Rock-Ancestral_Mound_Tree_Dupe", lambda state: state.count('Crossroads_ShamanTemple[left1]', player) and state.count('WINGS', player) and (((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or ((state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player))) and state._hk_option(player, 'ObscureSkips'))))
    fn("Geo_Rock-Moss_Prophet", lambda state: state.count('Deepnest_01', player))
    fn("Geo_Rock-Moss_Prophet_Dupe", lambda state: state.count('Deepnest_01', player))
    fn("Geo_Rock-Deepnest_Below_Mimics", lambda state: state.count('Deepnest_02', player))
    fn("Geo_Rock-Deepnest_Below_Mimics_Dupe", lambda state: state.count('Deepnest_02', player))
    fn("Geo_Rock-Deepnest_Below_Spike_Grub", lambda state: state.count('Deepnest_03', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('Deepnest_03[left1]', player)) or state.count('Deepnest_03[top1]', player)))
    fn("Geo_Rock-Deepnest_Below_Spike_Grub_Dupe", lambda state: state.count('Deepnest_03', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('Deepnest_03[left1]', player)) or state.count('Deepnest_03[top1]', player)))
    fn("Geo_Rock-Deepnest_Spike_Grub_Right", lambda state: state.count('Deepnest_03', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('Deepnest_03[left1]', player)) or state.count('Deepnest_03[top1]', player)))
    fn("Geo_Rock-Deepnest_By_Mantis_Lords_Garpede_Pogo", lambda state: state.count('Deepnest_16[bot1]', player))
    fn("Geo_Rock-Deepnest_By_Mantis_Lords_Garpede_Pogo_Dupe", lambda state: state.count('Deepnest_16[bot1]', player))
    fn("Geo_Rock-Deepnest_By_Mantis_Lords_Requires_Claw_1", lambda state: state.count('Deepnest_16[bot1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player))))
    fn("Geo_Rock-Deepnest_By_Mantis_Lords_Requires_Claw_2", lambda state: state.count('Deepnest_16[bot1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player))))
    fn("Geo_Rock-Deepnest_By_Mantis_Lords_Requires_Claw_3", lambda state: state.count('Deepnest_16[bot1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player))))
    fn("Geo_Rock-Deepnest_Nosk_1", lambda state: state.count('Deepnest_31[right1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player)) or (state.count('Deepnest_31[right2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Deepnest_Nosk_2", lambda state: state.count('Deepnest_31[right1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player)) or (state.count('Deepnest_31[right2]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Deepnest_Nosk_3", lambda state: state.count('Deepnest_31[right2]', player) or (state.count('Deepnest_31[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Geo_Rock-Deepnest_Above_Galien", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_35[top1]', player) or (state.count('Deepnest_35', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))))
    fn("Geo_Rock-Deepnest_Galien_Spike", lambda state: state.count('Deepnest_35', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player))))
    fn("Geo_Rock-Deepnest_Garpede_1", lambda state: state.count('Deepnest_37', player))
    fn("Geo_Rock-Deepnest_Garpede_2", lambda state: state.count('Deepnest_37', player))
    fn("Geo_Rock-Dark_Deepnest_Above_Grub_1", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_39', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')))) or state.count('Deepnest_39[top1]', player) or (state.count('Deepnest_39[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTDASH', player)))))
    fn("Geo_Rock-Dark_Deepnest_Above_Grub_2", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_39', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')))) or state.count('Deepnest_39[top1]', player) or (state.count('Deepnest_39[left1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTDASH', player)))))
    fn("Geo_Rock-Dark_Deepnest_Bottom_Left", lambda state: state.count('Deepnest_39', player))
    fn("Geo_Rock-Above_Mask_Maker_1", lambda state: (state.count('Deepnest_43[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state.count('Deepnest_43[left1]', player) or state.count('Deepnest_43[right1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Geo_Rock-Above_Mask_Maker_2", lambda state: (state.count('Deepnest_43[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state.count('Deepnest_43[left1]', player) or state.count('Deepnest_43[right1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))
    fn("Geo_Rock-Lower_Kingdom's_Edge_1", lambda state: (state.count('Deepnest_East_01[bot1]', player) or state.count('Deepnest_East_01[top1]', player) or state.count('Deepnest_East_01[right1]', player)) and (state.count('LEFTDASH', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Geo_Rock-Lower_Kingdom's_Edge_2", lambda state: (state.count('Deepnest_East_01[bot1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)) or state.count('Deepnest_East_01[top1]', player) or state.count('Deepnest_East_01[right1]', player)) and (state.count('LEFTDASH', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Geo_Rock-Lower_Kingdom's_Edge_3", lambda state: state.count('Deepnest_East_02', player))
    fn("Geo_Rock-Lower_Kingdom's_Edge_Dive", lambda state: state.count('Deepnest_East_02', player) and state.count('QUAKE', player) or (state.count('Deepnest_East_02[bot2]', player) and (state.count('ACID', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'AcidSkips')))))
    fn("Geo_Rock-Kingdom's_Edge_Below_Bardoon", lambda state: state.count('Deepnest_East_04', player))
    fn("Geo_Rock-Kingdom's_Edge_Oro_Far_Left", lambda state: (state.count('Deepnest_East_06[left1]', player) or state.count('Deepnest_East_06[top1]', player) or ((state.count('Deepnest_East_06[bot1]', player) or state.count('Deepnest_East_06[door1]', player) or state.count('Deepnest_East_06[right1]', player)) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos'))))) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos')) or (state.count('WINGS', player) and state._hk_option(player, 'ShadeSkips'))))
    fn("Geo_Rock-Kingdom's_Edge_Oro_Middle_Left", lambda state: state.count('Deepnest_East_06[top1]', player) or (state.count('Deepnest_East_06[left1]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'BackgroundObjectPogos')))) or ((state.count('Deepnest_East_06[bot1]', player) or state.count('Deepnest_East_06[door1]', player) or state.count('Deepnest_East_06[right1]', player)) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Geo_Rock-Kingdom's_Edge_Above_Root", lambda state: state.count('Deepnest_East_07', player))
    fn("Geo_Rock-Kingdom's_Edge_Above_Tower", lambda state: state.count('Deepnest_East_07', player))
    fn("Geo_Rock-Kingdom's_Edge_Below_Colosseum", lambda state: (state.count('Deepnest_East_08[top1]', player) or (state.count('Deepnest_East_08[right1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)))) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('RIGHTDASH', player)))
    fn("Geo_Rock-Kingdom's_Edge_Above_420_Geo_Rock", lambda state: state.count('Deepnest_East_17[left1]', player) and state.count('QUAKE', player))
    fn("Geo_Rock-Kingdom's_Edge_420_Geo_Rock", lambda state: state.count('Deepnest_East_17[left1]', player) and state.count('QUAKE', player))
    fn("Geo_Rock-Beast's_Den_Above_Trilobite", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Geo_Rock-Beast's_Den_Above_Trilobite_Dupe", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Geo_Rock-Beast's_Den_Below_Herrah", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Geo_Rock-Beast's_Den_Below_Egg", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Geo_Rock-Beast's_Den_Below_Egg_Dupe", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))) or (state.count('WINGS', player) and state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Geo_Rock-Beast's_Den_Bottom", lambda state: state.count('Deepnest_Spider_Town[left1]', player))
    fn("Geo_Rock-Beast's_Den_Bottom_Dupe", lambda state: state.count('Deepnest_Spider_Town[left1]', player))
    fn("Geo_Rock-Beast's_Den_After_Herrah", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) and (state.count('RIGHTSLASH', player) or ((state.count('LEFTDASH', player) > 1 or state.count('RIGHTDASH', player) > 1) and state.count('RIGHTDASH', player)) or state.count('LEFTDASH', player) or state.count('Herrah', player) or ((state.count('SPELLS', player) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or ((state.count('CYCLONE', player) or state.count('Great_Slash', player)) and state._hk_option(player, 'ProficientCombat')) or (state._hk_option(player, 'ProficientCombat') and state._hk_option(player, 'DifficultSkips'))))))
    fn("Geo_Rock-Greenpath_Entrance", lambda state: state.count('Fungus1_01[left1]', player) or state.count('Fungus1_01[right1]', player))
    fn("Geo_Rock-Greenpath_Waterfall", lambda state: state.count('Fungus1_01b[left1]', player) or state.count('Fungus1_01b[right1]', player))
    fn("Geo_Rock-Greenpath_Below_Skip_Squit", lambda state: state.count('Fungus1_02[left1]', player) or state.count('Fungus1_02[right1]', player) or state.count('Fungus1_02[right2]', player))
    fn("Geo_Rock-Greenpath_Skip_Squit", lambda state: state.count('Fungus1_02[left1]', player) or state.count('Fungus1_02[right1]', player) or state.count('Fungus1_02[right2]', player))
    fn("Geo_Rock-Greenpath_Second_Skip_Fool_Eater", lambda state: state.count('Fungus1_03[left1]', player) or state.count('Fungus1_03[right1]', player) or state.count('Fungus1_03[bot1]', player))
    fn("Geo_Rock-Greenpath_Second_Skip_Fool_Eater_Dupe", lambda state: state.count('Fungus1_03[left1]', player) or state.count('Fungus1_03[right1]', player) or state.count('Fungus1_03[bot1]', player))
    fn("Geo_Rock-Greenpath_Second_Skip_Lower", lambda state: state.count('Fungus1_03[left1]', player) or state.count('Fungus1_03[right1]', player) or state.count('Fungus1_03[bot1]', player))
    fn("Geo_Rock-Greenpath_Below_Hornet", lambda state: (state.count('Fungus1_04[left1]', player) or (state.count('Fungus1_04[right1]', player) and state.count('Defeated_Hornet_1', player))) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or ((state.count('RIGHTSUPERDASH', player) or state.count('ACID', player)) and state.count('RIGHTCLAW', player))))
    fn("Geo_Rock-Greenpath_Above_Thorns", lambda state: state.count('Fungus1_05[top1]', player) or state.count('Fungus1_05[right1]', player) or state.count('Fungus1_05[bot1]', player))
    fn("Geo_Rock-Greenpath_Hunter's_Journal", lambda state: state.count('Fungus1_07[top1]', player) or state.count('Fungus1_07[left1]', player) or state.count('Fungus1_07[right1]', player))
    fn("Geo_Rock-Greenpath_Acid_Bridge", lambda state: (state.count('Fungus1_10[left1]', player) or state.count('Fungus1_10[right1]', player) or state.count('Fungus1_10[top1]', player)) and ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) or state._hk_option(player, 'ShadeSkips')))
    fn("Geo_Rock-Greenpath_After_MMC_Hidden", lambda state: state.count('Fungus1_12[left1]', player) or state.count('Fungus1_12[right1]', player))
    fn("Geo_Rock-Greenpath_After_MMC", lambda state: state.count('Fungus1_12[left1]', player) or state.count('Fungus1_12[right1]', player))
    fn("Geo_Rock-Greenpath_After_MMC_Dupe", lambda state: state.count('Fungus1_12[left1]', player) or state.count('Fungus1_12[right1]', player))
    fn("Geo_Rock-Greenpath_Obbles_Fool_Eater", lambda state: state.count('Fungus1_19[left1]', player) or state.count('Fungus1_19[right1]', player) or state.count('Fungus1_19[bot1]', player))
    fn("Geo_Rock-Greenpath_Moss_Knights", lambda state: state.count('Fungus1_21', player))
    fn("Geo_Rock-Greenpath_Moss_Knights_Dupe_1", lambda state: state.count('Fungus1_21', player))
    fn("Geo_Rock-Greenpath_Moss_Knights_Dupe_2", lambda state: state.count('Fungus1_21', player))
    fn("Geo_Rock-Greenpath_Below_Stag", lambda state: state.count('Fungus1_22[top1]', player) or state.count('Fungus1_22[left1]', player))
    fn("Geo_Rock-Greenpath_Below_Stag_Fool_Eater", lambda state: state.count('Fungus1_22[top1]', player) or state.count('Fungus1_22[left1]', player) or state.count('Fungus1_22[bot1]', player))
    fn("Geo_Rock-Baldur_Shell_Top_Left", lambda state: state.count('Fungus1_28[left1]', player) or state.count('Fungus1_28[left2]', player))
    fn("Geo_Rock-Baldur_Shell_Alcove", lambda state: state.count('Fungus1_28[left1]', player) or state.count('Fungus1_28[left2]', player))
    fn("Geo_Rock-Greenpath_MMC", lambda state: state.count('Fungus1_29[left1]', player) or state.count('Fungus1_29[right1]', player))
    fn("Geo_Rock-Greenpath_Below_Toll", lambda state: state.count('Fungus1_31[top1]', player) or state.count('Fungus1_31[bot1]', player) or state.count('Fungus1_31[right1]', player))
    fn("Geo_Rock-Greenpath_Toll_Hidden", lambda state: state.count('Fungus1_31[top1]', player) or state.count('Fungus1_31[bot1]', player) or state.count('Fungus1_31[right1]', player))
    fn("Geo_Rock-Greenpath_Toll_Hidden_Dupe", lambda state: state.count('Fungus1_31[top1]', player) or state.count('Fungus1_31[bot1]', player) or state.count('Fungus1_31[right1]', player))
    fn("Geo_Rock-Fungal_Below_Shrumal_Ogres", lambda state: state.count('Fungus2_04', player))
    fn("Geo_Rock-Fungal_Above_Cloth", lambda state: state.count('Fungus2_08[left1]', player) or state.count('Fungus2_08[left2]', player) or state.count('Fungus2_08[right1]', player))
    fn("Geo_Rock-Fungal_After_Cloth", lambda state: (state.count('Fungus2_10[right1]', player) or state.count('Fungus2_10[right2]', player) or state.count('Fungus2_10[bot1]', player)) and (state.count('RIGHTDASH', player) or state.count('RIGHTCLAW', player) or state.count('WINGS', player)))
    fn("Geo_Rock-Fungal_Below_Pilgrim's_Way", lambda state: state.count('Fungus2_11[top1]', player) or state.count('Fungus2_11[left1]', player) or state.count('Fungus2_11[left2]', player) or state.count('Fungus2_11[right1]', player))
    fn("Geo_Rock-Fungal_Below_Pilgrim's_Way_Dupe", lambda state: state.count('Fungus2_11[top1]', player) or state.count('Fungus2_11[left1]', player) or state.count('Fungus2_11[left2]', player) or state.count('Fungus2_11[right1]', player))
    fn("Geo_Rock-Mantis_Outskirts_Guarded", lambda state: state.count('Fungus2_13', player))
    fn("Geo_Rock-Mantis_Outskirts_Guarded_Dupe", lambda state: state.count('Fungus2_13', player))
    fn("Geo_Rock-Mantis_Outskirts_Alcove", lambda state: state.count('Fungus2_13', player) and (state.count('Fungus2_13[left3]', player) or state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('ACID', player) or state._hk_option(player, 'EnemyPogos') or state._hk_option(player, 'PreciseMovement')))
    fn("Geo_Rock-Mantis_Village_After_Lever", lambda state: state.count('Fungus2_14', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player))) or state._hk_option(player, 'EnemyPogos')))
    fn("Geo_Rock-Mantis_Village_Above_Claw", lambda state: state.count('Fungus2_14', player) and (state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'EnemyPogos') or state.count('WINGS', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')))))
    fn("Geo_Rock-Mantis_Village_Above_Claw_Dupe", lambda state: state.count('Fungus2_14', player) and (state._hk_option(player, 'ComplexSkips') and state._hk_option(player, 'EnemyPogos') or state.count('WINGS', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state._hk_option(player, 'EnemyPogos')))))
    fn("Geo_Rock-Mantis_Village_Below_Lore", lambda state: state.count('Fungus2_14[top1]', player) or (state.count('Fungus2_14', player) and (state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state._hk_option(player, 'EnemyPogos')) and (state.count('RIGHTCLAW', player) and (state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) or state.count('LEFTCLAW', player))))
    fn("Geo_Rock-Mantis_Village_Above_Lever", lambda state: (state.count('Fungus2_14[top1]', player) or (state.count('Fungus2_14', player) and (state.count('LEFTDASH', player) or state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state._hk_option(player, 'EnemyPogos')) and (state.count('RIGHTCLAW', player) and (state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) or state.count('LEFTCLAW', player)))) and (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state._hk_option(player, 'BackgroundObjectPogos')) or state.count('WINGS', player) or state.count('RIGHTCLAW', player)))
    fn("Geo_Rock-Above_Mantis_Lords_1", lambda state: (state.count('Fungus2_15[top3]', player) or state.count('Fungus2_15[right1]', player) or (state.count('Fungus2_15[left1]', player) and state.count('RIGHTCLAW', player))) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player)))
    fn("Geo_Rock-Above_Mantis_Lords_2", lambda state: state.count('Fungus2_15[top3]', player) or state.count('Fungus2_15[right1]', player) or (state.count('Fungus2_15[left1]', player) and state.count('RIGHTCLAW', player)))
    fn("Geo_Rock-Fungal_After_Bouncy_Grub", lambda state: state.count('Fungus2_18[right1]', player))
    fn("Geo_Rock-Fungal_After_Bouncy_Grub_Dupe", lambda state: state.count('Fungus2_18[right1]', player))
    fn("Geo_Rock-Fungal_Bouncy_Grub_Lever", lambda state: state.count('Fungus2_18[right1]', player))
    fn("Geo_Rock-Fungal_After_Cornifer", lambda state: state.count('Fungus2_18[top1]', player) or state.count('Fungus2_18[right1]', player) or (state.count('Fungus2_18[bot1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player))))
    fn("Geo_Rock-Fungal_Above_City_Entrance", lambda state: state.count('Fungus2_21[right1]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player))))
    fn("Geo_Rock-Deepnest_By_Mantis_Lords_1", lambda state: state.count('Fungus2_25[top1]', player) or ((state.count('Fungus2_25[top2]', player) or state.count('Fungus2_25[right1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Deepnest_By_Mantis_Lords_2", lambda state: state.count('Fungus2_25[top1]', player) or ((state.count('Fungus2_25[top2]', player) or state.count('Fungus2_25[right1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Deepnest_Lower_Cornifer", lambda state: (state.count('Fungus2_25[top1]', player) or state.count('Fungus2_25[top2]', player) or state.count('Fungus2_25[right1]', player)) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))
    fn("Geo_Rock-Fungal_Core_Entrance", lambda state: state.count('Fungus2_29[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) or (state.count('Fungus2_29[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player))))
    fn("Geo_Rock-Fungal_Core_Hidden", lambda state: state.count('Fungus2_30[top1]', player))
    fn("Geo_Rock-Fungal_Core_Above_Elder", lambda state: state.count('Fungus2_30[top1]', player) and state.count('WINGS', player))
    fn("Geo_Rock-Queen's_Gardens_Acid_Entrance", lambda state: state.count('Fungus3_03[right1]', player) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and state._hk_option(player, 'ShadeSkips'))))
    fn("Geo_Rock-Queen's_Gardens_Below_Stag", lambda state: state.count('Fungus3_10[top1]', player))
    fn("Geo_Rock-Fog_Canyon_East", lambda state: state.count('Fungus3_26', player) and (state.count('MASKSHARDS', player) > 15 or state.count('FIREBALL', player)))
    fn("Geo_Rock-Love_Key", lambda state: state.count('Fungus3_39[left1]', player))
    fn("Geo_Rock-Love_Key_Dupe", lambda state: state.count('Fungus3_39[left1]', player))
    fn("Geo_Rock-Queen's_Gardens_Above_Marmu", lambda state: state.count('Fungus3_48[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or (state.count('Fungus3_48[right2]', player) and (state.count('RIGHTSUPERDASH', player) or state.count('RIGHTDASH', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Geo_Rock-Pale_Lurker", lambda state: state.count('GG_Lurker[left1]', player) and state.count('RIGHTCLAW', player) and (state.count('WINGS', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player))))
    fn("Geo_Rock-Godhome_Pipeway", lambda state: state.count('GG_Pipeway[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('RIGHTDASH', player) or state.count('SWIM', player))) or state.count('WINGS', player)) or (state.count('GG_Pipeway[right1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and (state.count('RIGHTDASH', player) or state.count('SWIM', player))) or state.count('WINGS', player))))
    fn("Geo_Rock-Hive_Entrance", lambda state: state.count('Hive_01[left1]', player) or state.count('Hive_01[right1]', player))
    fn("Geo_Rock-Hive_Outside_Bench", lambda state: state.count('Hive_02[left2]', player) or ((state.count('Hive_02[left1]', player) or state.count('Hive_02[left3]', player)) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))))
    fn("Geo_Rock-Hive_Below_Root", lambda state: state.count('Hive_02[left1]', player) or ((state.count('Hive_02[left2]', player) or state.count('Hive_02[left3]', player)) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTCLAW', player) or state._hk_option(player, 'EnemyPogos'))))
    fn("Geo_Rock-Hive_After_Root", lambda state: state.count('Hive_02[left1]', player) or ((state.count('Hive_02[left2]', player) or state.count('Hive_02[left3]', player)) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTCLAW', player)))))
    fn("Geo_Rock-Hive_Below_Stash", lambda state: state.count('Hive_03[bot1]', player) or state.count('Hive_03[right1]', player))
    fn("Geo_Rock-Hive_Stash", lambda state: state.count('Hive_03[right1]', player) or (state.count('Hive_03[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos')))))
    fn("Geo_Rock-Hive_Stash_Dupe", lambda state: state.count('Hive_03[right1]', player) or (state.count('Hive_03[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos')))))
    fn("Geo_Rock-Hive_Below_Grub", lambda state: state.count('Hive_04[left1]', player) or (state.count('Hive_04[right1]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('LEFTDASH', player) or state.count('WINGS', player))))
    fn("Geo_Rock-Hive_Above_Mask", lambda state: state.count('Hive_04[left1]', player) or (state.count('Hive_04[right1]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('LEFTDASH', player) or state.count('WINGS', player))))
    fn("Geo_Rock-Crystal_Peak_Lower_Middle", lambda state: state.count('Mines_02', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('Mines_02[top2]', player)))
    fn("Geo_Rock-Crystal_Peak_Lower_Conveyer_1", lambda state: state.count('Mines_02', player))
    fn("Geo_Rock-Crystal_Peak_Lower_Conveyer_2", lambda state: state.count('Mines_02', player))
    fn("Geo_Rock-Crystal_Peak_Before_Dark_Room", lambda state: state.count('Mines_04', player))
    fn("Geo_Rock-Crystal_Peak_Before_Dark_Room_Dupe", lambda state: state.count('Mines_04', player))
    fn("Geo_Rock-Crystal_Peak_Above_Spike_Grub", lambda state: state.count('Mines_05', player))
    fn("Geo_Rock-Crystal_Peak_Mimic_Grub", lambda state: state.count('Mines_16[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or (state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips'))))
    fn("Geo_Rock-Crystal_Peak_Dive_Egg", lambda state: state.count('Mines_20', player) and state.count('QUAKE', player))
    fn("Geo_Rock-Crystal_Peak_Dive_Egg_Dupe", lambda state: state.count('Mines_20', player) and state.count('QUAKE', player))
    fn("Geo_Rock-Crystal_Peak_Conga_Line", lambda state: state.count('Mines_20', player))
    fn("Geo_Rock-Hallownest_Crown_Dive", lambda state: (state.count('Mines_25[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) or state.count('Mines_25[top1]', player)) and state.count('QUAKE', player))
    fn("Geo_Rock-Hallownest_Crown_Dive_Dupe", lambda state: (state.count('Mines_25[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) or state.count('Mines_25[top1]', player)) and state.count('QUAKE', player))
    fn("Geo_Rock-Hallownest_Crown_Hidden", lambda state: state.count('Mines_25[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) or (state.count('Mines_25[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('CYCLONE', player))))
    fn("Geo_Rock-Hallownest_Crown_Hidden_Dupe_1", lambda state: state.count('Mines_25[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) or (state.count('Mines_25[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('CYCLONE', player))))
    fn("Geo_Rock-Hallownest_Crown_Hidden_Dupe_2", lambda state: state.count('Mines_25[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) or (state.count('Mines_25[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('CYCLONE', player))))
    fn("Geo_Rock-Crystal_Peak_Before_Crystal_Heart", lambda state: state.count('Mines_31[left1]', player))
    fn("Geo_Rock-Crystal_Peak_Entrance", lambda state: (state.count('Mines_33[left1]', player) or state.count('Mines_33[right1]', player)) and state.count('LANTERN', player))
    fn("Geo_Rock-Crystal_Peak_Entrance_Dupe_1", lambda state: (state.count('Mines_33[left1]', player) or state.count('Mines_33[right1]', player)) and state.count('LANTERN', player))
    fn("Geo_Rock-Crystal_Peak_Entrance_Dupe_2", lambda state: (state.count('Mines_33[left1]', player) or state.count('Mines_33[right1]', player)) and state.count('LANTERN', player))
    fn("Geo_Rock-Crystal_Peak_Above_Crushers_Lower", lambda state: (state.count('Mines_37[top1]', player) or state.count('Mines_37[bot1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'ShadeSkips'))))
    fn("Geo_Rock-Crystal_Peak_Above_Crushers_Higher", lambda state: (state.count('Mines_37[top1]', player) or state.count('Mines_37[bot1]', player)) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player))))
    fn("Geo_Rock-Resting_Grounds_Catacombs_Grub", lambda state: state.count('RestingGrounds_10[top1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Geo_Rock-Resting_Grounds_Catacombs_Left_Dupe", lambda state: state.count('RestingGrounds_10[top1]', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Geo_Rock-Resting_Grounds_Catacombs_Left", lambda state: state.count('RestingGrounds_10[top1]', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))))
    fn("Geo_Rock-Overgrown_Mound", lambda state: state.count('Room_Fungus_Shaman[left1]', player))
    fn("Geo_Rock-Fluke_Hermit_Dupe", lambda state: state.count('Room_GG_Shortcut[top1]', player) or (state.count('Room_GG_Shortcut[left1]', player) and (state.count('RIGHTCLAW', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player) or (state.count('RIGHTDASH', player) and state.count('SWIM', player))) or (state.count('LEFTCLAW', player) and state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))))))
    fn("Geo_Rock-Fluke_Hermit", lambda state: state.count('Room_GG_Shortcut[top1]', player) or (state.count('Room_GG_Shortcut[left1]', player) and (state.count('RIGHTCLAW', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player) or (state.count('RIGHTDASH', player) and state.count('SWIM', player))) or (state.count('LEFTCLAW', player) and state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))))))
    fn("Geo_Rock-Pleasure_House", lambda state: state.count('Ruins_Elevator[left1]', player) or state.count('Ruins_Elevator[left2]', player))
    fn("Geo_Rock-City_of_Tears_Quirrel", lambda state: state.count('Ruins1_03', player))
    fn("Geo_Rock-City_of_Tears_Lemm", lambda state: state.count('Ruins1_05b', player))
    fn("Geo_Rock-City_of_Tears_Above_Lemm", lambda state: state.count('Ruins1_05c', player))
    fn("Geo_Rock-Soul_Sanctum", lambda state: state.count('Ruins1_32[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('QUAKE', player))
    fn("Geo_Rock-Watcher's_Spire", lambda state: (state.count('Ruins2_01[top1]', player) or state.count('Ruins2_01[left2]', player) or (state.count('Ruins2_01[bot1]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state._hk_option(player, 'EnemyPogos')) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DifficultSkips'))))) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or state.count('WINGS', player)))
    fn("Geo_Rock-Above_King's_Station", lambda state: state.count('Ruins2_05[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) or state.count('Ruins2_05[left1]', player) or state.count('Ruins2_05[top1]', player))
    fn("Geo_Rock-King's_Station", lambda state: (state.count('Ruins2_06[left1]', player) or state.count('Ruins2_06[top1]', player) or state.count('Ruins2_06[right1]', player) or state.count('Ruins2_06[right2]', player)) and (state.count('RIGHTCLAW', player) or ((state.count('WINGS', player) or state.count('LEFTCLAW', player)) and state._hk_option(player, 'ShadeSkips')) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')))) or (state.count('Ruins2_06[left2]', player) and (state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state._hk_option(player, 'PreciseMovement'))) and (state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos'))))))
    fn("Geo_Rock-King's_Pass_Left", lambda state: state.count('Tutorial_01[right1]', player) or state.count('Tutorial_01[top1]', player) or state.count('Tutorial_01[top2]', player))
    fn("Geo_Rock-King's_Pass_Below_Fury", lambda state: state.count('Tutorial_01[right1]', player) or state.count('Tutorial_01[top1]', player) or state.count('Tutorial_01[top2]', player))
    fn("Geo_Rock-King's_Pass_Hidden", lambda state: state.count('Tutorial_01[right1]', player) or state.count('Tutorial_01[top1]', player) or state.count('Tutorial_01[top2]', player))
    fn("Geo_Rock-King's_Pass_Collapse", lambda state: state.count('Tutorial_01[right1]', player) or state.count('Tutorial_01[top1]', player) or state.count('Tutorial_01[top2]', player))
    fn("Geo_Rock-King's_Pass_Above_Fury", lambda state: state.count('Tutorial_01[right1]', player) or state.count('Tutorial_01[top1]', player) or state.count('Tutorial_01[top2]', player))
    fn("Geo_Rock-Waterways_Tuk", lambda state: state.count('Waterways_01', player) and (state.count('Waterways_01[right1]', player) or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Geo_Rock-Waterways_Tuk_Alcove", lambda state: state.count('Waterways_01', player))
    fn("Geo_Rock-Waterways_Left", lambda state: state.count('Waterways_04b[left1]', player) or (state.count('Waterways_04b[right1]', player) and (state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state.count('LEFTSUPERDASH', player)))) or (state.count('Waterways_04b[right2]', player) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips'))) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')) and (state.count('SWIM', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player)))))
    fn("Geo_Rock-Waterways_East", lambda state: state.count('Waterways_07[top1]', player) or state.count('Waterways_07[door1]', player) or (state.count('Waterways_07', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Geo_Rock-Waterways_Flukemarm", lambda state: state.count('Waterways_08[left2]', player) or ((state.count('Waterways_08[top1]', player) and (state._hk_option(player, 'EnemyPogos') or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player)) or state.count('Waterways_08[left1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Boss_Geo-Massive_Moss_Charger", lambda state: state.count('Fungus1_29[left1]', player) or state.count('Fungus1_29[right1]', player))
    fn("Boss_Geo-Gorgeous_Husk", lambda state: state.count('Ruins_House_02[left1]', player))
    fn("Boss_Geo-Sanctum_Soul_Warrior", lambda state: state.count('Ruins1_23[top1]', player) or (state.count('Ruins1_23', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player) and state._hk_option(player, 'BackgroundObjectPogos')))))
    fn("Boss_Geo-Elegant_Soul_Warrior", lambda state: (state.count('Ruins1_31b[right1]', player) or state.count('Ruins1_31b[right2]', player)) and state.count('Defeated_Elegant_Warrior', player))
    fn("Boss_Geo-Crystal_Guardian", lambda state: (state.count('Mines_18[left1]', player) or state.count('Mines_18[right1]', player) or state.count('Mines_18[top1]', player)) and state.count('Defeated_Crystal_Guardian', player))
    fn("Boss_Geo-Enraged_Guardian", lambda state: state.count('Mines_32[bot1]', player) and state.count('Defeated_Enraged_Guardian', player))
    fn("Boss_Geo-Gruz_Mother", lambda state: (state.count('Crossroads_04[left1]', player) or state.count('Crossroads_04[door_Mender_House]', player) or state.count('Crossroads_04[door1]', player) or state.count('Crossroads_04[door_charmshop]', player) or state.count('Crossroads_04[right1]', player) or state.count('Crossroads_04[top1]', player)) and state.count('Defeated_Gruz_Mother', player))
    fn("Boss_Geo-Vengefly_King", lambda state: (state.count('Fungus1_20_v02[bot1]', player) or state.count('Fungus1_20_v02[bot2]', player) or state.count('Fungus1_20_v02[right1]', player)) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state._hk_option(player, 'EnemyPogos') or state.count('FIREBALL', player) or state.count('QUAKE', player) or state.count('SCREAM', player) or state.count('WINGS', player) or state.count('Cyclone_Slash', player) or state.count('Great_Slash', player) or ((state.count('LEFTDASH', player) or state.count('RIGHTDASH', player)) and state.count('Dash_Slash', player))))
    fn("Soul_Totem-Basin", lambda state: state.count('Abyss_04[top1]', player) or ((state.count('Abyss_04[left1]', player) or state.count('Abyss_04[right1]', player) or state.count('Abyss_04[bot1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos')))))
    fn("Soul_Totem-Cliffs_Main", lambda state: state.count('Cliffs_01', player))
    fn("Soul_Totem-Cliffs_Gorb", lambda state: state.count('Cliffs_02', player))
    fn("Soul_Totem-Cliffs_Joni's", lambda state: (state.count('Cliffs_04[left1]', player) or state.count('Cliffs_04[right1]', player)) and (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')))
    fn("Soul_Totem-Crossroads_Goam_Journal", lambda state: state.count('Crossroads_18[right1]', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or (state.count('LEFTCLAW', player) and (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)) or (state._hk_option(player, 'InfectionSkips') and state.count('DREAMER', player))))) or ((state.count('Crossroads_18[bot1]', player) or state.count('Crossroads_18[right2]', player)) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or state.count('LEFTCLAW', player))))
    fn("Soul_Totem-Crossroads_Shops", lambda state: state.count('Crossroads_19', player))
    fn("Soul_Totem-Crossroads_Mawlek_Upper", lambda state: state.count('Crossroads_25[left1]', player) or state.count('Crossroads_25[right1]', player))
    fn("Soul_Totem-Crossroads_Acid", lambda state: state.count('Crossroads_35[right1]', player) and (state._hk_option(player, 'AcidSkips') and (state.count('LEFTCLAW', player) and state.count('RIGHTSUPERDASH', player) and (state.count('WINGS', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state.count('RIGHTDASH', player))) or state.count('ACID', player)) or state.count('Crossroads_35[bot1]', player))
    fn("Soul_Totem-Crossroads_Mawlek_Lower", lambda state: state.count('Crossroads_36[right1]', player) or state.count('Crossroads_36[right2]', player))
    fn("Soul_Totem-Crossroads_Myla", lambda state: state.count('Crossroads_45[left1]', player) or state.count('Crossroads_45[right1]', player))
    fn("Soul_Totem-Ancestral_Mound", lambda state: state.count('Crossroads_ShamanTemple[left1]', player) and (((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('UPSLASH', player) or state.count('FIREBALL', player) or state.count('SCREAM', player) or state.count('QUAKE', player) or state.count('CYCLONE', player) or state.count('Great_Slash', player) or (state.count('Dash_Slash', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))) or ((state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player) or (state.count('RIGHTSUPERDASH', player) and state.count('LEFTCLAW', player))) and state._hk_option(player, 'ObscureSkips'))))
    fn("Soul_Totem-Distant_Village", lambda state: state.count('Deepnest_10[door1]', player) or state.count('Deepnest_10[door2]', player) or state.count('Deepnest_10[right1]', player) or (state.count('Deepnest_10[right2]', player) and (state.count('LEFTDASH', player) or ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state._hk_option(player, 'PreciseMovement')) or state.count('WINGS', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))))))
    fn("Soul_Totem-Deepnest_Vessel", lambda state: state.count('Deepnest_38[bot1]', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)))
    fn("Soul_Totem-Mask_Maker", lambda state: (state.count('LANTERN', player) or state._hk_option(player, 'DarkRooms')) and (state.count('Deepnest_42[left1]', player) or state.count('Deepnest_42[bot1]', player) or state.count('Deepnest_42[top1]', player)))
    fn("Soul_Totem-Lower_Kingdom's_Edge_1", lambda state: state.count('Deepnest_East_01[top1]', player) or state.count('Deepnest_East_01[bot1]', player) or state.count('Deepnest_East_01[right1]', player))
    fn("Soul_Totem-Lower_Kingdom's_Edge_2", lambda state: (state.count('Deepnest_East_02[top1]', player) or state.count('Deepnest_East_02[bot1]', player) or state.count('Deepnest_East_02[right1]', player)) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player) or state.count('ACID', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) or state._hk_option(player, 'EnemyPogos')))
    fn("Soul_Totem-Upper_Kingdom's_Edge", lambda state: state.count('Deepnest_East_07', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('Deepnest_East_07[left1]', player)))
    fn("Soul_Totem-Kingdom's_Edge_Camp", lambda state: (state.count('Deepnest_East_11[left1]', player) or state.count('Deepnest_East_11[top1]', player) or state.count('Deepnest_East_11[right1]', player) or (state.count('Deepnest_East_11[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')))) and (state.count('LEFTDASH', player) or state.count('LEFTCLAW', player) or state.count('WINGS', player) or state._hk_option(player, 'DifficultSkips')))
    fn("Soul_Totem-Oro_Dive_2", lambda state: state.count('Deepnest_East_14[top2]', player) and state.count('QUAKE', player) and (state.count('RIGHTCLAW', player) or state.count('WINGS', player)))
    fn("Soul_Totem-Oro_Dive_1", lambda state: state.count('Deepnest_East_14[top2]', player))
    fn("Soul_Totem-Oro", lambda state: state.count('Deepnest_East_16[left1]', player) or state.count('Deepnest_East_16[bot1]', player))
    fn("Soul_Totem-420_Geo_Rock", lambda state: state.count('Deepnest_East_17[left1]', player) and state.count('QUAKE', player))
    fn("Soul_Totem-Beast's_Den", lambda state: state.count('Deepnest_Spider_Town[left1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player)))
    fn("Soul_Totem-Greenpath_Hunter's_Journal", lambda state: state.count('Fungus1_07[top1]', player) or state.count('Fungus1_07[right1]', player) or state.count('Fungus1_07[left1]', player))
    fn("Soul_Totem-Greenpath_MMC", lambda state: state.count('Fungus1_29[left1]', player) or state.count('Fungus1_29[right1]', player))
    fn("Soul_Totem-Greenpath_Below_Toll", lambda state: state.count('Fungus1_30', player))
    fn("Soul_Totem-Before_Pilgrim's_Way", lambda state: state.count('Fungus2_10[right1]', player) or state.count('Fungus2_10[right2]', player) or state.count('Fungus2_10[bot1]', player))
    fn("Soul_Totem-Pilgrim's_Way", lambda state: state.count('Fungus2_21[left1]', player) and (state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player))) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state.count('ACID', player)) or (state.count('Fungus2_21[right1]', player) and ((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player))) and state.count('QUAKE', player)))
    fn("Soul_Totem-Fungal_Core", lambda state: state.count('Fungus2_29[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) or (state.count('Fungus2_29[bot1]', player) and (state.count('LEFTCLAW', player) or state.count('WINGS', player))))
    fn("Soul_Totem-Top_Left_Queen's_Gardens", lambda state: state.count('Fungus3_21[right1]', player) and (state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))))) or (state.count('Fungus3_21[top1]', player) and state.count('RIGHTDASH', player)))
    fn("Soul_Totem-Below_Marmu", lambda state: state.count('Fungus3_40[top1]', player) or (state.count('Fungus3_40[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('LEFTSUPERDASH', player)) or state.count('WINGS', player) or state.count('LEFTDASH', player))))
    fn("Soul_Totem-Upper_Crystal_Peak", lambda state: state.count('Mines_20', player) or state.count('Mines_20[left2]', player) or ((state.count('Mines_20[left3]', player) or state.count('Mines_20[bot1]', player)) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player))))
    fn("Soul_Totem-Hallownest_Crown", lambda state: (state.count('Mines_25[left1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or (state.count('WINGS', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))) or state.count('Mines_25[top1]', player)) and state.count('QUAKE', player))
    fn("Soul_Totem-Outside_Crystallized_Mound", lambda state: state.count('Mines_28[door1]', player) or (state.count('Mines_28[left1]', player) and (state.count('WINGS', player) and state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and (state.count('WINGS', player) or state.count('RIGHTDASH', player))))))
    fn("Soul_Totem-Crystal_Heart_1", lambda state: state.count('Mines_31[left1]', player) and (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) or (state.count('RIGHTSUPERDASH', player) and state._hk_option(player, 'PreciseMovement'))) or (state.count('RIGHTCLAW', player) and state.count('RIGHTSUPERDASH', player) and state.count('RIGHTDASH', player) and state.count('WINGS', player)) or (state.count('WINGS', player) and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Soul_Totem-Crystal_Heart_2", lambda state: state.count('Mines_31[left1]', player) and (state.count('LEFTCLAW', player) and (state.count('RIGHTDASH', player) or state.count('WINGS', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player)))) or (state.count('RIGHTCLAW', player) and state.count('RIGHTSUPERDASH', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('WINGS', player)) or (state.count('WINGS', player) and state._hk_option(player, 'ShadeSkips') and (state.count('MASKSHARDS', player) > 15))))
    fn("Soul_Totem-Crystallized_Mound", lambda state: state.count('Mines_35[left1]', player) and state.count('QUAKE', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'PreciseMovement') and (state.count('RIGHTDASH', player) or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))))) or state.count('WINGS', player)) and (state.count('WINGS', player) or state.count('LEFTDASH', player) or state._hk_option(player, 'BackgroundObjectPogos')))
    fn("Soul_Totem-Resting_Grounds", lambda state: state.count('RestingGrounds_05', player))
    fn("Soul_Totem-Below_Xero", lambda state: state.count('RestingGrounds_06[left1]', player) or state.count('RestingGrounds_06[right1]', player) or state.count('RestingGrounds_06[top1]', player))
    fn("Soul_Totem-Sanctum_Below_Soul_Master", lambda state: state.count('Ruins1_24[left2]', player) or state.count('Ruins1_24[right2]', player))
    fn("Soul_Totem-Sanctum_Below_Chest", lambda state: state.count('Ruins1_32[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)))
    fn("Soul_Totem-Sanctum_Above_Grub", lambda state: state.count('Ruins1_32[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('QUAKE', player))
    fn("Soul_Totem-Waterways_Entrance", lambda state: state.count('Waterways_01', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player)) or ((state.count('Waterways_01[top1]', player) or state.count('Waterways_01[right1]', player)) and (state.count('LEFTDASH', player) or state._hk_option(player, 'EnemyPogos') or (state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) or state._hk_option(player, 'ShadeSkips'))))
    fn("Soul_Totem-Top_Left_Waterways", lambda state: state.count('Waterways_04b[left1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips'))) or (state.count('Waterways_04b[right1]', player) and (state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('SWIM', player) or (state.count('RIGHTCLAW', player) and state.count('RIGHTDASH', player) and state.count('LEFTSUPERDASH', player))) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips')))) or (state.count('Waterways_04b[right2]', player) and (state.count('WINGS', player) or (state.count('LEFTCLAW', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips'))) and (state.count('LEFTCLAW', player) or state._hk_option(player, 'EnemyPogos')) and (state.count('SWIM', player) or (state.count('LEFTSUPERDASH', player) and state.count('RIGHTCLAW', player))) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or (state.count('WINGS', player) and state._hk_option(player, 'EnemyPogos') and state._hk_option(player, 'DangerousSkips')))))
    fn("Soul_Totem-Waterways_East", lambda state: state.count('Waterways_07', player) and (state.count('LEFTCLAW', player) and (state.count('LEFTDASH', player) or state.count('WINGS', player) or state.count('LEFTSUPERDASH', player) or ((state._hk_option(player, 'FireballSkips') and (state.count('FIREBALL', player) or state.count('SCREAM', player))) and state.count('RIGHTCLAW', player)) or state._hk_option(player, 'EnemyPogos')) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player))))
    fn("Soul_Totem-Waterways_Flukemarm", lambda state: state.count('Waterways_08[top1]', player) and (state._hk_option(player, 'EnemyPogos') or state.count('RIGHTCLAW', player) or state.count('WINGS', player) or state.count('RIGHTSUPERDASH', player)) or state.count('Waterways_08[left1]', player) or state.count('Waterways_08[left2]', player))
    fn("Soul_Totem-White_Palace_Entrance", lambda state: state.count('White_Palace_02[left1]', player) and (state.count('LEFTCLAW', player) and state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('LEFTSUPERDASH', player))))
    fn("Soul_Totem-White_Palace_Hub", lambda state: state.count('White_Palace_03_hub', player) and (state.count('LEFTDASH', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state.count('White_Palace_03_hub[left1]', player)))
    fn("Soul_Totem-White_Palace_Left", lambda state: state.count('White_Palace_04[right2]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player) or state.count('White_Palace_04[top1]', player))
    fn("Soul_Totem-White_Palace_Final", lambda state: state.count('White_Palace_09[right1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player)) and state.count('LEFTSUPERDASH', player))
    fn("Soul_Totem-White_Palace_Right", lambda state: state.count('White_Palace_15[right1]', player))
    fn("Soul_Totem-Path_of_Pain_Below_Lever", lambda state: state.count('White_Palace_17[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player))
    fn("Soul_Totem-Path_of_Pain_Left_of_Lever", lambda state: state.count('White_Palace_17[bot1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player))
    fn("Soul_Totem-Path_of_Pain_Entrance", lambda state: state.count('White_Palace_18[right1]', player) and ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state.count('WINGS', player) or state.count('LEFTSUPERDASH', player)) or (state.count('White_Palace_18[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))))
    fn("Soul_Totem-Path_of_Pain_Second", lambda state: state.count('White_Palace_18[right1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) or (state.count('White_Palace_18[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))))
    fn("Soul_Totem-Path_of_Pain_Hidden", lambda state: (state.count('White_Palace_19[left1]', player) or state.count('White_Palace_19[top1]', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)))
    fn("Soul_Totem-Path_of_Pain_Below_Thornskip", lambda state: state.count('White_Palace_19[left1]', player) or (state.count('White_Palace_19[top1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player))))
    fn("Soul_Totem-Path_of_Pain_Final", lambda state: state.count('White_Palace_20[bot1]', player) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)))
    fn("Soul_Totem-Pale_Lurker", lambda state: state.count('GG_Lurker[left1]', player))
    fn("Lore_Tablet-City_Entrance", lambda state: state.count('Ruins1_02[top1]', player) or (state.count('Ruins1_02[bot1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Lore_Tablet-Pleasure_House", lambda state: state.count('Ruins_Elevator[left1]', player) or state.count('Ruins_Elevator[left2]', player))
    fn("Lore_Tablet-Sanctum_Entrance", lambda state: (state.count('Ruins1_23[left1]', player) or state.count('Ruins1_23[bot1]', player) or state.count('Ruins1_23[right2]', player)) and (state.count('LEFTCLAW', player) or state.count('WINGS', player) or (state.count('RIGHTCLAW', player) and state._hk_option(player, 'EnemyPogos'))))
    fn("Lore_Tablet-Sanctum_Past_Soul_Master", lambda state: state.count('Ruins1_32[right1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('QUAKE', player))
    fn("Lore_Tablet-Watcher's_Spire", lambda state: state.count('Ruins2_Watcher_Room[bot1]', player))
    fn("Lore_Tablet-Archives_Upper", lambda state: state.count('Fungus3_archive_02[top1]', player) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')))
    fn("Lore_Tablet-Archives_Left", lambda state: state.count('Fungus3_archive_02[top1]', player) and state.count('Defeated_Uumuu', player) and ((state.count('RIGHTCLAW', player) or (state.count('LEFTCLAW', player) and state.count('WINGS', player))) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player) or state.count('ACID', player)) or (state._hk_option(player, 'AcidSkips') and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player))))
    fn("Lore_Tablet-Archives_Right", lambda state: state.count('Fungus3_archive_02[top1]', player) and state.count('Defeated_Uumuu', player) and ((state.count('LEFTSUPERDASH', player) or state.count('RIGHTSUPERDASH', player)) or state.count('ACID', player) or (state._hk_option(player, 'AcidSkips') and state.count('LEFTDASH', player) and state.count('LEFTCLAW', player) and state.count('WINGS', player))))
    fn("Lore_Tablet-Pilgrim's_Way_1", lambda state: state.count('Crossroads_11_alt[right1]', player))
    fn("Lore_Tablet-Pilgrim's_Way_2", lambda state: state.count('Fungus2_21[left1]', player) or (((state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player)) or ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player))) and state.count('QUAKE', player) and state.count('Fungus2_21[right1]', player)))
    fn("Lore_Tablet-Mantis_Outskirts", lambda state: state.count('Fungus2_12[bot1]', player) or state.count('Fungus2_12[left1]', player))
    fn("Lore_Tablet-Mantis_Village", lambda state: state.count('Fungus2_14[top1]', player) or (state.count('Fungus2_14', player) and (state.count('WINGS', player) or state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player) or (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) or state._hk_option(player, 'EnemyPogos')) and (state.count('RIGHTCLAW', player) and (state.count('WINGS', player) or state._hk_option(player, 'EnemyPogos')) or state.count('LEFTCLAW', player))))
    fn("Lore_Tablet-Greenpath_Upper_Hidden", lambda state: state.count('Fungus1_17[left1]', player) or state.count('Fungus1_17[right1]', player))
    fn("Lore_Tablet-Greenpath_Below_Toll", lambda state: state.count('Fungus1_30', player))
    fn("Lore_Tablet-Greenpath_Lifeblood", lambda state: state.count('Fungus1_32[bot1]', player) or state.count('Fungus1_32[top1]', player) or state.count('Fungus1_32[left1]', player))
    fn("Lore_Tablet-Greenpath_Stag", lambda state: state.count('Fungus1_21', player))
    fn("Lore_Tablet-Greenpath_QG", lambda state: state.count('Fungus1_13[left1]', player) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('Cyclone_Slash', player) or state.count('Great_Slash', player) or (state.count('RIGHTDASH', player) and state.count('Dash_Slash', player))) or (state.count('Fungus1_13[right1]', player) and (state.count('LEFTCLAW', player) or (state.count('RIGHTCLAW', player) and state.count('WINGS', player) and (state.count('LEFTDASH', player) or state.count('LEFTSUPERDASH', player))) or ((state.count('WINGS', player) or state.count('LEFTSUPERDASH', player)) and state._hk_option(player, 'DamageBoosts') and (state.count('MASKSHARDS', player) > 7))) and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('Cyclone_Slash', player) or state.count('Great_Slash', player) or (state.count('LEFTDASH', player) and state.count('Dash_Slash', player)))) or (False and ((state.count('LEFTSLASH', player) or state.count('RIGHTSLASH', player)) or state.count('Cyclone_Slash', player) or state.count('Great_Slash', player) or (state.count('LEFTDASH', player) and state.count('Dash_Slash', player)))))
    fn("Lore_Tablet-Greenpath_Lower_Hidden", lambda state: state.count('Fungus1_19[bot1]', player) or state.count('Fungus1_19[left1]', player) or state.count('Fungus1_19[right1]', player))
    fn("Lore_Tablet-Dung_Defender", lambda state: state.count('Waterways_07', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or ((state.count('Waterways_07[door1]', player) or state.count('Waterways_07[top1]', player) or state.count('Waterways_07[right1]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player))))
    fn("Lore_Tablet-Spore_Shroom", lambda state: (state.count('Fungus2_20[left1]', player) or state.count('Fungus2_20[right1]', player)) and (state.count('RIGHTDASH', player) or state.count('RIGHTSUPERDASH', player) or state.count('WINGS', player)) and state.count('Spore_Shroom', player))
    fn("Lore_Tablet-Fungal_Wastes_Hidden", lambda state: (state.count('Fungus2_07[left1]', player) or state.count('Fungus2_07[right1]', player)) and (state.count('LEFTCLAW', player) or (state.count('WINGS', player) and state.count('RIGHTCLAW', player))) and state.count('Spore_Shroom', player))
    fn("Lore_Tablet-Fungal_Wastes_Below_Shrumal_Ogres", lambda state: state.count('Fungus2_04', player) and state.count('Spore_Shroom', player))
    fn("Lore_Tablet-Fungal_Core", lambda state: state.count('Fungus2_30[top1]', player) and state.count('Spore_Shroom', player))
    fn("Lore_Tablet-Ancient_Basin", lambda state: state.count('Abyss_06_Core[top1]', player))
    fn("Lore_Tablet-King's_Pass_Focus", lambda state: state.count('Tutorial_01', player))
    fn("Lore_Tablet-King's_Pass_Fury", lambda state: state.count('Tutorial_01', player))
    fn("Lore_Tablet-King's_Pass_Exit", lambda state: state.count('Tutorial_01', player))
    fn("Lore_Tablet-World_Sense", lambda state: state.count('Room_temple[left1]', player) and state.count('Opened_Black_Egg_Temple', player))
    fn("Lore_Tablet-Howling_Cliffs", lambda state: state.count('Cliffs_01[right1]', player) or state.count('Cliffs_01[right2]', player) or ((state.count('Cliffs_01[right3]', player) or state.count('Cliffs_01[right4]', player)) and ((state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) or state.count('WINGS', player) or ((state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and state._hk_option(player, 'EnemyPogos')))))
    fn("Lore_Tablet-Kingdom's_Edge", lambda state: state.count('Deepnest_East_17[left1]', player) and state.count('QUAKE', player) and state.count('Spore_Shroom', player))
    fn("Lore_Tablet-Palace_Workshop", lambda state: state.count('White_Palace_08[right1]', player) or (state.count('White_Palace_08[left1]', player) and (state.count('LEFTCLAW', player) or state.count('RIGHTCLAW', player)) and state.count('WINGS', player)))
    fn("Lore_Tablet-Palace_Throne", lambda state: state.count('White_Palace_09[right1]', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player) or state.count('WINGS', player)))
    fn("Lore_Tablet-Path_of_Pain_Entrance", lambda state: state.count('White_Palace_18[right1]', player) or (state.count('White_Palace_18[top1]', player) and (state.count('LEFTDASH', player) and state.count('RIGHTDASH', player)) and (state.count('LEFTCLAW', player) and state.count('RIGHTCLAW', player)) and state.count('WINGS', player) and (state.count('LEFTSUPERDASH', player) and state.count('RIGHTSUPERDASH', player))))
    fn("Salubra_(Requires_Charms)", lambda state: state.count('Room_Charm_Shop[left1]', player))

    # Connectors
    