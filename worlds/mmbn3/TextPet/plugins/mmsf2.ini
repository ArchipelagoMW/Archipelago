[CommandDatabase]
name = mmsf2
cont = 255
splt = keyWait1 clearMsg



#[Command]
#name = nop
#mask = FF FF
#desc = Does nothing.
#base = E5 00



[Command]
name = end
mask = FF
desc = Closes any open message box and ends script execution.
base = E6
ends = always
lahd = true
plen = 1



[Command]
name = endOption
mask = FF FF
desc = Ends printing text to the current option label.
base = E6 EB
prnt = true



[Command]
name = keyWait0
mask = FF FF
desc = Pauses script execution until a button is pressed.
base = E7 00



[Command]
name = keyWait1
mask = FF FF
desc = Pauses script execution until a button is pressed.
base = E7 01



[Command]
name = keyWait2
mask = FF FF
desc = Pauses script execution until a button is pressed.
base = E7 02



[Command]
name = msgOpen
mask = FF FF
desc = Opens the message box and waits until the animation finishes.
base = E8 00



[Command]
name = msgClose
mask = FF FF
desc = Closes the message box and waits until the animation finishes. The message box remains on-screen until script execution ends.
base = E8 01



[Command]
name = msgOpenQuick
mask = FF FF
desc = Opens the message box without any animation.
base = E8 02



[Command]
name = msgCloseQuick
mask = FF FF
desc = Closes the message box without any animation. The message box remains on-screen until script execution ends.
base = E8 03



#[Command]
#name = newline
#mask = FF FF
#desc = Continues printing text on the next line.
#base = E9 00



[Command]
name = flagSet
mask = FF FF 00 00
desc = Sets the specified flag.
base = EA 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to set.
type = hex



[Command]
name = flagClear
mask = FF FF 00 00
desc = Clears the specified flag.
base = EA 01

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to clear.
type = hex



[Command]
name = flagNextDay
mask = FF FF
desc = Prepares a save, and advances the game story to the next day. This command only functions at specific points in the story when the player must go to sleep.
base = EA 02



[Command]
name = flagSetBuffered
mask = FF FF 00
desc = Sets a buffered flag stored in memory.
base = EA 03

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the flag from.



[Command]
name = flagClearBuffered
mask = FF FF 00
desc = Clears a buffered flag stored in memory.
base = EA 04

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the flag from.



[Command]
name = optionButtonSmall12
mask = FF FF 00 00 00 00
desc = Prepares a half width option button for later display. The following 12 characters of text will be printed to the button. (TODO: This is 8 characters in RnR2!)
base = EB 00
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.

[Parameter]
name = string
desc = The string to print on the button. Must be exactly 12 characters long.
stro = 6
stru = char
strl = 12


[Command]
name = optionButtonWide24
mask = FF FF 00 00 00 00
desc = Prepares a full width option button for later display. The following 24 characters of text will be printed to the button. (TODO: This is 17 characters in RnR2!)
base = EB 01
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.

[Parameter]
name = string
desc = The string to print on the button. Must be exactly 24 characters long.
stro = 6
stru = char
strl = 24



[Command]
name = optionText
mask = FF FF 00 00 00 00
desc = Creates a cursor menu option at the current text position.
base = EB 02
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButtonSmall
mask = FF FF 00 00 00 00 00
desc = Prepares a half width option button for later display. The specified amount of characters will be printed to the button. In the Japanese version, the text is centered by the string length; in the international versions, it is left-aligned.
base = EB 03
prnt = true

[Parameter]
name = up
offs = 3
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 4
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 5
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 6
bits = 8
desc = Which option to go to when Right is pressed.

[Parameter]
name = string
offs = 2
bits = 8
desc = The string to print on the button.
stro = 7
stru = char



[Command]
name = optionButtonWide
mask = FF FF 00 00 00 00 00
desc = Prepares a full width option button for later display. The specified amount of characters will be printed to the button. In the Japanese version, the text is centered by the string length; in the international versions, it is left-aligned.
base = EB 04
prnt = true

[Parameter]
name = up
offs = 3
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 4
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 5
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 6
bits = 8
desc = Which option to go to when Right is pressed.

[Parameter]
name = string
offs = 2
bits = 8
desc = The string to print on the button.
stro = 7
stru = char



[Command]
name = optionButtonSmallBegin
mask = FF FF 00 00 00 00
desc = Prepares a half width option button for later display. The following characters will be printed to the button until the endOption command is encountered. The text is left-aligned.
base = EB 05
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButtonWideBegin
mask = FF FF 00 00 00 00
desc = Prepares a full width option button for later display. The following characters will be printed to the button until the endOption command is encountered. The text is left-aligned.
base = EB 06
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButtonSmallBeginCenter
mask = FF FF 00 00 00 00 00
desc = Prepares a half width option button for later display. The following characters will be printed to the button until the endOption command is encountered. In the Japanese version, the text is centered by the specified number of characters; in the international versions, it is left-aligned.
base = EB 07
prnt = true

[Parameter]
name = length
offs = 2
bits = 8
desc = The character count of the string to be printed, used for centering.

[Parameter]
name = up
offs = 3
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 4
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 5
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 6
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButtonWideBeginCenter
mask = FF FF 00 00 00 00 00
desc = Prepares a full width option button for later display. The following characters will be printed to the button until the endOption command is encountered. In the Japanese version, the text is centered by the specified number of characters; in the international versions, it is left-aligned.
base = EB 08
prnt = true

[Parameter]
name = length
offs = 2
bits = 8
desc = The character count of the string to be printed, used for centering.

[Parameter]
name = up
offs = 3
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 4
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 5
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 6
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButtonSmallBeginAutoCenter
mask = FF FF 00 00 00 00
desc = Prepares a half width option button for later display. The following characters will be printed to the button until the endOption command is encountered. In the Japanese version, the text is automatically centered by the final text width; in the international versions, it is left-aligned.
base = EB 09
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButtonWideBeginAutoCenter
mask = FF FF 00 00 00 00
desc = Prepares a full width option button for later display. The following characters will be printed to the button until the endOption command is encountered. In the Japanese version, the text is automatically centered by the final text width; in the international versions, it is left-aligned.
base = EB 0A
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = space
mask = FF FF 00
desc = Moves the text position to the right in blocks of space widths.
base = EC 00
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to insert.



[Command]
name = spacePx
mask = FF FF 00
desc = Moves the text position to the right a number of pixels.
base = EC 01
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of pixels to insert.



[Command]
name = selectButtonRow2
mask = FF FF 00 00 00 00
desc = Displays a button layout with 2 half width buttons in a row. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 00
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonColumn2
mask = FF FF 00 00 00 00
desc = Displays a button layout with 2 full width buttons in a column. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 01
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonColumn3
mask = FF FF 00 00 00 00 00
desc = Displays a button layout with 3 full width buttons in a column. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 02
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonSquare4
mask = FF FF 00 00 00 00 00 00
desc = Displays a button layout with 4 half width buttons in a square. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 03
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 7
bits = 8
desc = The script to jump to when option 5 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectText
mask = FF FF 00 00 00 00 00 00 00 00 00
desc = Displays options in the text box. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 04
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = unused
offs = 2.6
bits = 2
desc = Unused parameter.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 7
bits = 8
desc = The script to jump to when option 5 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump6
offs = 8
bits = 8
desc = The script to jump to when option 6 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump7
offs = 9
bits = 8
desc = The script to jump to when option 7 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump8
offs = 10
bits = 8
desc = The script to jump to when option 8 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonSingle
mask = FF FF 00 00
desc = Displays a button layout with 1 single button. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 05
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonWifiRow2
mask = FF FF 00 00 00 00
desc = Displays a button layout with 2 half width buttons in a row. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. Each button has a Wi-Fi icon next to it.
base = ED 06
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonWifiColumn2
mask = FF FF 00 00 00 00
desc = Displays a button layout with 2 full width buttons in a column. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. Each button has a Wi-Fi icon next to it.
base = ED 07
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonColumn4
mask = FF FF 00 00 00 00 00 00
desc = Displays a button layout with 4 full width buttons in a column. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 08
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 7
bits = 8
desc = The script to jump to when option 5 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = wait
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames.
base = EE 00
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The amount of frames to wait.



[Command]
name = waitFlag
mask = FF FF 00 00
desc = Pauses script execution until the specified flag is set.
base = EE 01
prnt = true

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag that must be set before script execution may continue.
type = hex



[Command]
name = waitHold
; NOTE: unlike MMBN, this command is only 2 bytes long
mask = FF FF
desc = Pauses script execution indefinitely.
base = EE 02
ends = always



[Command]
name = waitOWVar
mask = FF FF 00 00
desc = Pauses script execution until the specified overworld variable equals a specific value.
base = EE 03
prnt = true

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value the variable must be equal to before script execution may continue.



[Command]
name = waitSkip
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames, unless the A or B button has been pressed.
base = EE 04
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The maximum amount of frames to wait.



[Command]
name = waitTopScreenTransition
mask = FF FF
desc = Pauses script execution while the top screen is in the middle of a screen transition.
base = EE 05
prnt = true



[Command]
name = checkFlag
mask = FF FF 00 00 00 00
desc = Checks the specified flag, and jumps to a different script depending on if it is true or false.
base = EF 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to check.
type = hex

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChapter
mask = FF FF 00 00 00 00
desc = Checks the current story chapter, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EF 01

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the current story chapter falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the current story chapter falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSubArea
mask = FF FF 00 00 00 00
desc = Checks the current subarea, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EF 02

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the subarea falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the subarea falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkAreaSubArea
mask = FF FF 00 00 00 00
desc = Checks the current area and subarea, and jumps to a different script depending on if it equals the specified area and subarea.
base = EF 03

[Parameter]
name = area
offs = 2
bits = 8
desc = The area to compare to.

[Parameter]
name = subarea
offs = 3
bits = 8
desc = The subarea to compare to.

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the player is in the specified area and subarea, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the player is not in the specified area and subarea, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGameVersion
mask = FF FF 00 00 00
desc = Checks the current game version, and jumps to a different script depending on if the current game is Zerker, Ninja or Saurian.
base = EF 04

[Parameter]
name = jumpIfZerker
offs = 2
bits = 8
desc = The script to jump to if the current game is Zerker, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNinja
offs = 3
bits = 8
desc = The script to jump to if the current game is Ninja, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSaurian
offs = 4
bits = 8
desc = The script to jump to if the current game is Saurian, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = check05
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes? (TODO)
base = EF 05

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check06
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes? (TODO)
base = EF 06

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check07
mask = FF FF 00 00 00 00 00 00
desc = Clears 0x14 bytes? (TODO, longer than SF1?)
base = EF 07

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO

[Parameter]
name = unused6
offs = 7
bits = 8
desc = TODO



[Command]
name = checkTakeZenny
mask = FF FF 00 00 00 00 00 00
desc = Attempts to take from the player's inventory a specified amount of Zenny, but only if the player has enough, and jumps to a different script depending on how much the player had.
base = EF 08

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny to take.

[Parameter]
name = jumpIfEnough
offs = 6
bits = 8
desc = The script to jump to if the amount of Zenny was equal to or greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 7
bits = 8
desc = The script to jump to if the amount of Zenny was less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = check09
mask = FF FF 00 00 00 00 00 00 00
desc = Clears 0x14 bytes? (TODO, longer than SF1?)
base = EF 09

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO

[Parameter]
name = unused6
offs = 7
bits = 8
desc = TODO

[Parameter]
name = unused7
offs = 8
bits = 8
desc = TODO



[Command]
name = check0A
mask = FF FF 00 00 00 00 00 00 00
desc = Clears 0x14 bytes? (TODO, longer than SF1?)
base = EF 0A

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO

[Parameter]
name = unused6
offs = 7
bits = 8
desc = TODO

[Parameter]
name = unused7
offs = 8
bits = 8
desc = TODO



[Command]
name = checkSaveExists
mask = FF FF 00 00
desc = Checks if save data already exists, and jumps to a different script depending on if it does.
base = EF 0B

[Parameter]
name = jumpIfExists
offs = 2
bits = 8
desc = The script to jump to if save data already exists, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotExists
offs = 3
bits = 8
desc = The script to jump to if there is no save data yet, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveFinished
mask = FF FF 00 00
desc = Waits until the save finishes, and jumps to a different script depending on if it was successful or not.
base = EF 0C

[Parameter]
name = jumpIfSuccessful
offs = 2
bits = 8
desc = The script to jump to if the save succeeded, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFailed
offs = 3
bits = 8
desc = The script to jump to if the save failed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveStart
mask = FF FF 00
desc = Starts a game save and jumps to a different script once the save has started. This command is a holdover from Star Force 1; in Star Force 2, the save may be erased instead.
base = EF 0D

[Parameter]
name = jumpIfStarted
offs = 2
bits = 8
desc = The script to jump to once the save has started.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveInitFinished
mask = FF FF 00
desc = Waits until the save data initialization finishes, and jumps to a different script if it was successful. Otherwise, continues with the current script.
base = EF 0E
ends = never

[Parameter]
name = jumpIfSuccessful
offs = 2
bits = 8
desc = The script to jump to if save data initialization was successful, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveInit
mask = FF FF 00
desc = Initializes the save data, and jumps to a different script if it failed. Otherwise, continues with the current script.
base = EF 0F
ends = never

[Parameter]
name = jumpIfFailed
offs = 2
bits = 8
desc = The script to jump to if save data initialization failed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkItem
mask = FF FF 00 00 00 00 00
desc = Checks how many of the specified item are in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EF 10

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to check the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 5
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 6
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBoxBattleCard
mask = FF FF 00 00 00 00 00 00
desc = Checks how many of the specified Battle Card with the specified color are in the player's Card Box, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EF 11

[Parameter]
name = card
offs = 2
bits = 16
desc = The Battle Card to check.

[Parameter]
name = amount
offs = 4
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 5
bits = 8
desc = The script to jump to if the number of Battle Cards is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 6
bits = 8
desc = The script to jump to if the number of Battle Cards is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 7
bits = 8
desc = The script to jump to if the number of Battle Cards is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkMultiFlag
mask = FF FF 00 00 00 00 00 00
desc = Checks a series of flags starting at the specified flag, and jumps to a different script depending on if they are all set.
base = EF 12

[Parameter]
name = flag
offs = 2
bits = 16
desc = The first flag to check.
type = hex

[Parameter]
name = count
offs = 4
bits = 16
desc = The amount of subsequent flags to check.

[Parameter]
name = jumpIfAllSet
offs = 6
bits = 8
desc = The script to jump to if all flags are set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotAllSet
offs = 7
bits = 8
desc = The script to jump to if not all flags are set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkRandom
mask = FF FF 00 00 00 00 00 00 00 00
desc = Picks a random number between 1 and 8, and jumps to a different script depending on the chosen number. Each has an equal chance of being chosen.
base = EF 13

[Parameter]
name = jump1
offs = 2
bits = 8
desc = The script to jump to if the random number 1 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 3
bits = 8
desc = The script to jump to if the random number 2 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 4
bits = 8
desc = The script to jump to if the random number 3 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 5
bits = 8
desc = The script to jump to if the random number 4 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 6
bits = 8
desc = The script to jump to if the random number 5 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump6
offs = 7
bits = 8
desc = The script to jump to if the random number 6 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump7
offs = 8
bits = 8
desc = The script to jump to if the random number 7 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump8
offs = 9
bits = 8
desc = The script to jump to if the random number 8 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShopStock
mask = FF FF 00 00 00
desc = Supposed to check the stock of the specified shop, and jump to a different script depending on if the shop is all sold out. However, this command does nothing in Star Force 2.
base = EF 14

[Parameter]
name = shop
offs = 2
bits = 8
desc = The shop to check the stock of.

[Parameter]
name = jumpIfStocked
offs = 3
bits = 8
desc = The script to jump to if the shop still has stock, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSoldOut
offs = 4
bits = 8
desc = The script to jump to if the shop is all sold out, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkZenny
mask = FF FF 00 00 00 00 00 00
desc = Checks how much Zenny is in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EF 15

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount to compare to.

[Parameter]
name = jumpIfEnough
offs = 6
bits = 8
desc = The script to jump to if the amount of Zenny is equal to or greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 7
bits = 8
desc = The script to jump to if the amount of Zenny is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkRealBrothers
mask = FF FF 00 00 00 00 00 00 00
desc = Checks the amount of real, non-ingame Brothers the player has, and jumps to a different script depending on the amount.
base = EF 16

[Parameter]
name = jumpIf0
offs = 2
bits = 8
desc = The script to jump to if the player has 0 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf1
offs = 3
bits = 8
desc = The script to jump to if the player has 1 real Brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf2
offs = 4
bits = 8
desc = The script to jump to if the player has 2 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf3
offs = 5
bits = 8
desc = The script to jump to if the player has 3 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf4
offs = 6
bits = 8
desc = The script to jump to if the player has 4 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf5
offs = 7
bits = 8
desc = The script to jump to if the player has 5 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf6
offs = 8
bits = 8
desc = The script to jump to if the player has 6 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSatelliteRegistration
mask = FF FF 00 00 00
desc = This command is a holdover from Star Force 1 and does nothing in Star Force 2. Originally: checks if the player or one of their Brothers is registered with the specified Satellite, and jumps to a different script depending on if they are.
base = EF 17

[Parameter]
name = satellite
offs = 2
bits = 8
desc = The Satellite to check registration with.

[Parameter]
name = jumpIfRegistered
offs = 3
bits = 8
desc = The script to jump to if the player or one of their Brothers is registered with the Satellite, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotRegistered
offs = 4
bits = 8
desc = The script to jump to if neither the player nor one of their Brothers is registered with the Satellite, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBoxCards
mask = FF FF 00 00 00 00
desc = Checks if the player has at least the specified amount of Battle Cards in their Card Box, and jumps to a different script depending on if they do.
base = EF 18

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of Battle Cards to compare to.

[Parameter]
name = jumpIfEnough
offs = 4
bits = 8
desc = The script to jump to if the player has at least the amount of Battle Cards in their Card Box, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 5
bits = 8
desc = The script to jump to if the player has less than the amount of Battle Cards in their Card Box, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBattleResult
mask = FF FF 00 00 00
desc = Jumps to a different script depending on the result of the last battle.
base = EF 19

[Parameter]
name = jumpIfWon
offs = 2
bits = 8
desc = The script to jump to if the player won the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLost
offs = 3
bits = 8
desc = The script to jump to if the player lost the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOther
offs = 4
bits = 8
desc = The script to jump to if the battle ended in some other way (such as escaping), or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBrotherExists
mask = FF FF 00 00
desc = This command is a holdover from Star Force 1 and does nothing in Star Force 2. Originally: checks if there is a Brother in the specified Brother slot, and jumps to a different script if there is not. Otherwise, continues with the current script.
base = EF 1A
ends = never

[Parameter]
name = brother
offs = 2
bits = 8
desc = The Brother slot to check

[Parameter]
name = jumpIfNotExists
offs = 3
bits = 8
desc = The script to jump to if there is no Brother in the specified slot, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkMarkFlag
mask = FF FF 00 00 00
desc = Checks the specified title screen mark flag, and jumps to a different script depending on if it is true or false.
base = EF 1B

[Parameter]
name = markFlag
offs = 2
bits = 8
desc = The title screen mark flag to check.

[Parameter]
name = jumpIfTrue
offs = 3
bits = 8
desc = The script to jump to if the title screen mark flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 4
bits = 8
desc = The script to jump to if the title screen mark flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibrary
mask = FF FF 00 00 00 00
desc = Checks the amount of Battle Cards in the player's specified Library, and jumps to a different script depending on if it is at least the specified amount.
base = EF 1C

[Parameter]
name = library
offs = 2
bits = 8
desc = The library to check. Possible values include: 0 = Standard, 1 = Mega, 2 = Giga.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of Battle Cards to compare to.

[Parameter]
name = jumpifEnough
offs = 4
bits = 8
desc = The script to jump to if the player's Library contains at least the specified amount of Battle Cards, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 5
bits = 8
desc = The script to jump to if the player's Library contains less than the specified amount of Battle Cards, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNoBrothers
mask = FF FF 00 00
desc = Checks if the player has no Brothers, and jumps to a different script depending on if they do.
base = EF 1D

[Parameter]
name = jumpIfNone
offs = 2
bits = 8
desc = The script to jump to if the player has no Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfAny
offs = 3
bits = 8
desc = The script to jump to if the player at least one Brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkAreaType
mask = FF FF 00 00 00
desc = Checks the type of area the player is currently in, and jumps to a different script depending on which it is.
base = EF 1E

[Parameter]
name = jumpIfRealWorld
offs = 2
bits = 8
desc = The script to jump to if the player is in the real world, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfWaveRoad
offs = 3
bits = 8
desc = The script to jump to if the player is on the Wave Road, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfComp
offs = 4
bits = 8
desc = The script to jump to if the player is in a Comp, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveStartOW
mask = FF FF 00
desc = Starts a game save on the overworld and jumps to a different script once the save has started. A save buffer must be previously allocated. This command is a holdover from Star Force 1; in Star Force 2, the save may be erased instead.
base = EF 1F

[Parameter]
name = jumpIfStarted
offs = 2
bits = 8
desc = The script to jump to once the save has started.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveAccess
mask = FF FF 00
desc = Initializes save data access, and jumps to a different script if an error occurred. Otherwise, continues with the current script.
base = EF 20
ends = never

[Parameter]
name = jumpIfError
offs = 2
bits = 8
desc = The script to jump to if there is an error accessing the save data, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBermudaMazeArea
mask = FF FF 00 00 00 00
desc = Checks which area of the Bermuda Maze the player is currently in, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EF 21

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The upper boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the current Bermuda Maze area falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the current Bermuda Maze area falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLinkPower
mask = FF FF 00 00 00 00
desc = Checks the player's current Link Power, and jumps to a different script depending on how it compares to a specified value.
base = EF 22

[Parameter]
name = value
offs = 2
bits = 16
desc = The Link Power value to compare with.

[Parameter]
name = jumpIfEnough
offs = 4
bits = 8
desc = The script to jump to if the player has enough Link Power, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 5
bits = 8
desc = The script to jump to if the player does not have enough Link Power, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBestComboDamage
mask = FF FF 00 00 00 00
desc = Checks the total recorded damage count of the player's currently equipped Best Combo, and jumps to a different script depending on how it compares to a specified value.
base = EF 23

[Parameter]
name = damage
offs = 2
bits = 16
desc = The damage value to compare to.

[Parameter]
name = jumpIfLess
offs = 4
bits = 8
desc = The script to jump to if the damage of the player's Best Combo is less than the specified value, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreaterOrEqual
offs = 5
bits = 8
desc = The script to jump to if the damage of the player's Best Combo is equal to or greater than the specified value, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNetworkBattlesResult
mask = FF FF 00 00 00
desc = Checks the results of the player's Network battles they have just completed, and jumps to a different script based on the results.
base = EF 24

[Parameter]
name = jumpIfWon
offs = 2
bits = 8
desc = The script to jump to if the player won at least one battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLost
offs = 3
bits = 8
desc = The script to jump to if the player did not win any battles, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfError
offs = 4
bits = 8
desc = The script to jump to if a communication error occurred, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkEventBrother
mask = FF FF 00 00 00
desc = Checks if the player is Brothers with the specified event Brother, and jumps to a different script depending on if they are.
base = EF 25

[Parameter]
name = brother
offs = 2
bits = 8
desc = The event Brother to check.

[Parameter]
name = jumpIfRegistered
offs = 3
bits = 8
desc = The script to jump to if the player has the specified event Brother registered, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotRegistered
offs = 4
bits = 8
desc = The script to jump to if the player does not have the specified event Brother registered, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSPBosses10Seconds
mask = FF FF 00 00
desc = Checks if the player has defeated all SP bosses in 10 seconds or less, and jumps to a different script depending on if they have.
base = EF 26

[Parameter]
name = jumpIfTrue
offs = 2
bits = 8
desc = The script to jump to if the player has defeated all SP bosses in 10 seconds or less, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 3
bits = 8
desc = The script to jump to if the player has not yet defeated all SP bosses in 10 seconds or less, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNetworkBattles
mask = FF FF 00 00 00 00
desc = Checks if the player has fought the specified number of Network battles, and jumps to a different script depending on if they have.
base = EF 27

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of Network battles to compare to.

[Parameter]
name = jumpIfEnough
offs = 4
bits = 8
desc = The script to jump to if the player has fought enough Network battles, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 5
bits = 8
desc = The script to jump to if the player has not yet fought enough Network battles, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkIndieProof
mask = FF FF 00 00
desc = Checks if the player has registered all six Indie Fragments, and jumps to a different script depending on if they have.
base = EF 28

[Parameter]
name = jumpIfTrue
offs = 2
bits = 8
desc = The script to jump to if the player has registered all six Indie Fragments, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 3
bits = 8
desc = The script to jump to if the player has not registered all six Indie Fragments, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkIsPulseInSpot
mask = FF FF 00 00
desc = Checks if the player is currently inspecting a pulse in spot for an EM Wave Space or Sky Wave, and jumps to a different script depending on if they are.
base = EF 29

[Parameter]
name = jumpIfTrue
offs = 2
bits = 8
desc = The script to jump to if the player is inspecting a pulse in spot, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 3
bits = 8
desc = The script to jump to if the player is not inspecting a pulse in spot, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkAutoBrotherType
mask = FF FF 00 00 00 00 00 00 00 00 00 00
desc = Checks the type of the player's Auto-Brother script and jumps to a different script depending on what type it is.
base = EF 2A

[Parameter]
name = jumpIfBoy
offs = 2
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Boy, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfTeenagerM
offs = 3
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Teenager M, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfYoungMan
offs = 4
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Young Man, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMan
offs = 5
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Man, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGrandpa
offs = 6
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Grandpa, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGirl
offs = 7
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Girl, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfTeenagerF
offs = 8
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Teenager F, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfYoungWoman
offs = 9
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Young Woman, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfWoman
offs = 10
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Woman, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGrandma
offs = 11
bits = 8
desc = The script to jump to if the player's Auto-Brother is of type Grandma, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTitleScreenMarks
mask = FF FF 00 00 00 00 00 00 00
desc = Checks the amount of title screen marks that the player has collected, and jumps to a different script depending on the amount.
base = EF 2B

[Parameter]
name = jumpIf0
offs = 2
bits = 8
desc = The script to jump to if the player has no title screen marks, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf1
offs = 3
bits = 8
desc = The script to jump to if the player has 1 title screen mark, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf2
offs = 4
bits = 8
desc = The script to jump to if the player has 2 title screen marks, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf3
offs = 5
bits = 8
desc = The script to jump to if the player has 3 title screen marks, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf4
offs = 6
bits = 8
desc = The script to jump to if the player has 4 title screen marks, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf5
offs = 7
bits = 8
desc = The script to jump to if the player has 5 title screen marks, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf6
offs = 8
bits = 8
desc = The script to jump to if the player has all 6 title screen marks, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkAutoBrotherModeChange
mask = FF FF 00 00 00
desc = Checks if the Auto-Brother's mode was changed to/from Manual Brother mode, and jumps to a different script depending on if it is.
base = EF 2C

[Parameter]
name = jumpIfNoChange
offs = 2
bits = 8
desc = The script to jump to if the Auto-Brother's mode has not changed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfAutoBrother
offs = 3
bits = 8
desc = The script to jump to if the mode was changed from Manual-Brother to Auto-Brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfManualBrother
offs = 4
bits = 8
desc = The script to jump to if the mode was changed from Auto-Brother to Manual-Brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNPCPersonalView
mask = FF FF 00 00 00 00
desc = Checks the NPC Personal View that the player is currently inspecting, and jumps to a different script depending on which it is.
base = EF 2D

[Parameter]
name = id
offs = 2
bits = 16
desc = The ID of the Personal View to compare against.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the player is inspecting the specified NPC's Personal View, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEqual
offs = 5
bits = 8
desc = The script to jump to if the player is inspecting some other NPC's Personal View, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkAbility
mask = FF FF 00 00 00 00
desc = Checks if the player has at least the specified amount of the specified ability, and jumps to a differenct script depending on if they do.
base = EF 2E

[Parameter]
name = ability
offs = 2
bits = 8
desc = The index of the ability to check for.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of the ability to check for.

[Parameter]
name = jumpIfEnough
offs = 4
bits = 8
desc = The script to jump to if the player has at least the specified amount of the specified ability, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 5
bits = 8
desc = The script to jump to if the player has less than the specified amount of the specified ability, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkVisualizerActive
mask = FF FF 00 00
desc = Checks if the Visualizer is currently active, and jumps to a different script depending on if it is. Note: being transformed into Mega Man does not count as the Visualizer being active.
base = EF 2F

[Parameter]
name = jumpIfTrue
offs = 2
bits = 8
desc = The script to jump to if the Visualizer is active, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 3
bits = 8
desc = The script to jump to if the Visualizer is not active, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkAutoBrotherDataUpdate
mask = FF FF 00 00
desc = Checks if the Auto-Brother has a pending data update, and jumps to a different script depending on if it does.
base = EF 30

[Parameter]
name = jumpIfTrue
offs = 2
bits = 8
desc = The script to jump to if the Auto-Brother has a pending data update, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 3
bits = 8
desc = The script to jump to if the Auto-Brother does not have a pending data update, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jump
mask = FF FF 00
desc = Jumps to a different script.
base = F0 00

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jumpStored
mask = FF FF
desc = Jumps to a previously stored script. If the script is 255, execution continues with the current script.
base = F0 01



[Command]
name = jumpBuffered
mask = FF FF 00
desc = Jumps to previously buffered different script. If the script is 255, execution continues with the current script.
base = F0 02

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the target script from.
type = jump
valn = mmbn-jump



[Command]
name = jumpBufferedSkip
mask = FF FF 00
desc = Jumps to previously buffered different script and skips to the end of the text box. If the script is 255, execution continues with the current script.
base = F0 03

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the target script from.
type = jump
valn = mmbn-jump



[Command]
name = jumpSkip
mask = FF FF 00
desc = Jumps to a different script and skips to the end of the text box.
base = F0 04

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jumpExternal
mask = FF FF 00
desc = Jumps to a script in a different text archive.
base = F0 05

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.



[Command]
name = textSpeed
mask = FF FF 00
desc = Changes the speed at which text is printed to the screen.
base = F1 00

[Parameter]
name = delay
offs = 2
bits = 8
desc = The amount of frames to wait after printing a character. The default is 2 frames. If set to 0, will only last until text printing stops.



[Command]
name = clearMsg
mask = FF FF
desc = Clears any currently open message box and resets the text printer position.
base = F2 00



[Command]
name = controlLock
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = F3 00



[Command]
name = controlUnlock
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = F3 01



[Command]
name = itemGive
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded.
base = F4 00

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give, or 255 to load from a previously buffered Mystery Data and buffer a value based on which item that was.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.



[Command]
name = itemTake
mask = FF FF 00 00
desc = Takes from the player's inventory a specified amount of the specified item, but only if the player has enough.
base = F4 01

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.



[Command]
name = itemGiveCard
mask = FF FF 00 00 00
desc = Plays the "item get" sound effect, and adds to the player's Card Box a specified amount of the specified card, or sets it to the maximum if that is exceeded.
base = F4 02

[Parameter]
name = card
offs = 2
bits = 16
desc = The card to give.

[Parameter]
name = amount
offs = 4
bits = 8
desc = The amount of cards to give.



[Command]
name = itemTakeCard
mask = FF FF 00 00 00
desc = Takes from the player's Card Box a specified amount of the specified card, but only if the player has enough.
base = F4 03

[Parameter]
name = card
offs = 2
bits = 16
desc = The card to take.

[Parameter]
name = amount
offs = 4
bits = 8
desc = The amount of card to take.



[Command]
name = itemGiveBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a previously buffered item, or sets it to the maximum if that is exceeded.
base = F4 04

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the item and amount from.



[Command]
name = itemTakeBuffered
mask = FF FF 00
desc = Takes from the player's inventory a previously buffered item, but only if the player has enough.
base = F4 05

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the item and amount from.



[Command]
name = itemGiveCardBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's Card Box a previously buffered card, or sets it to the maximum if that is exceeded.
base = F4 06

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the card and amount from.



[Command]
name = itemTakeCardBuffered
mask = FF FF 00
desc = Takes from the player's Card Box a previously buffered card, but only if the player has enough.
base = F4 07

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the card and amount from.



[Command]
name = itemGiveZennyBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a previously buffered amount of Zenny, or sets it to the maximum if that is exceeded.
base = F4 08

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the amount of Zenny from.



[Command]
name = itemTakeZennyBuffered
mask = FF FF 00
desc = Takes from the player's inventory a previously buffered amount of Zenny, but only if the player has enough.
base = F4 09

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the amount of Zenny from.



[Command]
name = itemBrother
mask = FF FF 00
desc = This command is a holdover from Star Force 1 and does not function correctly in Star Force 2. Plays the "item get" sound effect, and registers the specified Brother in a BrotherBand slot, overwriting any other Brother in that slot.
base = F4 0A

[Parameter]
name = brother
offs = 2
bits = 8
desc = The ID of the Brother to register. Must be 6, 7, 8 or 9.



[Command]
name = itemIndieProofCard
mask = FF FF 00 00 00 00
desc = Adds the Indie Proof card to the player's folder.
base = F4 0B

[Parameter]
name = unused1
offs = 2
bits = 16
desc = Unused parameter.

[Parameter]
name = unused2
offs = 4
bits = 16
desc = Unused parameter.



[Command]
name = itemSetZenny
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and sets the amount of Zenny in the player's inventory to the specified amount.
base = F4 0C

[Parameter]
name = amount
offs = 2
bits = 32
desc = The new amount of Zenny.



[Command]
name = itemGiveZenny
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory the specified amount of Zenny, or sets it to the maximum if that is exceeded.
base = F4 0D

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny.



[Command]
name = itemTakeZenny
mask = FF FF 00 00 00 00
desc = Takes from the player's inventory the specified amount of Zenny, but only if the player has enough.
base = F4 0E

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny.



[Command]
name = itemGiveFolder
mask = FF FF 00
desc = Gives the player the specified folder registers all its cards in the library.
base = F4 0F

[Parameter]
name = folder
offs = 2
bits = 8
desc = The folder to give.



[Command]
name = itemGiveLegendCard
mask = FF FF
desc = Adds to the player's Card Box a Legend Card based on their currently equipped Best Combo, unless they have seven Legend Cards already.
base = F4 10



[Command]
name = itemGiveAbility
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory the specified amount of the specified ability, or sets it to the maximum if that is exceeded.
base = F4 11

[Parameter]
name = ability
offs = 2
bits = 8
desc = The index of the ability to give.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of abilities to give.



[Command]
name = itemTakeAbility
mask = FF FF 00 00
desc = Takes from the player's inventory a specified amount of the specified ability, but only if the player has enough.
base = F4 12

[Parameter]
name = ability
offs = 2
bits = 8
desc = The index of the ability to take.

[Parameter]
name = p1
offs = 3
bits = 8
desc = The amount of abilities to take.



[Command]
name = itemGiveAbilityBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a previously buffered ability, or sets it to the maximum if that is exceeded.
base = F4 13

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the ability and amount from.



[Command]
name = itemTakeAbilityBuffered
mask = FF FF 00
desc = Takes from the player's inventory a previously buffered ability, but only if the player has enough.
base = F4 14

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the ability and amount from.



[Command]
name = mugshotShow
mask = FF FF 00 00
desc = Displays a mugshot in the current message box.
base = F5 00
mugs = mugshot

[Parameter]
name = mugshot
offs = 2
bits = 16
desc = The mugshot to use.
valn = mmsf2-mugshots



[Command]
name = mugshotHide
mask = FF FF
desc = Hides any mugshot being displayed in the current message box.
base = F5 01
# intentionally empty
mugs = 



[Command]
name = mugshotAnimation
mask = FF FF 00
desc = Changes the animation of the mugshot currently being displayed.
base = F5 02

[Parameter]
name = animation
offs = 2
bits = 8
desc = The mugshot animation to use.



[Command]
name = mugshotAnimationReset
mask = FF FF
desc = Resets the animation of the mugshot currently being displayed.
base = F5 03



[Command]
name = mugshotShowBrotherBuffered
mask = FF FF 00
desc = Displays a previously buffered Brother's face pic in the current message box.
base = F5 04
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Brother's face pic index.



[Command]
name = mugshotShowBuffered
mask = FF FF 00
desc = Displays a previously buffered mugshot in the current message box.
base = F5 05
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the mugshot's sprite number.



[Command]
name = mugshotShowStaticBuffered
mask = FF FF 00
desc = Displays a previously buffered static, unanimated mugshot in the current message box.
base = F5 06
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the mugshot's sprite number.



#[Command]
#name = mugshot07
#mask = FF FF 00 00
#desc = nop
#base = F5 07

#[Parameter]
#name = unused
#offs = 2
#bits = 16



#[Command]
#name = mugshot08
#mask = FF FF 00
#desc = nop
#base = F5 08

#[Parameter]
#name = unused
#offs = 2
#bits = 8



[Command]
name = mugshot09
mask = FF FF
desc = TODO (0A disables?)
base = F5 09



[Command]
name = mugshot0A
mask = FF FF
desc = TODO (0B enables?)
base = F5 0A



#[Command]
#name = mugshot0B
#mask = FF FF
#desc = nop
#base = F5 0B



[Command]
name = mugshotShowLegendForce
mask = FF FF 00
desc = Displays the face pic associated with a Legend Force Battle Card loaded from the specified buffer in the message box.
base = F5 0C
# should change mugshot...
mugs = 

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Battle Card index number of the Legend Force.



[Command]
name = mugshotShowGeoMegaMan
mask = FF FF
desc = Displays Geo's/MegaMan's mugshot in the message box according to his current mood, Visualizer and EM Wave Change state.
base = F5 0D
# should change mugshot...
mugs = 



[Command]
name = mugshotShowBrotherLegendForce
mask = FF FF 00
desc = Displays the specified Real Brother's Legend Force face pic in the message box. This command only functions properly in battle.
base = F5 0E
mugs = brother

[Parameter]
name = brother
offs = 2
bits = 8
desc = The Real Brother to display the Legend Force face pic of.
valn = mmsf-mugshots-brothers



[Command]
name = mugshotShowBrotherLegendForceBuffered
mask = FF FF 00
desc = Displays a buffered Real Brother's Legend Force face pic in the message box. This command only functions properly in battle.
base = F5 0F
# should change mugshot...
mugs = 

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Real Brother to display the Legend Force face pic of.



[Command]
name = mugshotShowAutoBrother
mask = FF FF
desc = Displays the face pic of the player's Auto-Brother in the message box.
base = F5 10
# should change mugshot...
mugs = 



[Command]
name = mugshotShowBrotherRandom
mask = FF FF
desc = Shows the mugshot of a random Real Brother. If the player has no Real Brothers, a random fallback mugshot is shown instead. The mugshot that is chosen matches that of the (fallback) Brother whose name is printed by the printRandomRealBrotherName command. The mugshot that is chosen only changes whenever the player moves to a new map.
base = F5 11



[Command]
name = mugshotShowProfileBrotherRandom
mask = FF FF 00
desc = Shows the mugshot of a random Real Brother who has the specified profile entry. If the player has no Real Brothers that have the specified profile entry, a random fallback profile is chosen instead. The Brother that is chosen matches that of the (fallback) Brother that is used for other commands that involve the specified profile entry. The Brother that is chosen only changes whenever the player moves to a new map.
base = F5 12

[Parameter]
name = profile
offs = 2
bits = 8
desc = The index of the profile entry to use.
valn = mmsf2-profiles



[Command]
name = positionBox
mask = FF FF 00 00
desc = Changes the position of the message box and printed text. If this command is invoked when the message box is already displayed, the message box background will be removed.
base = F7 00

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the message box and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the message box and the top edge of the screen.



[Command]
name = positionBoxReset
mask = FF FF
desc = Resets the position of the message box and printed text. If this command is invoked when the message box is already displayed, the message box background will be removed.
base = F7 01



[Command]
name = positionArrow
mask = FF FF 00 00
desc = Changes the position of the message box arrow.
base = F7 02

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the arrow and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the arrow and the top edge of the screen.



[Command]
name = positionArrowReset
mask = FF FF
desc = Resets the position of the message box arrow.
base = F7 03



[Command]
name = positionText
mask = FF FF 00 00
desc = Changes the position of the printed text.
base = F7 04

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the text and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the text and the top edge of the screen.



[Command]
name = positionTextReset
mask = FF FF
desc = Resets the position of the printed text.
base = F7 05



[Command]
name = positionOptionFromCenter
mask = FF FF 00
desc = Supposed to allocate space for a number of menu options from the center of the text area. However, this command does nothing in Star Force 2.
base = F7 06
prnt = true

[Parameter]
name = width
offs = 2
bits = 8
desc = The amount of characters to be centered.



#[Command]
#name = position07
#mask = FF FF
#desc = nop
#base = F7 07
#prnt = true



[Command]
name = positionMugshot
mask = FF FF 00 00
desc = Changes the position where a mugshot is drawn. This must be used before drawing the mugshot.
base = F7 08

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the mugshot and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the mugshot and the top edge of the screen.



[Command]
name = positionMugshotReset
mask = FF FF
desc = Resets the position where a mugshot is drawn to its default position. This must be used before drawing the mugshot.
base = F7 09



[Command]
name = positionOptionButton
mask = FF FF 00 00 00
desc = Changes the position of the specified option button.
base = F7 0A

[Parameter]
name = button
offs = 2
bits = 8
desc = The index of the option button to position.

[Parameter]
name = x
offs = 3
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the option button and the left edge of the screen.

[Parameter]
name = y
offs = 4
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the option button and the top edge of the screen.



[Command]
name = playerAnimate
mask = FF FF 00
desc = Sets the player's current animation.
base = F8 00

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Extension]
name = playerAnimate
mask = FF FF 00
base = F8 01



[Command]
name = playerResetScene
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set.
base = F8 02



[Extension]
name = playerResetScene
mask = FF FF
base = F8 03



[Command]
name = playerFinish
mask = FF FF
desc = Pauses script execution until the player's current animation finishes. If the player's current animation loops, this command waits forever.
base = F8 04



[Command]
name = storeOWVar
mask = FF FF 00 00
desc = Sets the specified overworld variable to the specified value.
base = F9 00

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value to set the variable to.



[Command]
name = storeBuffer
mask = FF FF 00 00 00 00 00
desc = Stores the specified value into the specified buffer.
base = F9 01

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to store a value into.

[Parameter]
name = value
offs = 3
bits = 32
desc = The value to store in the buffer.



[Command]
name = printItem
mask = FF FF 00 00
desc = Prints the name of the specified item.
base = FA 00
prnt = true

[Parameter]
name = item
offs = 2
bits = 16
desc = The item to print.



[Command]
name = printCard
mask = FF FF 00 00
desc = Prints the name of the specified Battle Card.
base = FA 01
prnt = true

[Parameter]
name = card
offs = 2
bits = 16
desc = The Battle Card to print.



[Command]
name = printColor
mask = FF FF 00 00
desc = Supposed to print the name of the specified card color. However, this command does nothing in Star Force 2.
base = FA 02
prnt = true

[Parameter]
name = color
offs = 2
bits = 16
desc = The card color to print.
#valn = mmsf-color



[Command]
name = printEnemy
mask = FF FF 00 00
desc = Prints the name of the specified enemy.
base = FA 03
prnt = true

[Parameter]
name = enemy
offs = 2
bits = 16
desc = The enemy to print.



[Command]
name = printStringBuffer
mask = FF FF 00
desc = Prints the specified string buffer.
base = FA 04
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The string buffer to print.



[Command]
name = printBuffer
mask = FF FF 00 00
desc = Prints the contents of the specified buffer as a decimal number. 
base = FA 05
prnt = true

[Parameter]
name = buffer
offs = 3
bits = 8
desc = The buffer to print. Only values up to 3 are accepted.

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. Only values up to 8 are accepted.

[Parameter]
name = padMode
offs = 2.4
bits = 4
desc = How to apply padding. Accepted values are: 0 = no padding, 1 = pad left with spaces, 2 = pad left with zeroes.
valn = mmsf-padmode



[Command]
name = printItemBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered item.
base = FA 06
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the item to print.



[Command]
name = printCardBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered Battle Card.
base = FA 07
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Battle Card to print.



[Command]
name = printColorBuffered
mask = FF FF 00
desc = Supposed to print the name of a previously buffered Battle Card color. However, this command does nothing in Star Force 2.
base = FA 08
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Battle Card color to print.



[Command]
name = printBrotherName
mask = FF FF 00
desc = Prints one of the player's Brothers' names.
base = FA 09
prnt = true

[Parameter]
name = brother
offs = 2
bits = 8
desc = The Brother to print the name of (0 = the player).



[Command]
name = printEnemyBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered enemy.
base = FA 0A
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the enemy to print.



[Command]
name = printBrotherNameBuffered
mask = FF FF 00
desc = Prints one of the player's previously buffered Brothers' names.
base = FA 0B
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Brother to print the name of.



[Command]
name = printLegendForce
mask = FF FF 00 00
desc = Prints the name of the specified Legend Force card.
base = FA 0C
prnt = true

[Parameter]
name = index
offs = 2
bits = 16
desc = The index of the Legend Force to print.



[Command]
name = printLegendForceBuffered
mask = FF FF 00
desc = Prints the name of a buffered Legend Force card.
base = FA 0D
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the index of the Legend Force card to print.



[Command]
name = printCurrentFolder
mask = FF FF
desc = Prints the name of the player's currently equipped Folder.
base = FA 0E
prnt = true



[Command]
name = printProfileBufferedColored
mask = FF FF 00 00 00
desc = Prints the specified profile entry of a previously buffered Brother, or falls back on the specified external script if the entry does not exist. The string is printed with red text if the profile entry was found, blue text if the fallback script was used, or black if the verbal tic is chosen as the profile entry.
base = FA 0F
prnt = true

[Parameter]
name = profile
offs = 2
bits = 8
desc = The index of the profile entry to use.
valn = mmsf2-profiles

[Parameter]
name = buffer
offs = 3
bits = 8
desc = The buffer to load the Brother index from.

[Parameter]
name = fallback
offs = 4
bits = 8
desc = The external fallback script to use if the profile entry does not exist.



[Command]
name = printProfilePlayerColored
mask = FF FF 00
desc = Prints the specified profile entry as entered by the player, or a random fallback profile entry if the player has not entered a profile entry. The fallback profile entry that is chosen matches that of the fallback profile that is used for other commands that involve the specified profile entry. The fallback profile that is chosen only changes whenever the player moves to a new map. The string is printed with red text if the profile entry was found, blue text if the fallback script was used, or black if the verbal tic is chosen as the profile entry.
base = FA 10
prnt = true

[Parameter]
name = profile
offs = 2
bits = 8
desc = The index of the profile entry to use.
valn = mmsf2-profiles



[Command]
name = printPlayerName
mask = FF FF
desc = Print's the player's Brother handle.
base = FA 11
prnt = true



[Command]
name = printProfilePlayerOrBrotherRandomColored
mask = FF FF 00
desc = Prints the specified profile entry as entered by the player, a random Real Brother. If none of the Brothers nor the player have entered the specified profile entry, a random fallback profile entry is chosen. The (fallback) Brother profile entry that is chosen matches that of the (fallback) Brother profile that is used for other commands that involve the specified profile entry. The random profile that is chosen only changes whenever the player moves to a new map. The string is printed with red text if the profile entry was found or blue text if the fallback script was used.
base = FA 12
prnt = true

[Parameter]
name = profile
offs = 2
bits = 8
desc = The index of the profile entry to use.
valn = mmsf2-profiles



[Command]
name = printProfilePlayerOrBrotherRandom
mask = FF FF 00
desc = Prints the specified profile entry as entered by the player, a random Real Brother. If none of the Brothers nor the player have entered the specified profile entry, a random fallback profile entry is chosen. The (fallback) Brother profile entry that is chosen matches that of the (fallback) Brother profile that is used for other commands that involve the specified profile entry. The random profile that is chosen only changes whenever the player moves to a new map.
base = FA 13
prnt = true

[Parameter]
name = profile
offs = 2
bits = 8
desc = The index of the profile entry to use.
valn = mmsf2-profiles



[Command]
name = printProfileBrotherRandomColored
mask = FF FF 00
desc = Prints the specified profile entry as entered by a random Real Brother. If none of the Brothers have entered the specified profile entry, a random fallback profile entry is chosen. The (fallback) Brother profile entry that is chosen matches that of the (fallback) Brother profile that is used for other commands that involve the specified profile entry. The random profile that is chosen only changes whenever the player moves to a new map.
base = FA 14
prnt = true

[Parameter]
name = profile
offs = 2
bits = 8
desc = The index of the profile entry to use.
valn = mmsf2-profiles



[Command]
name = printProfileBrotherRandomName
mask = FF FF 00
desc = Prints the name of a random Real Brother currently associated with the specified profile entry. If none of the Brothers have entered the specified profile entry, the name of a random fallback profile currently associated with the specified profile entry is chosen. The (fallback) Brother profile that is chosen matches that of the (fallback) Brother profile that is used for other commands that involve the specified profile entry. The random profile that is chosen only changes whenever the player moves to a new map.
base = FA 15
prnt = true

[Parameter]
name = profile
offs = 2
bits = 8
desc = The index of the profile entry to use.
valn = mmsf2-profiles



[Command]
name = printAbility
mask = FF FF 00
desc = Prints the name of the specified ability.
base = FA 16
prnt = true

[Parameter]
name = ability
offs = 2
bits = 8
desc = The index of the ability to print.



[Command]
name = printAbilityBuffered
mask = FF FF 00
desc = Prints the name of a buffered ability.
base = FA 17
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the index of the ability to print.



[Command]
name = printStarCardValue
mask = FF FF
desc = Prints the Star Card value of the current Battle Card.
base = FA 18
prnt = true



[Command]
name = printAutoBrotherName
mask = FF FF
desc = Prints the name of the player's Auto-Brother.
base = FA 19
prnt = true



[Command]
name = printRandomRealBrotherName
mask = FF FF
desc = Prints the name of one of the player's Real Brothers, randomly chosen. If the player has no Real Brothers, a random fallback Brother is chosen instead. The Brother that is chosen matches that of the (fallback) Brother whose mugshot is shown by the mugshotShowRandomRealBrother command. The Brother whose name is printed changes whenever the player moves to a different map (excluding pulsing in/out in certain situations).
base = FA 1A
prnt = true



[Command]
name = printGeoMegaMan
mask = FF FF
desc = Prints MegaMan if you are Wave Changed, and Geo otherwise.
base = FA 1B
prnt = true



[Command]
name = printStringBufferColored
mask = FF FF 00
desc = Prints the specified string buffer with red letters.
base = FA 1C
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The string buffer to print.



[Command]
name = printAbilityPoints
mask = FF FF 00
desc = Prints the point value of the specified ability.
base = FA 1D
prnt = true

[Parameter]
name = ability
offs = 2
bits = 8
desc = The ability to print the point value of.



[Command]
name = printAbilityPointsBuffered
mask = FF FF 00
desc = Prints the point value of a previously buffered ability.
base = FA 1E
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the ability from.



[Command]
name = printBestCombo
mask = FF FF
desc = Prints the name of the player's currently equipped Best Combo.
base = FA 1F
prnt = true



[Command]
name = printFolder
mask = FF FF 00
desc = Prints the name of the specified Folder.
base = FA 20
prnt = true

[Parameter]
name = folder
offs = 2
bits = 8
desc = The index of the Folder to print.



[Command]
name = callEnableVisualizer
mask = FF FF FF 00
desc = Enables use of the Visualizer.
base = FC 00 00



[Command]
name = callTextTransparent
mask = FF FF
desc = Makes the text printing area background transparent. Takes effect from the next character that is printed.
base = FC 01



[Command]
name = callTextOpaque
mask = FF FF
desc = Makes the text printing area background opaque (white). Takes effect from the next character that is printed.
base = FC 02



[Command]
name = callResetFieldObject
mask = FF FF 00
desc = Resets the specified field object.
base = FC 03

[Parameter]
name = object
offs = 2
bits = 8
desc = The index of the field object to reset.



[Command]
name = callStoreJump
mask = FF FF 00
desc = Stores a jump value to be used with the jumpStored command later.
base = FC 04

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callWarp
mask = FF FF 00
desc = Invokes a warp that exists in the current map.
base = FC 05
ends = always

[Parameter]
name = warp
offs = 2
bits = 8
desc = The warp in the current map to invoke.



[Command]
name = callShop
mask = FF FF 00
desc = Opens the shop screen with the specified shop.
base = FC 06
ends = always

[Parameter]
name = shop
offs = 2
bits = 8
desc = The index of the shop to load.



[Command]
name = callGiveLegendForce
mask = FF FF 00 00 00
desc = Tries to add a Legend Force Battle Card to the player's Card Box based on their equipped Personal Best Combo, and jumps to a different script depending on the result.
base = FC 07

[Parameter]
name = jumpIfSuccessful
offs = 2
bits = 8
desc = The script to jump to if the Legend Force was successfully added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNoPBCombo
offs = 3
bits = 8
desc = The script to jump to if the player does not have a Personal Best Combo equipped, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNoRoom
offs = 4
bits = 8
desc = The script to jump to if the player already has 10 Legend Forces, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBeginHelpSignal
mask = FF FF 00
desc = Supposed to starts the specified help signal quest if it was not yet completed. However, this command does nothing in Star Force 2.
base = FC 08

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the help signal quest to start.



[Command]
name = callFinishHelpSignal
mask = FF FF 00
desc = Supposed to finish the specified help signal quest if the requisites for it have been met. However, this command does nothing in Star Force 2.
base = FC 09

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the help signal quest to finish.



[Command]
name = callReceiveMemo
mask = FF FF 00 00 00
desc = Makes the player receive a specific memo e-mail after the current script finishes.
base = FC 0A

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the mail to receive.

[Parameter]
name = markRead
offs = 4
bits = 8
desc = If true, marks the e-mail as read. Otherwise, it is left unread.
valn = bool



[Command]
name = callCardTrader
mask = FF FF 00
desc = Opens the Card Trader screen for the specified trader.
base = FC 0B

[Parameter]
name = trader
offs = 2
bits = 8
desc = The index of the Card Trader to open.



[Command]
name = callStartSpinner
mask = FF FF 00
desc = Displays a spinner sprite that shows when the game is saving or doing other tasks at the specified location.
base = FC 0C

[Parameter]
name = x
offs = 2
bits = 8
desc = The x-position of the spinner.

[Parameter]
name = y
offs = 3
bits = 8
desc = The y-position of the spinner.



[Command]
name = callStopSpinner
mask = FF FF
desc = Hides the spinner sprite.
base = FC 0D



[Command]
name = callTransferNotifcation
mask = FF FF
desc = Supposed to trigger a Transfer notification overworld effect. However, this command does nothing in Star Force 2.
base = FC 0E



[Command]
name = callReceiveMail
mask = FF FF 00 00 00
desc = Makes the player receive a specific e-mail after the current script finishes.
base = FC 0F

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the mail to receive.

[Parameter]
name = markRead
offs = 4
bits = 8
desc = If true, marks the e-mail as read. Otherwise, it is left unread.
valn = bool



[Command]
name = callSetMarkFlag
mask = FF FF 00
desc = Sets the specified title screen mark flag.
base = FC 10

[Parameter]
name = markFlag
offs = 2
bits = 8
desc = The title screen mark flag to set.



[Command]
name = callAllocSaveBuffer
mask = FF FF
desc = Allocates a save buffer for performing a save.
base = FC 11



[Command]
name = callFreeSaveBuffer
mask = FF FF
desc = Frees a save buffer for performing a save.
base = FC 12



[Command]
name = callSaveFieldObjectStates
mask = FF FF
desc = Copies the states of all active field objects to the save buffer.
base = FC 13



[Command]
name = callProfileEntry
mask = FF FF 00
desc = Opens the text input screen for the specified profile field.
base = FC 14

[Parameter]
name = field
offs = 2
bits = 8
desc = The profile field to enter text for.



[Command]
name = callScreenShake
mask = FF FF 00 00 00 00 00
desc = Shakes the screen with the specified intensity for the specified duration, and plays the specified sound effect.
base = FC 15
prnt = true

[Parameter]
name = intensity
offs = 2
bits = 8
desc = The intensity type of the screen shake.

[Parameter]
name = length
offs = 3
bits = 16
desc = The length of the screen shake.

[Parameter]
name = sound
offs = 5
bits = 16
desc = The sound effect to play.



[Command]
name = callStartSidequest
mask = FF FF
desc = Starts the sidequest for the NPC the player is currently interacting with.
base = FC 16



[Command]
name = callFinishSidequest
mask = FF FF
desc = Finishes the sidequest for the NPC the player is currently interacting with.
base = FC 17



[Command]
name = callCheckSidequestActive
mask = FF FF 00 00 00 00
desc = Checks if the specified sidequest is currently active, and jumps to a different script depending on if it is.
base = FC 18

[Parameter]
name = sidequest
offs = 2
bits = 16
desc = The index of the sidequest to check.

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the specified sidequest is active, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the specified sidequest is not active, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callMurianEntry
mask = FF FF
desc = Opens the Murian letters input screen.
base = FC 19



[Command]
name = callMurianLetter
mask = FF FF 00 00
desc = Displays the specified Murian letter in the message box.
base = FC 1A

[Parameter]
name = context
offs = 2
bits = 8
desc = The context type in which the Murian letter is displayed.

[Parameter]
name = letter
offs = 3
bits = 8
desc = The index of the Murian letter to display.



[Command]
name = callPreparePlayerPosition
mask = FF FF 00
desc = Prepares to move the player to a different position when the overworld is re-opened.
base = FC 1B

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the position to move the player to.



[Command]
name = callCheckSidequestFinished
mask = FF FF 00 00 00 00
desc = Checks if the specified sidequest is finished, and jumps to a different script depending on if it is.
base = FC 1C

[Parameter]
name = sidequest
offs = 2
bits = 16
desc = The index of the sidequest to check.

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the specified sidequest is finished, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the specified sidequest is not finished, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callAbilityScreen
mask = FF FF
desc = Opens the Ability Screen.
base = FC 1D



[Command]
name = callRegisterEventBrother
mask = FF FF 00
desc = Opens the Brother registration screen for the specified built-in Real Brother.
base = FC 1E

[Parameter]
name = brother
offs = 2
bits = 8
desc = The built-in Brother to register.



[Command]
name = callWaveCommandCard
mask = FF FF
desc = Opens the Wave Command Card input screen.
base = FC 1F



[Command]
name = callUpdateAutoBrotherData
mask = FF FF
desc = Applies pending Auto-Brother data changes from the title screen to the registered Auto-Brother BrotherBand data.
base = FC 20



[Command]
name = callIncreaseBrotherLinkPower
mask = FF FF 00 00 00 00
desc = Increases the Link Power of the specified built-in Brother by the specified amount, or sets it to 100 if that is exceeded.
base = FC 21

[Parameter]
name = brother
offs = 2
bits = 16
desc = The index of the Brother whose Link Power to increase.

[Parameter]
name = value
offs = 4
bits = 16
desc = The amount by which to increase the Brother's Link Power.



[Command]
name = callProfileEditor
mask = FF FF
desc = Opens the profile editor. This command only functions properly in the Japanese version of the game.
base = FC 22



[Command]
name = callTopScreenSky
mask = FF FF
desc = Changes the top screen to the sky, if it is currently set to a different view.
base = FC 23



[Command]
name = callDisableTextSkip
mask = FF FF
desc = Disables text skipping using the A and B Buttons.
base = FC 24



[Command]
name = callEnableTextSkip
mask = FF FF
desc = Enables text skipping using the A and B Buttons.
base = FC 25



[Command]
name = callEnableAllSidequests
mask = FF FF
desc = Supposed to enable all sidequest. However, this command does nothing.
base = FC 26



[Command]
name = soundPlay
mask = FF FF 00 00
desc = Plays the specified sound.
base = FD 00

[Parameter]
name = sound
offs = 2
bits = 16
desc = The sound to play.



[Command]
name = soundPlayBGM
mask = FF FF 00 00
desc = Plays the specified background music.
base = FD 01

[Parameter]
name = music
offs = 2
bits = 16
desc = The background music to play.



[Command]
name = soundEnableTextSFX
mask = FF FF
desc = Enables the sound effect that plays when a text character is printed on the screen.
base = FD 02



[Command]
name = soundDisableTextSFX
mask = FF FF
desc = Disables the sound effect that plays when a text character is printed on the screen.
base = FD 03



[Command]
name = soundEnableChoiceSFX
mask = FF FF
desc = Enables the sound effect that plays when an option is selected with the A Button.
base = FD 04



[Command]
name = soundDisableChoiceSFX
mask = FF FF
desc = Disables the sound effect that plays when an option is selected with the A Button.
base = FD 05



[Command]
name = soundStop
mask = FF FF
desc = Stops playback of the current background music.
base = FD 06



[Command]
name = soundFadeInBGM
mask = FF FF 00 00 00 00 00 00
desc = Fades in the specified background music over the specified amount of time.
base = FD 07

[Parameter]
name = music
offs = 2
bits = 16
desc = The background music to fade in.

[Parameter]
name = length
offs = 4
bits = 32
desc = The length of the fade-in in frames.



[Command]
name = soundFadeOutBGM
mask = FF FF 00 00 00 00
desc = Fades out the current background music over the specified amount of time.
base = FD 08

[Parameter]
name = length
offs = 2
bits = 32
desc = The length of the fade-out in frames.



[Command]
name = soundPlayAreaBGM
mask = FF FF
desc = Plays the background music for the current area.
base = FD 09



[Command]
name = soundFadeInAreaBGM
mask = FF FF 00 00 00 00
desc = Fades in the background music for the current area over the specified amount of time.
base = FD 0A

[Parameter]
name = length
offs = 2
bits = 32
desc = The length of the fade-in in frames.



[Command]
name = tradeTicket
mask = FF FF 00
desc = Removes a Trader Ticket from the player's inventory, if there are any, and trades it for a random Battle Card. This command only works properly in areas with a Card Trader.
base = FE 00

[Parameter]
name = trader
offs = 2
bits = 8
desc = The index of the Card Trader to use.