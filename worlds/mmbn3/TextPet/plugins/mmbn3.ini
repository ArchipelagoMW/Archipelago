[CommandDatabase]
name = mmbn3
cont = 255
splt = keyWait clearMsg



[Command]
name = end
mask = FF
desc = Closes any open message box and ends script execution.
base = E7
ends = always



#[Command]
#name = newline
#mask = FF
#desc = Continues printing text on the next line.
#base = E8



[Command]
name = clearMsg
mask = FF
desc = Clears any currently open message box and resets the text printer position.
base = E9



[Command]
name = wait
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames.
base = EA 00
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The amount of frames to wait.



[Command]
name = waitSkip
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames, unless the A or B button has been pressed.
base = EA 01
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The maximum amount of frames to wait.



[Command]
name = waitFlag
mask = FF FF 00 00
desc = Pauses script execution until the specified flag is set.
base = EA 02
prnt = true

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag that must be set before script execution may continue.
type = hex



[Command]
name = waitHold
; NOTE: only is 2 bytes long strictly speaking, but the game reserves 4 bytes
mask = FF FF 00 00
desc = Pauses script execution indefinitely.
base = EA FF
ends = always



[Command]
name = keyWait
mask = FF
desc = Pauses script execution until the A or B button is pressed.
base = EB



[Command]
name = textSpeed
mask = FF FF 00
desc = Changes the speed at which text is printed to the screen.
base = EC 00

[Parameter]
name = delay
offs = 2
bits = 8
desc = The amount of frames to wait after printing a character. The default is 2 frames.



[Command]
name = textEnableSkip
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = EC 01



[Command]
name = textDisableSkip
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = EC 02



[Command]
name = mugshotShow
mask = FF FF 00
desc = Displays a mugshot in the current message box.
base = ED 00
mugs = mugshot

[Parameter]
name = mugshot
offs = 2
bits = 8
desc = The mugshot to use.
valn = mmbn3-mugshots



[Command]
name = mugshotHide
mask = FF FF
desc = Hides any mugshot being displayed in the current message box.
base = ED 01
# Intentionally empty; sets mugshot to disabled
mugs = 



[Command]
name = mugshotPalette
mask = FF FF 00
desc = Changes the palette of the mugshot currently being displayed.
base = ED 02

[Parameter]
name = palette
offs = 2
bits = 8
desc = The mugshot palette to use.



[Command]
name = mugshotAnimate
mask = FF FF 00
desc = Changes the animation of the mugshot currently being displayed.
base = ED 03

[Parameter]
name = animation
offs = 2
bits = 8
desc = The mugshot animation to use.



[Command]
name = space
mask = FF FF 00
desc = Moves the text position to the right in blocks of eight pixels.
base = EE 00
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to insert.



[Command]
name = spaceLeft
mask = FF FF 00
desc = Moves the text position to the specified position from the left edge of the text, in blocks of eight pixels.
base = EE 01
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to start from the left.



[Command]
name = positionText
mask = FF FF 00 00
desc = Changes the position of the text relative to the text box, whether it is currently being displayed or not.
base = EE 02

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the text and the left edge of the text box.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the text and the top edge of the text box.



[Command]
name = positionBox
mask = FF FF 00
desc = Changes the vertical position of the message box and its contents, whether it is currently being displayed or not.
base = EE 03

[Parameter]
name = top
offs = 2
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the message box and the top edge of the screen.



[Command]
name = positionArrow
mask = FF FF 00 00
desc = Changes the position of the message box arrow, whether it is currently being displayed or not.
base = EE 04

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the arrow and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the arrow and the top edge of the screen.



[Command]
name = positionMugshot
mask = FF FF 00
desc = Changes the horizontal position of the mugshot relative to its normal position, unless it is currently being displayed.
base = EE 05

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal offset, in number of pixels, to offset the default position of the mugshot.



[Command]
name = option
mask = FF 00 00
desc = Creates an array cursor menu option at the current text position.
base = EF
prnt = true

[Parameter]
name = left
offs = 1.4
bits = 4
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 1.0
bits = 4
desc = Which option to go to when Right is pressed.

[Parameter]
name = up
offs = 2.4
bits = 4
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 2.0
bits = 4
desc = Which option to go to when Down is pressed.



[Command]
name = select
mask = FF 00 00
desc = Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. This game's version of the command includes "noDelay" functionality, but it is stored in the length parameter instead of in a separate bit. As a result, if the number of targets specified + 3 & 0x10 is nonzero, there is no delay before the selection marker appears.
base = F0

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = disableB
offs = 2.6
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = clear
offs = 2.7
bits = 1
desc = If true, clears the message box after choosing an option.
valn = bool

[Parameter]
name = targets
offs = 1
bits = 8
addv = -3

[Parameter]
name = targets.jump
rela = $
bits = 8
desc = A script that execution can jump to depending on the chosen option, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = msgOpen
mask = FF FF
desc = Opens the message box and waits until the animation finishes.
base = F1 00



[Command]
name = msgClose
mask = FF FF
desc = Closes the message box and waits until the animation finishes.
base = F1 01



[Command]
name = msgOpenQuick
mask = FF FF
desc = Opens the message box without any animation.
base = F1 02



[Command]
name = msgCloseQuick
mask = FF FF
desc = Closes the message box without any animation.
base = F1 03



[Command]
name = msgOpenAlt
mask = FF FF
desc = Opens the alternate message box and waits until the animation finishes.
base = F1 04



[Command]
name = msgCloseAlt
mask = FF FF
desc = Closes the alternate message box and waits until the animation finishes.
base = F1 05



[Command]
name = msgOpenAltQuick
mask = FF FF
desc = Opens the alternate message box without any animation.
base = F1 06



[Command]
name = msgCloseAltQuick
mask = FF FF
desc = Closes the alternate message box without any animation.
base = F1 07



[Command]
name = msgOpenInvisible
mask = FF FF 00
desc = Opens the empty message box with no background. This message box has no animation associated with it, so the message box position must be set manually.
base = F1 08

[Parameter]
name = unused
offs = 2
bits = 8
desc = An unused parameter with unknown intended purpose.



[Command]
name = flagSet
mask = FF FF 00 00
desc = Sets the specified flag.
base = F2 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to set.
type = hex



[Command]
name = flagClear
mask = FF FF 00 00
desc = Clears the specified flag.
base = F2 04

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to clear.
type = hex



[Command]
name = flagToggle
mask = FF FF 00 00
desc = Toggles the specified flag.
base = F2 08

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to toggle.
type = hex



[Command]
name = flagAddMail
mask = FF FF 00 00
desc = Makes the player receive the e-mail with the specified flag.
base = F2 0C

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the e-mail to give.
type = hex



[Command]
name = flagRemoveMail
mask = FF FF 00 00
desc = Receive the first e-mail with the specified flag from the player's inbox.
base = F2 10

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the e-mail to give.
type = hex



[Command]
name = flagAddRequest
mask = FF FF 00 00
desc = Adds the request with the specified flag to the Request Board.
base = F2 14

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the request to add.
type = hex



[Command]
name = flagRemoveRequest
mask = FF FF 00 00
desc = Removes the request with the specified flag to the Request Board. But if the Request Board does not currently contain the specified request, the Request Board is emptied instead.
base = F2 18

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the request to remove.
type = hex



[Command]
name = checkFlag
mask = FF FF 00 00 00 00
desc = Checks the specified flag, and jumps to a different script depending on if it is true or false.
base = F3 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to check.
type = hex

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChapter
mask = FF FF 00 00 00 00
desc = Checks the current story chapter, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 04

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the current story chapter falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the current story chapter falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShopStock
mask = FF FF 00 00 00
desc = Checks the stock of the specified shop, and jumps to a different script depending on if the shop is all sold out.
base = F3 08

[Parameter]
name = shop
offs = 2
bits = 8
desc = The shop to check the stock of.

[Parameter]
name = jumpIfStocked
offs = 3
bits = 8
desc = The script to jump to if the shop still has stock, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSoldOut
offs = 4
bits = 8
desc = The script to jump to if the shop is all sold out, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChipCodeFolder
mask = FF FF 00 00 00 00
desc = Checks whether the player's folder contains the specified chip with the specified code, and jumps to a different script depending on if it does or not.
base = F3 0C

[Parameter]
name = chip
offs = 2
bits = 8
desc = The chip to search for.

[Parameter]
name = code
offs = 3
bits = 8
desc = The code of the chip to search for.
valn = mmbn-code

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the folder contains the chip, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the folder does not contain the chip, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkPlayerStretch
mask = FF FF 00 00
desc = Checks the current horizontal stretching of the player sprite, and jumps to a different script depending on whether it is stretched or not.
base = F3 10

[Parameter]
name = jumpIfUnstretched
offs = 2
bits = 8
desc = The script to jump to if the player sprite is not horizontally stretched, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfStretched
offs = 3
bits = 8
desc = The script to jump to if the player sprite is horizontally stretched, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBustingLevel
mask = FF FF 00 00 00 00
desc = Checks the Busting Level of the player's last battle, and jumps to a different script depending on if it falls inside or outside the specified range. However, this game does not save the Busting Level after a battle, so this command is useless.
base = F3 14

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the Busting Level falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the Busting Level falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkMultiFlag
mask = FF FF 00 00 00 00 00 00 00
desc = Checks a series of flags starting at the specified flag, and jumps to a different script depending on if the number of set flags falls inside or outside the specified range.
base = F3 18

[Parameter]
name = flag
offs = 2
bits = 16
desc = The first flag to check.
type = hex

[Parameter]
name = count
offs = 4
bits = 8
desc = The amount of subsequent flags to check.

[Parameter]
name = lower
offs = 5
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 6
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 7
bits = 8
desc = The script to jump to if the number of set flags falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 8
bits = 8
desc = The script to jump to if the number of set flags falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSubArea
mask = FF FF 00 00 00 00
desc = Checks the current subarea, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 1C

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the subarea falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the subarea falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkPositionEvent
mask = FF FF 00 00 00 00
desc = Checks any events at the current position, and jumps to a different script depending on if it falls inside or outside the specified range. However, due to a bug this command does not work properly.
base = F3 20

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range. Due to a bug, this parameter is discarded.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The upper boundary of the range. Due to a bug, this parameter is discarded.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the value falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the value falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkArea
mask = FF FF 00 00 00 00
desc = Checks the current area, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 24

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the subarea falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the subarea falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNaviCustActive
mask = FF FF 00 00 00
desc = Checks whether the specified NaviCust effect, and jumps to a different script depending on if it is active or not. This command does not work properly with NaviCust programs that 'stack', such as Custom+1 and MegaFolder1.
base = F3 28

[Parameter]
name = effect
offs = 2
bits = 8
desc = The NaviCust effect to check.

[Parameter]
name = jumpIfActive
offs = 3
bits = 8
desc = The script to jump to if the NaviCust effect is active, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInactive
offs = 4
bits = 8
desc = The script to jump to if the NaviCust effect is not active, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryStandard
mask = FF FF 00 00 00 00
desc = Checks the amount of Standard chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 2C

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of Standard chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of Standard chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryMega
mask = FF FF 00 00 00 00
desc = Checks the amount of Mega chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 30

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of Mega chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of Mega chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryGiga
mask = FF FF 00 00 00 00
desc = Checks the amount of Giga chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 34

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of Giga chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of Giga chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryPA
mask = FF FF 00 00 00 00
desc = Checks the amount of Program Advances in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 38 

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of ProgramAdvances in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of ProgramAdvances in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = controlLock
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = F4 00



[Command]
name = controlUnlock
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = F4 01



[Command]
name = controlSet
mask = FF FF 00
desc = Sets the specified overworld control bits.
base = F4 02

[Parameter]
name = bitmask
offs = 2
bits = 8
desc = The overworld control bits to set.



[Command]
name = jump
mask = FF FF 00
desc = Jumps to a different script.
base = F5 00
# Takes priority over jumpRandom.
plen = 2

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jumpRandom
mask = FF 00
desc = Jumps to a random different script. Each script has an equal chance of being chosen. The amount of possible target scripts MUST be a power of 2!
base = F5 00

[Parameter]
name = unused
offs = 1.6
bits = 1
desc = An unused parameter with unknown intended purpose.
valn = bool

[Parameter]
name = untrap
offs = 1.7
bits = 1
desc = If set to true, the first jump target will be ignored if Untrap is active.
valn = bool

[Parameter]
name = targets
offs = 1
bits = 6
addv = 1
dgrp = 1,1

[Parameter]
name = targets.ratio
desc = The ratio for this entry to be picked randomly.
rela = $
bits = 8

[Parameter]
name = targets.jump
desc = A script that execution can randomly jump to.
rela = $
bits = 8
type = jump
valn = mmbn-jump



[Command]
name = itemGive
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded.
base = F6 00

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.



[Command]
name = itemTake
mask = FF FF 00 00
desc = Takes from the player's inventory a specified amount of the specified item, but only if the player has enough.
base = F6 01

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.



[Command]
name = itemSetSFX
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and sets the count of the specified item in the player's inventory to the specified amount.
base = F6 02

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to change the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The new amount of items.



[Command]
name = checkItem
mask = FF FF 00 00 00 00 00
desc = Checks how many of the specified item are in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = F6 03

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to check the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 5
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 6
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = itemGiveChip
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and adds to the player's Pack a specified amount of the specified chip with the specified code, or sets it to the maximum if that is exceeded.
base = F6 10

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to give.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to give.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of chips to give.



[Command]
name = itemTakeChip
mask = FF FF 00 00 00 00
desc = Takes from the player's inventory a specified amount of the specified chip with the specified code, but only if the player has enough.
base = F6 11

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to take.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to take.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of chips to take.



[Command]
name = itemSetChip
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and sets the count of the specified chip with the specified code in the player's Pack to the specified amount.
base = F6 12

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to change the amount of.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to change the amount of.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The new amount of chips.



[Command]
name = checkChipCode
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how many of the specified chip with the specified code are in the player's Pack as well as folders, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = F6 13

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to check.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to check.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkPackChipCode
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how many of the specified chip with the specified code are in the player's Pack, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = F6 14

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to check.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to check.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the number of chips is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the number of chips is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the number of chips is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGiveItem
mask = FF FF 00 00 00 00 00
desc = Attempts to adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded, plays a sound effect if any items were added, and jumps to a different script depending on how many were added.
base = F6 20

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.

[Parameter]
name = jumpIfAll
offs = 4
bits = 8
desc = The script to jump to if all items could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 5
bits = 8
desc = The script to jump to if no items at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 6
bits = 8
desc = The script to jump to if some, but not all items could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeItem
mask = FF FF 00 00 00 00 00
desc = Attempts to take from the player's inventory a specified amount of the specified item, but only if the player has enough, and jumps to a different script depending on how many the player had.
base = F6 21

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.

[Parameter]
name = jumpIfAll
offs = 4
bits = 8
desc = The script to jump to if there were enough items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 5
bits = 8
desc = The script to jump to if there were no items at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 6
bits = 8
desc = The script to jump to if there were some, but not enough items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = itemSet
mask = FF FF 00 00
desc = Sets the count of the specified item in the player's inventory to the specified amount, and plays a sound effect if the new amount was nonzero.
base = F6 22

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to change the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The new amount of items.



[Extension]
name = checkItem
mask = FF FF 00 00 00 00 00
base = F6 23



[Command]
name = checkGiveZenny
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to adds to the player's inventory a specified amount of Zenny, or sets it to the maximum if that is exceeded, plays a sound effect if any was added, and jumps to a different script depending on how much was added.
base = F6 30

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny to give.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if all Zenny could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if no Zenny at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if some, but not all Zenny could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeZenny
mask = FF FF 00 00 00 00 00 00 00
desc = Takes from the player's inventory a specified amount of Zenny, or sets it to 0 if that would make it negative, and jumps to a different script depending on how much the player had.
base = F6 31

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny to take.

[Parameter]
name = jumpIfSurplus
offs = 6
bits = 8
desc = The script to jump to if there was more than enough Zenny, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfExact
offs = 7
bits = 8
desc = The script to jump to if there was exactly enough Zenny, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDeficit
offs = 8
bits = 8
desc = The script to jump to if there was not enough Zenny, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setZenny
mask = FF FF 00 00 00 00
desc = Sets the amount of Zenny in the player's inventory to the specified amount, or sets it to the maximum if that would be exceeded, and plays a sound effect if the new amount was nonzero.
base = F6 32

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny to give.



[Command]
name = checkZenny
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how much Zenny is in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = F6 33

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the amount of Zenny is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the amount of Zenny is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the amount of Zenny is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = itemGiveNaviCustProgram
mask = FF FF 00 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a specified amount of the specified NaviCust program with the specified color, or sets it to the maximum if that is exceeded. If the specified program/color combination does not exist, no NaviCust program is given.
base = F6 40

[Parameter]
name = program
offs = 2
bits = 8
desc = The NaviCust program to give.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the NaviCust program to give.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of NaviCust programs to give.



[Command]
name = itemTakeNaviCustProgram
mask = FF FF 00 00 00
desc = Takes from the player's inventory a specified amount of the specified NaviCust program with the specified color, but only if the player has enough. If the specified program/color combination does not exist, no NaviCust program is taken.
base = F6 41

[Parameter]
name = program
offs = 2
bits = 8
desc = The NaviCust program to take.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the NaviCust program to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of NaviCust programs to take.



[Command]
name = itemSetNaviCustProgram
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and sets the count of the specified NaviCust program with the specified color in the player's inventory to the specified amount. If the specified program/color combination does not exist, no NaviCust program is given or taken.
base = F6 42

[Parameter]
name = program
offs = 2
bits = 8
desc = The NaviCust program to change the amount of.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the NaviCust program to change the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The new amount of NaviCust programs.



[Command]
name = checkNaviCustProgram
mask = FF FF 00 00 00 00 00 00
desc = Checks how many of the specified NaviCust program with the specified color are in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = F6 43

[Parameter]
name = program
offs = 2
bits = 8
desc = The NaviCust program to check the amount of.

[Parameter]
name = color
offs = 7
bits = 8
desc = The color of the NaviCust program to check.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the number of NaviCust programs is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 5
bits = 8
desc = The script to jump to if the number of NaviCust programs is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 6
bits = 8
desc = The script to jump to if the number of NaviCust programs is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGiveBugFrags
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to adds to the player's inventory a specified amount of BugFrags, or sets it to the maximum if that is exceeded, plays a sound effect if any was added, and jumps to a different script depending on how much were added.
base = F6 50

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of BugFrags to give.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if all BugFrags could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if no BugFrags at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if some, but not all BugFrags could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeBugFrags
mask = FF FF 00 00 00 00 00 00 00
desc = Takes from the player's inventory a specified amount of BugFrags, or sets it to 0 if that would make it negative, and jumps to a different script depending on how much the player had.
base = F6 51

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of BugFrags to take.

[Parameter]
name = jumpIfSurplus
offs = 6
bits = 8
desc = The script to jump to if there was more than enough BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfExact
offs = 7
bits = 8
desc = The script to jump to if there was exactly enough BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDeficit
offs = 8
bits = 8
desc = The script to jump to if there was not enough BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = itemSetBugFrags
mask = FF FF 00 00 00 00
desc = Sets the amount of BugFrags in the player's inventory to the specified amount, or sets it to the maximum if that would be exceeded, and plays a sound effect if the new amount was nonzero.
base = F6 52

[Parameter]
name = amount
offs = 2
bits = 32
desc = The new amount of BugFrags.



[Command]
name = checkBugFrags
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how much BugFrags is in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = F6 53

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the amount of BugFrags is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the amount of BugFrags is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the amount of BugFrags is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = color
mask = FF FC
desc = Changes the text sub-palette for all characters printed after it.
base = F7 00
# Takes priority over colorFlags.
plen = 2

[Parameter]
name = palette
offs = 1
bits = 2
desc = The sub-palette to use.



[Command]
name = colorFlags
mask = FF 00
desc = Changes the VRAM tile map flags for all characters in the text box.
base = F7 00

[Parameter]
name = flags
offs = 1
bits = 2
desc = The tile offset to add to all tile numbers (multiplied by 0x100). If this is set too high, maybe also affect other flags.

[Parameter]
name = flipX
offs = 1.2
bits = 1
desc = If true, flips all characters horizontally.
valn = bool

[Parameter]
name = flipY
offs = 1.3
bits = 1
desc = If true, flips all tiles vertically -- this causes characters to appear mangled.
valn = bool

[Parameter]
name = palette
offs = 1.4
bits = 4
desc = The VRAM palette to use.



[Command]
name = playerLock
mask = FF FF
desc = Locks the player's movement.
base = F8 00



[Command]
name = playerAnimate
mask = FF FF 00
desc = Sets the player's current animation.
base = F8 04

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Command]
name = playerUnlock
mask = FF FF
desc = Unlocks the player's movement.
base = F8 08



[Command]
name = playerFinish
mask = FF FF
desc = Pauses script execution until the player's current animation finishes or loops.
base = F8 0C



[Command]
name = playerReset
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set.
base = F8 10



[Command]
name = printItem
mask = FF FF 00 0F
desc = Prints the name of an item, either specified or loaded from a buffer.
base = F9 00 00 00
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the item index from, plus one.

[Parameter]
name = item
offs = 2
bits = 8
desc = If the buffer is not set, the item name to print.



[Command]
name = printChip
mask = FF FF 00 0F
desc = Prints the name of a chip, either specified or loaded from a buffer.
base = F9 00 00 01
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the chip index from, plus one.

[Parameter]
name = chip
offs = 2
bits = 8
desc = If the buffer is not set, the chip name to print.



[Extension]
name = printChip
mask = FF FF 00 0F
base = F9 00 00 02
prnt = true

[Parameter]
name = chip
extb = 256



[Command]
name = printCode
mask = FF FF 00 0F
desc = Prints a chip code, either specified or loaded from a buffer.
base = F9 00 00 03
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the chip code index from plus one.

[Parameter]
name = code
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the chip code to print.
valn = mmbn-code



[Command]
name = printFolderName
mask = FF FF 00 0F
desc = Prints the name of a folder, either specified or loaded from a buffer.
base = F9 00 00 04
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the folder name index from plus one.

[Parameter]
name = entry
offs = 2
bits = 4
desc = If the buffer is not set, the entry index of the folder name to print.



[Command]
name = printNaviCustProgram
mask = FF FF 00 0F
desc = Prints the name of a NaviCust program, either specified or loaded from a buffer.
base = F9 00 00 05
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the folder name index from plus one.

[Parameter]
name = program
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the NaviCust program name to print.



[Command]
name = printEnemyName
mask = FF FF 00 0F
desc = Prints the name of an enemy, either specified or loaded from a buffer.
base = F9 00 00 06
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the enemy name index from plus one.

[Parameter]
name = enemy
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the enemy name to print.



[Command]
name = printItemAmount
mask = FF FF 00 00
desc = Prints the amount of the specified item in the player's inventory, with optional padding.
base = F9 04
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the number with zeros instead of spaces, if necessary; otherwise, pads the number with spaces.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the number; otherwise, places it to the right of the number.
valn = bool

[Parameter]
name = item
offs = 3
bits = 8
desc = The item to print the amount of.



[Command]
name = printChipCodeAmount
mask = FF FF 00 00 00
desc = Prints the amount of the specified chip with the specified code in the player's Folders (including Extra Folder!) and Pack, with optional padding.
base = F9 08
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the number with zeros instead of spaces, if necessary; otherwise, pads the number with spaces.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the number; otherwise, places it to the right of the number.
valn = bool

[Parameter]
name = chip
offs = 3
bits = 8
desc = The chip to print the amount of.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to print the amount of.
valn = mmbn-code



[Command]
name = printZenny
mask = FF FF 00 FF
desc = Prints the current amount of Zenny the player has.
base = F9 0C 00 00
# Takes priority over printBuffer.
plen = 4
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the number with zeros instead of spaces, if necessary; otherwise, pads the number with spaces.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the number; otherwise, places it to the right of the number.
valn = bool



[Command]
name = printBuffer
mask = FF FF 00 00
desc = Prints the contents of the specified 32-bit buffer as a decimal number.
base = F9 0C 00 00
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the number with zeros instead of spaces, if necessary; otherwise, pads the number with spaces.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the number; otherwise, places it to the right of the number.
valn = bool

[Parameter]
name = buffer
offs = 3
bits = 8
desc = The buffer to print the contents of.



[Command]
name = printBugFrags
mask = FF FF 00 00
desc = Prints the current amount of BugFrags the player has, using the specified text buffer.
base = F9 10 00 00
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the number with zeros instead of spaces, if necessary; otherwise, pads the number with spaces.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the number; otherwise, places it to the right of the number.
valn = bool

[Parameter]
name = buffer
offs = 3
bits = 8
desc = The text buffer to store the BugFrags count string in.



[Command]
name = soundPlay
mask = FF FF 00 00
desc = Loads the specified sound track into its designated track slot and starts playback.
base = FA 00

[Parameter]
name = track
offs = 2
bits = 16
desc = The sound track to play.



[Command]
name = soundPlayBGM
mask = FF FF 00 00
desc = Loads the specified sound track into its designated track slot, sets the BGM track number to the specified sound track and starts playback.
base = FA 04

[Parameter]
name = track
offs = 2
bits = 16
desc = The sound track to play.



[Command]
name = soundEnableTextSFX
mask = FF FF
desc = Enables the sound effect that plays when a text character is printed on the screen.
base = FA 08



[Command]
name = soundDisableTextSFX
mask = FF FF
desc = Disables the sound effect that plays when a text character is printed on the screen.
base = FA 0C



[Command]
name = soundStop
mask = FF FF
desc = Stops playback of all track groups and clears the BGM track number.
base = FA 10



[Command]
name = soundFadeOut
mask = FF FF 00 00
desc = Fades out the specified track slot over the specified length of time.
base = FA 14

[Parameter]
name = slot
offs = 2
bits = 8
desc = The track slot to fade out.

[Parameter]
name = length
offs = 3
bits = 8
desc = The length of the fade-out.



[Command]
name = soundSetTextSFX
mask = FF FF 00 00
desc = Sets the sound effect that plays when a text character is printed on the screen.
base = FA 18

[Parameter]
name = track
offs = 2
bits = 16
desc = The sound track to play when a text character is printed on the screen.



[Command]
name = soundResetTextSFX
mask = FF FF 00 00
desc = Resets the sound effect that plays when a text character is printed on the screen to the default.
base = FA 1C



[Command]
name = soundEnableChoiceSFX
mask = FF FF
desc = Enables the sound effect that plays when a menu option is selected or a menu is cancelled.
base = FA 20



[Command]
name = soundDisableChoiceSFX
mask = FF FF
desc = Disables the sound effect that plays when a menu option is selected or a menu is cancelled.
base = FA 24



[Command]
name = startGiveRandomZenny
mask = FF FF 00
desc = Adds to the player's inventory and buffers a randomly selected amount of Zenny, and plays a sound effect. Each amount has an equal chance of being chosen. Unlike in previous games, the amount of possible Zenny amounts does not have to be a power of 2.
base = FB 00

[Parameter]
name = pool
offs = 2
bits = 8
addv = 1

[Parameter]
name = pool.amount
desc = A random amount of Zenny to give.
rela = $
bits = 32



[Command]
name = startGiveRandomChipCode
mask = FF FF 00
desc = Adds to the player's Pack and buffers a randomly selected chip with code, and plays a sound effect. Each chip has an equal chance of being chosen. Unlike in previous games, the amount of possible Zenny amounts does not have to be a power of 2.
base = FB 04

[Parameter]
name = pool
offs = 2
bits = 8
addv = 1

[Parameter]
name = pool.chip
desc = A random chip to give.
rela = $
bits = 8

[Parameter]
name = pool.code
desc = The code of the random chip to give.
rela = $
bits = 8



[Command]
name = startRandomBattle
mask = FF FF
desc = Starts a random battle from the current area.
base = FB 08
ends = never



[Command]
name = startFixedBattle
mask = FF FF 00 00 00 00 00 00 00 00 00
desc = Starts the specified fixed battle with optional specified background, battle mode, preset folder, folder randomization, overworld settings, escapability, battlefield and music. Note that one of this command's parameters are bugged.
base = FB 0C
ends = always

[Parameter]
name = background
offs = 2
bits = 8
desc = The background to use, or 255 to use the current area's default background.

[Parameter]
name = mode
offs = 3
bits = 8
desc = The battle mode to use.

[Parameter]
name = folderPtr
offs = 4
bits = 8
desc = The pointer of the preset folder to use, or 0 to use the player's custom folder. This parameter is bugged; as it is 8-bit and pointers are 32-bit, this parameter cannot be used.

[Parameter]
name = shuffleFolder
offs = 5
bits = 8
desc = If true, the folder is shuffled prior to the battle; otherwise, chips appear in the same order they were put into the folder.
valn = bool

[Parameter]
name = saveOWPosition
offs = 6
bits = 1
desc = If true, the player's current position on the map is restored after the battle; otherwise, the player moves back to the starting position of the map.
valn = bool

[Parameter]
name = hideOWObjects
offs = 6.7
bits = 1
desc = If true, all map objects including the player are hidden during the screen transition to the battle; otherwise, they are shown.
valn = bool

[Parameter]
name = noEscape
offs = 7
bits = 8
desc = If true, the player cannot escape from the battle; otherwise, the player can escape.
valn = bool

[Parameter]
name = battle
offs = 8
bits = 8
desc = The fixed battle to start.

[Parameter]
name = field
offs = 9
bits = 8
desc = The battlefield to use.

[Parameter]
name = music
offs = 10
bits = 8
desc = The music to play.



[Command]
name = startVirusMachineBattle
mask = FF FF
desc = Starts a battle from the virus machine. As MMBN3 does not have a virus machine, this command may try to load battles from non-existent areas.
base = FB 10



[Command]
name = startShop
mask = FF FF 00
desc = Opens the shop screen with the specified shop.
base = FB 14
ends = always

[Parameter]
name = shop
offs = 2
bits = 8
desc = The index of the shop to load.



[Command]
name = startBugFragTrader
mask = FF FF FF 00
desc = Checks if the player has at least 10 BugFrags, and jumps to a different script if they don't.
base = FB 18 01
plen = 3
ends = never

[Parameter]
name = jumpIfNotEnoughBugFrags
offs = 3
bits = 8
desc = The script to jump to if the player has less than 10 BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = startChipTrader
mask = FF FF 00 00
desc = Checks if the player has at least the specified number of chips, jumping to a different script if they don't, and opens the chip trader screen with the specified number of chips.
base = FB 18
ends = never

[Parameter]
name = amount
offs = 2
bits = 8
desc = The amount of chips the chip trader takes.

[Parameter]
name = jumpIfNotEnoughChips
offs = 3
bits = 8
desc = The script to jump to if the player has less than the specified number of chips, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = startWarp
mask = FF FF 00
desc = Triggers the warp with the specified number in the current area.
base = FB 1C
ends = always

[Parameter]
name = warp
offs = 2
bits = 8
desc = The index of the warp to trigger.



[Command]
name = startHeal
mask = FF FF 00 00
desc = Heals the player by the specified amount of HP (but no more than their maximum HP) and plays a sound effect.
base = FB 20

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of HP to recover.



[Command]
name = startGiveRandomItem
mask = FF FF 00 00 00 00
desc = Adds to the player's inventory and buffers a randomly selected item, and plays a sound effect. Each item has an equal chance of being chosen. Unlike similar commands, the amount of possible items MUST be a power of 2!
base = FB 24

[Parameter]
name = pool
offs = 2
bits = 8
addv = 1

[Parameter]
name = pool.item
desc = A random item to give.
rela = $
bits = 8



[Command]
name = startBBS
mask = FF FF 00
desc = Opens the BBS screen with the specified BBS.
base = FB 28
ends = always

[Parameter]
name = bbs
offs = 2
bits = 8
desc = The index of the BBS to load.



[Command]
name = startClearBBS
mask = FF FF 00
desc = Clears all entries from the specified BBS.
base = FB 2C

[Parameter]
name = bbs
offs = 2
bits = 8
desc = The index of the BBS to clear.



[Command]
name = startGiveFolder
mask = FF FF 00
desc = Adds the specified Folder to the player's set of Folders. Can give either the secondary Folder or the Extra Folder depending on the Folder chosen.
base = FB 34

[Parameter]
name = folder
offs = 2
bits = 8
desc = The folder to give.



[Command]
name = startCameraFixed
mask = FF FF 00 00 00 00 00 00
desc = Changes the camera position to the specified coordinates.
base = FB 38

[Parameter]
name = x
offs = 2
bits = 16
desc = The new isometric x-position for the camera.

[Parameter]
name = y
offs = 4
bits = 16
desc = The new isometric x-position for the camera.

[Parameter]
name = z
offs = 6
bits = 16
desc = The new isometric x-position for the camera.



[Command]
name = startCameraPlayer
mask = FF FF
desc = Changes the camera position to the player's position.
base = FB 3C



[Command]
name = save
mask = FF 00 00 00
desc = Saves the game, and jumps to a different script depending on whether the save was successful or not.
base = FC
ends = never

[Parameter]
name = jumpIfSuccessful
offs = 1
bits = 8
desc = The script to jump to if the save was successful, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFailed
offs = 2
bits = 8
desc = The script to jump to if the save failed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpUnused
offs = 3
bits = 8
desc = An unused jump destination, presumably for if the save failed.
type = jump
valn = mmbn-jump



[Command]
name = folderEquip
mask = FF FF FF 00
desc = Sets the specified Folder as the equipped Folder.
base = FD 00 00

[Parameter]
name = folder
offs = 3
bits = 8
desc = The Folder to equip. Possible values are 0 (first Folder), 1 (Extra Folder) and 2 (second Folder).



[Command]
name = folderSetRegular
mask = FF FF FF 00
desc = Sets the specified chip in the current Folder as the Regular Chip.
base = FD 00 01

[Parameter]
name = chip
offs = 3
bits = 8
desc = The chip slot in the current Folder to set as Regular Chip. Possible values range between 0 and 29.



[Command]
name = menuOptionNumberTrader
mask = FF 00 00
desc = Creates a Number Trader code entry option at the specified text position. If the current script is being executed from RAM, then the preceding character is chosen instead.
base = FE 00 00

[Parameter]
name = char
offs = 1
bits = 8
desc = The digit that this option corresponds with.

[Parameter]
name = position
offs = 2
bits = 8
desc = The character position to draw the option at. This parameter is replaced by the position of the preceding character if the current script is being executed from RAM.



[Command]
name = menuSelectNumberTrader
mask = FF
desc = Lets the player put in a Number Trader code using previously defined options.
base = FF