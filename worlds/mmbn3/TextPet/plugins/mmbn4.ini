[CommandDatabase]
name = mmbn4
cont = 255
splt = keyWait any=0 clearMsg



[Command]
name = end
mask = FF
desc = Closes any open message box and ends script execution.
base = E5
ends = always



[Command]
name = keyWait
mask = FF 00
desc = Pauses script execution until a button is pressed.
base = E6

[Parameter]
name = any
offs = 1
bits = 8
desc = If true, any button can be pressed; otherwise, only A and B will have an effect.
valn = bool



[Command]
name = msgOpen
mask = FF FF
desc = Opens the message box and waits until the animation finishes.
base = E7 00



[Command]
name = msgClose
mask = FF FF
desc = Closes the message box and waits until the animation finishes.
base = E7 01



[Command]
name = msgOpenQuick
mask = FF FF
desc = Opens the message box without any animation.
base = E7 02



[Command]
name = msgCloseQuick
mask = FF FF
desc = Closes the message box without any animation. However, if the message box contains a mugshot, it remains on-screen.
base = E7 03



#[Command]
#name = newline
#mask = FF
#desc = Continues printing text on the next line.
#base = E8



[Command]
name = flagSet
mask = FF FF 00 00
desc = Sets the specified flag.
base = E9 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to set.
type = hex



[Command]
name = flagClear
mask = FF FF 00 00
desc = Clears the specified flag.
base = E9 01

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to clear.
type = hex



[Command]
name = flagToggle
mask = FF FF 00 00
desc = Toggles the specified flag.
base = E9 02

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to toggle.
type = hex



[Command]
name = flagMultiSet
mask = FF FF 00 00 00
desc = Sets a series of flags starting at the specified flag.
base = E9 03

[Parameter]
name = flag
offs = 2
bits = 16
desc = The first flag to set.
type = hex

[Parameter]
name = count
offs = 4
bits = 8
desc = The amount of subsequent flags to set.



[Command]
name = flagMultiClear
mask = FF FF 00 00 00
desc = Clears a series of flags starting at the specified flag.
base = E9 04

[Parameter]
name = flag
offs = 2
bits = 16
desc = The first flag to clear.
type = hex

[Parameter]
name = count
offs = 4
bits = 8
desc = The amount of subsequent flags to clear.



[Command]
name = flagSetBuffered
mask = FF FF 00
desc = Set a buffered flag stored in memory.
base = E9 06

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the flag from.



[Command]
name = flagAddMail
mask = FF FF 00 00
desc = Makes the player receive the e-mail with the specified flag.
base = E9 07

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the e-mail to give.
type = hex



[Command]
name = flagAddBBSMessage
mask = FF FF 00 00
desc = Unlocks the BBS message with the specified flag.
base = E9 09

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the BBS message to unlock.
type = hex



[Command]
name = option
mask = FF 00 00 00
desc = Creates a cursor menu option at the current text position.
base = EA
prnt = true

[Parameter]
name = brackets
offs = 1
bits = 1
desc = If true, uses a brackets cursor instead of the standard arrow cursor.
valn = bool

[Parameter]
name = left
offs = 2.4
bits = 4
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 2.0
bits = 4
desc = Which option to go to when Right is pressed.

[Parameter]
name = up
offs = 3.4
bits = 4
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3.0
bits = 4
desc = Which option to go to when Down is pressed.



[Command]
name = space
mask = FF FF 00
desc = Moves the text position to the right in blocks of space widths.
base = EB 00
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to insert.



[Command]
name = spacePx
mask = FF FF 00
desc = Moves the text position to the right a number of pixels.
base = EB 01
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of pixels to insert.



[Command]
name = select
mask = FF 00 00
desc = Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = EC

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = noDelay
offs = 2.4
bits = 1
desc = If true, the selection marker appears immediately; otherwise, there is a delay before it appears.
valn = bool

[Parameter]
name = BSeparate
offs = 2.5
bits = 1
desc = If true, pressing the B button is treated as a separate option; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.6
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = clear
offs = 2.7
bits = 1
desc = If true, clears the message box after choosing an option.
valn = bool

[Parameter]
name = targets
offs = 1
bits = 8
addv = -3

[Parameter]
name = targets.jump
rela = $
bits = 8
desc = A script that execution can jump to depending on the chosen option, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = wait
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames.
base = ED 00
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The amount of frames to wait.



[Command]
name = waitSkip
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames, unless the A or B button has been pressed.
base = ED 01
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The maximum amount of frames to wait.



[Command]
name = waitFlag
mask = FF FF 00 00
desc = Pauses script execution until the specified flag is set.
base = ED 02
prnt = true

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag that must be set before script execution may continue.
type = hex



[Command]
name = waitOWVar
mask = FF FF 00 00
desc = Pauses script execution until the specified overworld variable equals a specific value.
base = ED 03
prnt = true

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value the variable must be equal to before script execution may continue.



[Command]
name = waitHold
; NOTE: only is 2 bytes long strictly speaking, but the game reserves 4 bytes
mask = FF FF 00 00
desc = Pauses script execution indefinitely.
base = ED FF
ends = always



[Command]
name = checkFlag
mask = FF FF 00 00 00 00
desc = Checks the specified flag, and jumps to a different script depending on if it is true or false.
base = EE 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to check.
type = hex

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChapter
mask = FF FF 00 00 00 00
desc = Checks the current story chapter, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 01

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the current story chapter falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the current story chapter falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSubArea
mask = FF FF 00 00 00 00
desc = Checks the current subarea, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 02

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the subarea falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the subarea falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGlobal
mask = FF FF 00 00 00 00
desc = Checks a global variable in memory, and jumps to a different script depending on if it is equal to the specified value or not.
base = EE 03

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable to load.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the values are equal, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEqual
offs = 5
bits = 8
desc = The script to jump to if the values are not equal, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTournamentRound
mask = FF FF 00 00 00 00
desc = Checks which round the player is in in the specified tournament, and jumps to a different script depending on if it is equal to the specified value or not. If the round equals 4, the tournament has yet to start.
base = EE 04

[Parameter]
name = tournament
offs = 2
bits = 8
desc = The tournament to check the player's ranking of.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the values are equal, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEqual
offs = 5
bits = 8
desc = The script to jump to if the values are not equal, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGameVersion
mask = FF FF 00 00
desc = Checks the current game version, and jumps to a different script depending on if the current game is Red Sun or Blue Moon.
base = EE 05

[Parameter]
name = jumpIfRedSun
offs = 2
bits = 8
desc = The script to jump to if the current game is Red Sun, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfBlueMoon
offs = 3
bits = 8
desc = The script to jump to if the current game is Blue Moon, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkPlaythrough
mask = FF FF 00 00 00 00
desc = Checks the current playthrough count, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 06

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the playthrough count falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the playthrough count falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkItem
mask = FF FF 00 00 00 00 00
desc = Checks how many of the specified item are in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EE 07

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to check the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 5
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 6
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChipCode
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how many of the specified chip with the specified code are in the player's Pack as well as folders, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EE 08

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to check.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to check.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkPackChipCode
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how many of the specified chip with the specified code are in the player's Pack, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EE 09

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to check.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to check.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the number of chips is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the number of chips is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the number of chips is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGiveItem
mask = FF FF 00 00 00 00 00
desc = Attempts to adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded, plays a sound effect if any were added, and jumps to a different script depending on how many were added.
base = EE 0A

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give, or 255 to give a buffered item.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.

[Parameter]
name = jumpIfAll
offs = 4
bits = 8
desc = The script to jump to if all items could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 5
bits = 8
desc = The script to jump to if no items at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 6
bits = 8
desc = The script to jump to if some, but not all items could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeItem
mask = FF FF 00 00 00 00 00
desc = Attempts to take from the player's inventory a specified amount of the specified item, but only if the player has enough, and jumps to a different script depending on how many the player had.
base = EE 0B

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.

[Parameter]
name = jumpIfAll
offs = 4
bits = 8
desc = The script to jump to if there were enough items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 5
bits = 8
desc = The script to jump to if there were no items at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 6
bits = 8
desc = The script to jump to if there were some, but not enough items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setItem
mask = FF FF 00 00
desc = Sets the count of the specified item in the player's inventory to the specified amount, and plays a sound effect.
base = EE 0C

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to change the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The new amount of items.



[Extension]
name = checkItem
mask = FF FF 00 00 00 00 00
base = EE 0D



[Command]
name = checkGiveZenny
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to adds to the player's inventory and buffers a specified amount of Zenny, or sets it to the maximum if that is exceeded, plays a sound effect if any was added, and jumps to a different script depending on how much was added.
base = EE 0E

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny to give and buffer, or 4294967295 to use a previously buffered amount.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if all Zenny could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if no Zenny at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if some, but not all Zenny could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeZenny
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to take from the player's inventory a specified amount of Zenny, but only if the player has enough, and jumps to a different script depending on how much the player had.
base = EE 0F

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny to take.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if there was enough Zenny, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if there was no Zenny at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if there was some, but not enough Zenny, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setZenny
mask = FF FF 00 00 00 00
desc = Sets the amount of Zenny in the player's inventory to the specified amount, and plays a sound effect.
base = EE 10

[Parameter]
name = amount
offs = 2
bits = 32
desc = The new amount of Zenny.



[Command]
name = checkZenny
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how much Zenny is in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EE 11

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the amount of Zenny is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the amount of Zenny is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the amount of Zenny is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGiveBugFrags
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to adds to the player's inventory and buffers a specified amount of BugFrags, or sets it to the maximum if that is exceeded, plays a sound effect if any were added, and jumps to a different script depending on how many were added.
base = EE 12

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of BugFrags to give and buffer, or 4294967295 to use a previously buffered amount.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if all BugFrags could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if no BugFrags at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if some, but not all BugFrags could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeBugFrags
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to take from the player's inventory a specified amount of BugFrags, but only if the player has enough, and jumps to a different script depending on how many the player had.
base = EE 13

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of BugFrags to take.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if there were enough BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if there were no BugFrags at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if there were some, but not enough BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setBugFrags
mask = FF FF 00 00 00 00
desc = Sets the amount of BugFrags in the player's inventory to the specified amount, and plays a sound effect.
base = EE 14

[Parameter]
name = amount
offs = 2
bits = 32
desc = The new amount of BugFrags.



[Command]
name = checkBugFrags
mask = FF FF 00 00 00 00 00 00 00
desc = Compares the amount of BugFrags in the player's inventory to the specified amount, and jumps to a different script depending on if it is equal, greater or less.
base = EE 15

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the amount of BugFrags is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the amount of BugFrags is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the amount of BugFrags is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGiveTournamentPoints
mask = FF FF 00 00 00 00
desc = Attempts to adds to the player's inventory and buffers a specified amount of tournament points, or sets it to the maximum if that is exceeded, plays a sound effect if any were added, and jumps to a different script depending on how many were added.
base = EE 16

[Parameter]
name = amount
offs = 2
bits = 8
desc = The amount of tournament points to give and buffer, or 4294967295 to use a previously buffered amount.

[Parameter]
name = jumpIfAll
offs = 3
bits = 8
desc = The script to jump to if all tournament points could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 4
bits = 8
desc = The script to jump to if no tournament points at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 5
bits = 8
desc = The script to jump to if some, but not all tournament points could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeTournamentPoints
mask = FF FF 00 00 00 00
desc = Attempts to take from the player's inventory a specified amount of tournament points, but only if the player has enough, and jumps to a different script depending on how many the player had.
base = EE 17

[Parameter]
name = amount
offs = 2
bits = 8
desc = The amount of tournament points to take.

[Parameter]
name = jumpIfAll
offs = 3
bits = 8
desc = The script to jump to if there were enough tournament points, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 4
bits = 8
desc = The script to jump to if there were no tournament points at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 5
bits = 8
desc = The script to jump to if there were some, but not enough tournament points, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setTournamentPoints
mask = FF FF 00 00 00 00
desc = Sets the amount of tournament points in the player's inventory to the specified amount and plays a sound effect.
base = EE 18

[Parameter]
name = amount
offs = 2
bits = 8
desc = The new amount of tournament points.



[Command]
name = checkTournamentPoints
mask = FF FF 00 00 00 00
desc = Compares the amount of tournament points in the player's inventory to the specified amount, and jumps to a different script depending on if it is equal, greater or less.
base = EE 19

[Parameter]
name = amount
offs = 2
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 3
bits = 8
desc = The script to jump to if the amount of tournament points is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 4
bits = 8
desc = The script to jump to if the amount of tournament points is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 5
bits = 8
desc = The script to jump to if the amount of tournament points is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkHaveOneItem
mask = FF FF 00 00 00 00
desc = Checks the player's inventory for the specified range of items, and jumps to a different script depending on if the player has any of them.
base = EE 1A

[Parameter]
name = item
offs = 2
bits = 8
desc = The first item to check for.

[Parameter]
name = count
offs = 3
bits = 8
desc = The amount of subsequent items to check for.

[Parameter]
name = jumpIfOne
offs = 4
bits = 8
desc = The script to jump to if the player has at least one of the specified items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 5
bits = 8
desc = The script to jump to if the player does not have any of the specified items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = itemGiveNaviCustProgram
mask = FF FF 00 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a specified amount of the specified NaviCust program with the specified color, or sets it to the maximum if that is exceeded. If the specified program/color combination does not exist, no NaviCust program is given.
base = EE 1B

[Parameter]
name = program
offs = 2
bits = 8
desc = The NaviCust program to give, or 255 to use a previously buffered program.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the NaviCust program to give, or 255 to use a previously buffered color.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of NaviCust programs to give.



[Command]
name = itemTakeNaviCustProgram
mask = FF FF 00 00 00
desc = Takes from the player's inventory a specified amount of the specified NaviCust program with the specified color, but only if the player has enough. If the specified program/color combination does not exist, no NaviCust program is taken.
base = EE 1C

[Parameter]
name = program
offs = 2
bits = 8
desc = The NaviCust program to take.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the NaviCust program to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of NaviCust programs to take.



[Command]
name = itemSetNaviCustProgram
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and sets the count of the specified NaviCust program with the specified color in the player's inventory to the specified amount. If the specified program/color combination does not exist, no NaviCust program is given or taken.
base = EE 1D

[Parameter]
name = program
offs = 2
bits = 8
desc = The NaviCust program to change the amount of.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the NaviCust program to change the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The new amount of NaviCust programs.



[Command]
name = checkNaviCustProgram
mask = FF FF 00 00 00 00 00 00
desc = Checks how many of the specified NaviCust program with the specified color are in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EE 1E

[Parameter]
name = program
offs = 2
bits = 8
desc = The NaviCust program to check the amount of.

[Parameter]
name = color
offs = 7
bits = 8
desc = The color of the NaviCust program to check.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the number of NaviCust programs is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 5
bits = 8
desc = The script to jump to if the number of NaviCust programs is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 6
bits = 8
desc = The script to jump to if the number of NaviCust programs is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkToyRobotStory
mask = FF FF 00 00
desc = Checks whether the story for the current raft position in the Toy Robot Comp has been finished, and jumps to a different script depending on if it is. This command will only work correctly if used in the Toy Robot Comp.
base = EE 1F

[Parameter]
name = jumpIfFinished
offs = 2
bits = 8
desc = The script to jump to if the story corresponding with the current raft position has been finished, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotFinished
offs = 3
bits = 8
desc = The script to jump to if the story corresponding with the current raft position has not been finished, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkHaveTwoItem
mask = FF FF 00 00 00 00
desc = Checks the player's inventory for the specified range of items, and jumps to a different script depending on if the player has at least two of them.
base = EE 20

[Parameter]
name = item
offs = 2
bits = 8
desc = The first item to check for.

[Parameter]
name = count
offs = 3
bits = 8
desc = The amount of subsequent items to check for.

[Parameter]
name = jumpIfTwo
offs = 4
bits = 8
desc = The script to jump to if the player has at least two of the specified items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 5
bits = 8
desc = The script to jump to if the player has less than two of the specified items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBattleResult
mask = FF FF 00 00 00 00
desc = Jumps to a different script depending on the result of the last battle.
base = EE 21

[Parameter]
name = jumpIfWon
offs = 2
bits = 8
desc = The script to jump to if the player won the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLost
offs = 3
bits = 8
desc = The script to jump to if the player lost the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfTie
offs = 4
bits = 8
desc = The script to jump to if the last battle resulted in a tie, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfEscaped
offs = 5
bits = 8
desc = The script to jump to if the player escaped from the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShopStock
mask = FF FF 00 00 00
desc = Checks the stock of the specified shop, and jumps to a different script depending on if the shop is all sold out.
base = EE 22

[Parameter]
name = shop
offs = 2
bits = 8
desc = The shop to check the stock of.

[Parameter]
name = jumpIfStocked
offs = 3
bits = 8
desc = The script to jump to if the shop still has stock, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSoldOut
offs = 4
bits = 8
desc = The script to jump to if the shop is all sold out, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryStandard
mask = FF FF 00 00 00 00
desc = Checks the amount of Standard chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 24

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of Standard chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of Standard chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryMega
mask = FF FF 00 00 00 00
desc = Checks the amount of Mega chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 25

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of Mega chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of Mega chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryGiga
mask = FF FF 00 00 00 00
desc = Checks the amount of Giga chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 26

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of Giga chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of Giga chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryPA
mask = FF FF 00 00 00 00
desc = Checks the amount of Program Advances in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 27

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of ProgramAdvances in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of ProgramAdvances in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkMultiFlag
mask = FF FF 00 00 00 00 00
desc = Checks a series of flags starting at the specified flag, and jumps to a different script depending on if they are all set.
base = EE 28

[Parameter]
name = flag
offs = 2
bits = 16
desc = The first flag to check.
type = hex

[Parameter]
name = count
offs = 4
bits = 8
desc = The amount of subsequent flags to check.

[Parameter]
name = jumpIfAllSet
offs = 5
bits = 8
desc = The script to jump to if all flags are set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotAllSet
offs = 6
bits = 8
desc = The script to jump to if not all flags are set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkWaterGodProgram
mask = FF FF 00
desc = Jumps to a script index loaded from the WaterGod Program buffer. This index can take values 10-17, 20-27 or 30-37, and is set when the player jacks in.
base = EE 29

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the jump buffer to read from. This should always be zero.



[Command]
name = checkChip
mask = FF FF 00 00 00 00 00 00
desc = Checks how many of the specified chip with any code are in the player's Pack as well as folders, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount. This command has a bug where the first byte after it is skipped/not printed.
base = EE 2A

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to check.

[Parameter]
name = amount
offs = 4
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 5
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 6
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 7
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkDoubleSouls
mask = FF FF 00 00
desc = Checks if the player has unlocked all DoubleSouls, and jumps to a different script depending on if they have.
base = EE 2B

[Parameter]
name = jumpIfAll
offs = 2
bits = 8
desc = The script to jump to if all DoubleSouls have been unlocked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotAll
offs = 3
bits = 8
desc = The script to jump to if not all DoubleSouls have been unlocked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkKarma
mask = FF FF 00 00
desc = Checks the player's karma, and jumps to a different script depending on if they are Light or Dark.
base = EE 2C

[Parameter]
name = jumpIfLight
offs = 2
bits = 8
desc = The script to jump to if the player's karma is 500 or more, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDark
offs = 3
bits = 8
desc = The script to jump to if the player's karma is less than 500, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jump
mask = FF FF 00
desc = Jumps to a different script.
base = EF 00
# Takes priority over jumpRandom.
plen = 2

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jumpRandom
mask = FF 00
desc = Jumps to a random different script.
base = EF 00

[Parameter]
name = unused
offs = 1.6
bits = 1
desc = An unused parameter with unknown intended purpose.
valn = bool

[Parameter]
name = untrap
offs = 1.7
bits = 1
desc = If set to true, the first jump target will be ignored if Untrap is active.
valn = bool

[Parameter]
name = targets
offs = 1
bits = 6
addv = 1
dgrp = 1,1

[Parameter]
name = targets.ratio
desc = The ratio for this entry to be picked randomly.
rela = $
bits = 8

[Parameter]
name = targets.jump
desc = A script that execution can randomly jump to.
rela = $
bits = 8
type = jump
valn = mmbn-jump



[Command]
name = textSpeed
mask = FF FF 00
desc = Changes the speed at which text is printed to the screen.
base = F0 00

[Parameter]
name = delay
offs = 2
bits = 8
desc = The amount of frames to wait after printing a character. The default is 2 frames.



[Command]
name = clearMsg
mask = FF
desc = Clears any currently open message box and resets the text printer position.
base = F1



[Command]
name = controlLock
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = F2 00



[Command]
name = controlUnlock
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = F2 01



[Command]
name = controlSet
mask = FF FF 00
desc = Sets the specified overworld control bits.
base = F2 02

[Parameter]
name = bitmask
offs = 2
bits = 8
desc = The overworld control bits to set.



[Command]
name = itemGive
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded.
base = F3 00

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give, or 255 to load from a previously buffered Mystery Data and buffer a value based on which item that was.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.



[Command]
name = itemTake
mask = FF FF 00 00
desc = Takes from the player's inventory a specified amount of the specified item, but only if the player has enough.
base = F3 01

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.



[Command]
name = itemSet
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and sets the count of the specified item in the player's inventory to the specified amount.
base = F3 02

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to change the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The new amount of items.



[Command]
name = itemGiveChip
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and adds to the player's Pack a specified amount of the specified chip with the specified code, or sets it to the maximum if that is exceeded.
base = F3 10

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to give, or 65535 to load from a previously buffered Mystery Data.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to give, or 255 to load from a previously buffered Mystery Data.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of chips to give.



[Command]
name = itemTakeChip
mask = FF FF 00 00 00 00
desc = Takes from the player's inventory a specified amount of the specified chip with the specified code, but only if the player has enough.
base = F3 11

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to take.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to take.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of chips to take.



[Command]
name = itemSetChip
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and sets the count of the specified chip with the specified code in the player's Pack to the specified amount.
base = F3 12

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to change the amount of.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to change the amount of.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The new amount of chips.



[Command]
name = itemGiveAllChips
mask = FF FF
desc = Plays the "item get" sound effect, and adds to the player's Pack 30 of every chip in the Library.
base = F3 15



[Command]
name = mugshotShow
mask = FF FF 00
desc = Displays a mugshot in the current message box.
base = F4 00
mugs = mugshot

[Parameter]
name = mugshot
offs = 2
bits = 8
desc = The mugshot to use.
valn = mmbn4-mugshots



[Command]
name = mugshotHide
mask = FF FF
desc = Hides any mugshot being displayed in the current message box.
base = F4 01
# intentionally empty
mugs = 



[Command]
name = mugshotPalette
mask = FF FF 00
desc = Changes the palette of the mugshot currently being displayed.
base = F4 02

[Parameter]
name = palette
offs = 2
bits = 8
desc = The mugshot palette to use.



[Command]
name = mugshotAnimation
mask = FF FF 00
desc = Changes the animation of the mugshot currently being displayed.
base = F4 03

[Parameter]
name = animation
offs = 2
bits = 8
desc = The mugshot animation to use.



[Command]
name = mugshotOAMPalette
mask = FF FF 00
desc = Changes which OAM palette will be used to store the next mugshot's palette.
base = F4 04

[Parameter]
name = palette
offs = 2
bits = 8
desc = The OAM palette to use.



[Command]
name = color
mask = FF FF 00
desc = Changes the palette of the message box text and arrow.
base = F5 00

[Parameter]
name = palette
offs = 2
bits = 8
desc = The palette to use.



[Command]
name = colorBuffered
mask = FF FF 00
desc = Changes the palette of the message box text and arrow to a previously buffered palette.
base = F5 01

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The palette buffer to load from.



[Command]
name = positionBox
mask = FF FF 00 00 00
desc = Changes the position and type of the message box background, whether it is currently being displayed or not.
base = F6 00

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the message box and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the message box and the top edge of the screen.

[Parameter]
name = type
offs = 4
bits = 8
desc = The type of message box to use.



[Command]
name = positionText
mask = FF FF 00 00 00
desc = Changes the position of the text, as well as the relative distance of the message box arrow, whether it is currently being displayed or not.
base = F6 02

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the text and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the text and the top edge of the screen.

[Parameter]
name = arrowDistance
offs = 4
bits = 8
desc = The vertical distance, in increments of 12 pixels, between the top edge of the text and the top edge of the message box arrow.



[Command]
name = positionArrow
mask = FF FF 00 00
desc = Changes the position of the message box arrow, whether it is currently being displayed or not.
base = F6 04

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the arrow and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the arrow and the top edge of the screen.



[Command]
name = positionMugshot
mask = FF FF 00 00
desc = Changes the position of the mugshot, unless it is currently being displayed.
base = F6 05

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the center of the mugshot and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the center of the mugshot and the top edge of the screen.



[Command]
name = positionTextCenter
mask = FF FF 00 00
desc = Centers the text in the screen given the specified width and height, and places the message box arrow in the bottom right corner of the text.
base = F6 06

[Parameter]
name = width
offs = 2
bits = 8
desc = The horizontal distance, in increments of 11 pixels, between the left edge of the text and the right edge of the text.

[Parameter]
name = height
offs = 3
bits = 8
desc = The vertical distance, in increments of 14 pixels, between the top edge of the text and the bottom edge of the text.



[Command]
name = positionOptionHorizontal
mask = FF FF 00
desc = Allocates space for a number of horizontally oriented menu options from the right side of the text area, taking into account the current state of the message box. This command does not function in the English version.
base = F6 07
prnt = true

[Parameter]
name = width
offs = 2
bits = 8
desc = The horizontal distance, in increments of a single character width, between the right edge of the text area and the left edge of the menu option.



[Command]
name = positionOptionVertical
mask = FF FF 00
desc = Allocates space for a menu option in a vertically oriented menu from the right side of the text area, taking into account the current state of the message box. This command does not function in the English version.
base = F6 08
prnt = true

[Parameter]
name = width
offs = 2
bits = 8
desc = The horizontal distance, in increments of a single character width, between the right edge of the text area and the left edge of the menu option.



[Command]
name = positionOptionFromCenter
mask = FF FF 00
desc = Allocates space for a number of menu options from the center of the text area. This command does not function in the English version.
base = F6 09
prnt = true

[Parameter]
name = width
offs = 2
bits = 8
desc = The horizontal distance, in increments of a single character width, between the center of the text area and the left edge of the menu option.



[Command]
name = positionTextPrinter
mask = FF FF 00 00
desc = Changes the current position of the text printer in the text block. This command does not function in the Japanese version.
base = F6 0A

[Parameter]
name = row
offs = 2
bits = 8
desc = The current row that the text printer is in, from 1 to 3. This parameter must match for the command to work correctly.

[Parameter]
name = left
offs = 3
bits = 8
desc = The horizontal position (in pixels) of the text printer in the text block.



[Command]
name = playerLock
mask = FF FF
desc = Locks the player's movement.
base = F7 00



[Command]
name = playerAnimateScene
mask = FF FF 00
desc = Sets the player's current animation. Does not work if the player is interacting with an object.
base = F7 01

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Command]
name = playerUnlock
mask = FF FF
desc = Unlocks the player's movement.
base = F7 02



[Command]
name = playerFinish
mask = FF FF
desc = Pauses script execution until the player's current animation finishes or loops.
base = F7 03



[Command]
name = playerResetScene
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set. Does not work if the player is interacting with an object.
base = F7 04



[Command]
name = playerAnimateObject
mask = FF FF 00
desc = Sets the player's current animation. Only works if the player is interacting with an object.
base = F7 05

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Command]
name = playerResetObject
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set. Only works if the player is interacting with an object.
base = F7 06



[Command]
name = storeTimer
mask = FF FF 00 00
desc = Writes the specified value into the specified timer.
base = F8 00

[Parameter]
name = timer
offs = 2
bits = 8
desc = The timer to change the value of.

[Parameter]
name = value
offs = 3
bits = 8
desc = The new value for the timer.



[Command]
name = storeGlobal
mask = FF FF 00 00
desc = Writes the specified 8-bit value into the specified global variable.
base = F8 01

[Parameter]
name = global
offs = 2
bits = 8
desc = The global variable to change the value of.

[Parameter]
name = value
offs = 3
bits = 8
desc = The new value for the global variable.



[Command]
name = printItem
mask = FF FF 00 0F
desc = Prints the name of an item, either specified or loaded from a buffer.
base = F9 00 00 00
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the item index from, plus one.

[Parameter]
name = item
offs = 2
bits = 8
desc = The buffer to load the item from, plus one. If zero, uses the specified item instead.



[Command]
name = printChip
mask = FF FF 00 0F
desc = Prints the name of a chip, either specified or loaded from a buffer.
base = F9 00 00 01
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the chip index from, plus one.

[Parameter]
name = chip
offs = 2
bits = 8
desc = If the buffer is not set, the chip name to print.



[Extension]
name = printChip
mask = FF FF 00 0F
base = F9 00 00 02
prnt = true

[Parameter]
name = chip
extb = 256



[Command]
name = printCode
mask = FF FF 00 0F
desc = Prints a chip code, either specified or loaded from a buffer.
base = F9 00 00 03
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the chip code index from plus one.

[Parameter]
name = code
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the chip code to print.
valn = mmbn-code



[Command]
name = printFolderName
mask = FF FF 00 0F
desc = Prints the name of a folder, either specified or loaded from a buffer.
base = F9 00 00 04
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the folder name index from plus one.

[Parameter]
name = entry
offs = 2
bits = 4
desc = If the buffer is not set, the entry index of the folder name to print.



[Command]
name = printNaviCustProgram
mask = FF FF 00 0F
desc = Prints the name of a NaviCust program, either specified or loaded from a buffer.
base = F9 00 00 05
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the folder name index from plus one.

[Parameter]
name = program
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the NaviCust program name to print.



[Extension]
name = printNaviCustProgram
mask = FF FF 00 0F
base = F9 00 00 06



[Command]
name = printEnemy
mask = FF FF 00 0F
desc = Prints the name of an enemy, either specified or loaded from a buffer.
base = F9 00 00 07
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the enemy name index from plus one.

[Parameter]
name = enemy
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the enemy name to print.



[Command]
name = printRiddle
mask = FF FF 00 0F
desc = Prints a NumberMan scenario door riddle, either specified or loaded from a buffer.
base = F9 00 00 08
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the riddle index from plus one.

[Parameter]
name = riddle
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the riddle to print.



[Command]
name = printZenny
mask = FF FF 00 FF
desc = Prints the current amount of Zenny the player has.
base = F9 03 00 00
# Takes priority over printBuffer.
plen = 4
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the amount of Zenny consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the amount of Zenny with zeros instead of spaces, if necessary.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the amount of Zenny instead of to the right.
valn = bool



[Extension]
name = printZenny
mask = FF FF 00 FF
base = F9 04 00 00



[Command]
name = printBuffer
mask = FF FF 00 00
desc = Prints the contents of the specified 32-bit buffer as a decimal number.
base = F9 03
prnt = true

[Parameter]
name = buffer
offs = 3
bits = 8
desc = The buffer to print.

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the amount of Zenny with zeros instead of spaces, if necessary.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the amount of Zenny instead of to the right.
valn = bool



[Extension]
name = printBuffer
mask = FF FF 00 00
base = F9 04



[Command]
name = printWaitingRoomName
mask = FF FF 00 0F
desc = Prints the player name of a Navi in the waiting room, either specified or loaded from a buffer.
base = F9 05 00 00
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the player name index from plus one.

[Parameter]
name = name
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the player name to print.



[Command]
name = printRecordName
mask = FF FF 00 0F
desc = Prints the player name of a Navi's SP deletion time record, either specified or loaded from a buffer.
base = F9 05 00 01
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the player name index from plus one.

[Parameter]
name = name
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the player name to print.



[Command]
name = printStoryData
mask = FF FF 00 00
desc = Prints the specified story data from the specified story from the current Toy Robot Comp. This command will only work correctly if used in the Toy Robot Comp.
base = F9 06
prnt = true

[Parameter]
name = story
offs = 2
bits = 8
desc = The story index in the current Toy Robot Comp to print story data from.

[Parameter]
name = index
offs = 3
bits = 8
desc = The index of the story data to print from the specified story in the current Toy Robot Comp.



[Command]
name = printStoryDataOption
mask = FF FF 00
desc = Prints the specified story data option from the current Toy Robot Comp that the player is holding. This command will only work correctly if used in the Toy Robot Comp.
base = F9 07
prnt = true

[Parameter]
name = option
offs = 2
bits = 8
desc = The index of the story data option to print.



[Command]
name = printStoryDataOptionRemaining
mask = FF FF
desc = Prints the remaining story data option from the current Toy Robot Comp that the player is holding, after the first story data option has been selected. This command will only work correctly if used in the Toy Robot Comp.
base = F9 08
prnt = true



[Command]
name = printStoryDataChosen
mask = FF FF 00
desc = Prints the chosen story data option with the specified index, for stories that require more than one story fragment. This command will only work correctly if used in the Toy Robot Comp.
base = F9 09
prnt = true

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the chosen story data option to print.



[Command]
name = printBufferedShortString
mask = FF FF 00
desc = Prints a script of at most 3 bytes from a buffered pointer.
base = F9 0A
prnt = true

[Parameter]
name = bufferOffset
offs = 2
bits = 8
desc = The offset in the buffer to load the script pointer from.



[Command]
name = printShortString
mask = FF FF 00
desc = Prints a script of at most 3 bytes from the buffer.
base = F9 0B
prnt = true

[Parameter]
name = bufferOffset
offs = 2
bits = 8
desc = The offset in the buffer from which to start printing.



[Command]
name = spriteRemove
mask = FF FF 00
desc = Removes the specified sprite from the map.
base = FA 00

[Parameter]
name = sprite
offs = 2
bits = 8
desc = The sprite to remove.



[Command]
name = spriteRotate
mask = FF FF 00 00
desc = Rotates the specified sprite to the specified direction.
base = FA 01

[Parameter]
name = sprite
offs = 2
bits = 8
desc = The sprite to rotate.

[Parameter]
name = direction
offs = 3
bits = 8
desc = The new direction for the sprite.



[Command]
name = startGiveRandomZenny
mask = FF FF 00
desc = Adds to the player's inventory and buffers an amount of Zenny, and plays a sound effect. Unlike in previous games, this command is not actually random but rather always picks the last amount.
base = FB 00

[Parameter]
name = pool
offs = 2
bits = 8
addv = 1

[Parameter]
name = pool.amount
desc = An amount of Zenny to give.
rela = $
bits = 32



[Command]
name = startGiveRandomChipCode
mask = FF FF 00
desc = Adds to the player's Pack and buffers a chip with code, and plays a sound effect. Unlike in previous games, this command is not actually random but rather always picks the last amount.
base = FB 01

[Parameter]
name = pool
offs = 2
bits = 8
addv = 1

[Parameter]
name = pool.chip
desc = A chip to give.
rela = $
bits = 8

[Parameter]
name = pool.code
desc = The code of the chip to give.
rela = $
bits = 8



[Command]
name = startRandomBattle
mask = FF FF
desc = Starts a random battle from the current area.
base = FB 02
ends = never



[Command]
name = startShop
mask = FF FF 00
desc = Opens the shop screen with the specified shop.
base = FB 05
ends = always

[Parameter]
name = shop
offs = 2
bits = 8
desc = The index of the shop to load.



[Command]
name = startBugFragTrader
mask = FF FF FF 00
desc = Checks if the player has at least 10 BugFrags, and jumps to a different script if they don't.
base = FB 06 01
plen = 3
ends = never

[Parameter]
name = jumpIfNotEnoughBugFrags
offs = 3
bits = 8
desc = The script to jump to if the player has less than 10 BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = startChipTrader
mask = FF FF 00 00
desc = Checks if the player has at least the specified number of chips, jumping to a different script if they don't, and opens the chip trader screen with the specified number of chips.
base = FB 06
ends = never

[Parameter]
name = amount
offs = 2
bits = 8
desc = The amount of chips the chip trader takes.

[Parameter]
name = jumpIfNotEnoughChips
offs = 3
bits = 8
desc = The script to jump to if the player has less than the specified number of chips, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = startWarp
mask = FF FF 00
desc = Triggers the warp with the specified number in the current area.
base = FB 07
ends = always

[Parameter]
name = warp
offs = 2
bits = 8
desc = The index of the warp to trigger.



[Command]
name = startHeal
mask = FF FF 00 00
desc = Heals the player by the specified amount of HP (but no more than their maximum HP) and plays a sound effect.
base = FB 08

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of HP to recover.



[Command]
name = startBBS
mask = FF FF 00
desc = Opens the BBS screen with the specified BBS.
base = FB 0A
ends = always

[Parameter]
name = bbs
offs = 2
bits = 8
desc = The index of the BBS to load.



[Command]
name = startGiveFolder
mask = FF FF 00
desc = Replaces the Player's folder in the specified slot with the specified folder and registers all its chips in the Library.
base = FB 0D

[Parameter]
name = slot
offs = 2.4
bits = 4
desc = The folder slot to place the new folder in.

[Parameter]
name = folder
offs = 2
bits = 4
desc = The new folder to place in the specified slot.



[Command]
name = callSave
mask = FF FF 00 00 00
desc = Saves the game, and jumps to a different script depending on if the save was successful or not.
base = FC 00

[Parameter]
name = jumpIfSuccessful
offs = 2
bits = 8
desc = The script to jump to if the save was successful, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFailed
offs = 3
bits = 8
desc = The script to jump to if the save failed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpUnused
offs = 4
bits = 8
desc = An unused jump destination, presumably for if the save failed.
type = jump
valn = mmbn-jump



[Command]
name = callTournament
mask = FF FF 00 00 00
desc = Opens the tournament board for the specified tournament, optionally producing the round advance animation for the current round and warping the player to the specified tournament board map.
base = FC 01

[Parameter]
name = tournament
offs = 2
bits = 8
desc = The tournament to open the tournament board for.

[Parameter]
name = advance
offs = 3
bits = 8
desc = If true, plays the round advance animation for the current round of the specified tournament, after which the player is warped to the specified tournament board map.
valn = bool

[Parameter]
name = map
offs = 4
bits = 8
desc = The map to warp the player to after the round advance animation finishes playing. Can be 0 (DenDome), 1 (Castillo), 2 (Netopia) or 3 (Higsby's). If the advance parameter is false, this parameter has no effect.



[Command]
name = callCancelSonar
mask = FF FF
desc = Cancels any ongoing sonar effect in the Elec Tower Comps.
base = FC 02



[Command]
name = callBufferTerryPassword
mask = FF FF FF 00
desc = Buffers the current chip folder password used in the SparkMan scenario.
base = FC 03 00



[Command]
name = callScenarioEffect
mask = FF FF FF 00
desc = Enables a scenario-specific effect, such as CyberBat counter, oxygen counter, constant HP loss, MetalMan score counter, etc.
base = FC 03 01

[Parameter]
name = effect
offs = 3
bits = 8
desc = The scenario-specific effect to enable.



[Command]
name = callBufferCastilloPassword
mask = FF FF FF 00
desc = Buffers the Castillo Area password, 'RAEJDUK'.
base = FC 03 02



[Command]
name = callPETEffect
mask = FF FF FF 00
desc = Triggers a PET effect, such as hiding/showing the icon, producing e-mail/call notifications, etc.
base = FC 03 03

[Parameter]
name = effect
offs = 3
bits = 8
desc = The PET effect to trigger.



[Command]
name = callWorldMap
mask = FF FF
desc = Opens the world map.
base = FC 04



[Command]
name = callGiveAllNaviCustPrograms
mask = FF FF
desc = Adds 9 copies of all NaviCust programs to the player's inventory.
base = FC 05



[Command]
name = callDisableMugshotBrighten
mask = FF FF
desc = Disables the mugshot brightening animation when a message box is opened.
base = FC 06



[Command]
name = callFreeTournament
mask = FF FF 00 00
desc = Starts a Free Tournament if there are enough Navis in the Comms Waiting Room to start one, and jumps to a different script depending on if the tournament could be started successfully.
base = FC 07

[Parameter]
name = jumpIfEnoughNavis
offs = 2
bits = 8
desc = The script to jump to if there was at least one Navi in the Comms Waiting Room, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnoughNavis
offs = 3
bits = 8
desc = The script to jump to if there were no Navis in the Comms Waiting Room, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckOutsideJackIn
mask = FF FF 00 00
desc = Checks the map from which the player jacked in, and jumps to a different script depending on if it is an outside map or an inside map.
base = FC 08

[Parameter]
name = jumpIfOutside
offs = 2
bits = 8
desc = The script to jump to if the player jacked in from an outside map, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInside
offs = 3
bits = 8
desc = The script to jump to if the player jacked in from an inside map, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = soundPlay
mask = FF FF 00 00
desc = Loads the specified sound track into its designated track slot and starts playback.
base = FD 00

[Parameter]
name = track
offs = 2
bits = 16
desc = The sound track to play.



[Command]
name = soundStopBGM
mask = FF FF FF FF
desc = Stops playback of all track groups if a BGM is currently playing and clears the BGM track number.
# Takes priority over soundPlayBGM.
plen = 4
base = FD 01 FF 00



[Command]
name = soundPlayBGM
mask = FF FF 00 00
desc = Loads the specified sound track into its designated track slot, sets the BGM track number to the specified sound track and starts playback.
base = FD 01

[Parameter]
name = track
offs = 2
bits = 16
desc = The sound track to play.



[Command]
name = soundEnableTextSFX
mask = FF FF
desc = Enables the sound effect that plays when a text character is printed on the screen.
base = FD 02



[Command]
name = soundDisableTextSFX
mask = FF FF
desc = Disables the sound effect that plays when a text character is printed on the screen.
base = FD 03



[Command]
name = soundStop
mask = FF FF
desc = Stops playback of all track slots and clears the BGM track number.
base = FD 04



[Command]
name = soundFadeOut
mask = FF FF 00 00
desc = Creates a fade-out for the specified track slot over the specified length of time.
base = FD 05

[Parameter]
name = slot
offs = 2
bits = 8
desc = The track slot to fade out.

[Parameter]
name = length
offs = 3
bits = 8
desc = The length of the fade-out, where each unit equates 16 frames.



[Extension]
name = soundPlay
mask = FF FF 00 00
base = FD 06



[Extension]
name = soundPlay
mask = FF FF 00 00
base = FD 07



[Command]
name = soundEnableChoiceSFX
mask = FF FF
desc = Enables the sound effect that plays when a menu option is selected or a menu is cancelled.
base = FD 08



[Command]
name = soundDisableChoiceSFX
mask = FF FF
desc = Disables the sound effect that plays when a menu option is selected or a menu is cancelled.
base = FD 09



[Command]
name = soundPlayAreaBGM
mask = FF FF
desc = Starts playing the default sound track for the current area using its assigned track slot.
base = FD 0A



[Command]
name = soundFadeInBGM
mask = FF FF 00 00
desc = If the specified sound track is a BGM, loads it into track slot 31 and sets the BGM track number, then creates a fade-in over the specified length of time.
base = FD 0B

[Parameter]
name = track
offs = 2
bits = 8
desc = The BGM sound track to play.

[Parameter]
name = length
offs = 3
bits = 8
desc = The length of the fade-out, where each unit equates 16 frames.



[Command]
name = menuOptionNumberTrader
mask = FF FF 00
desc = Creates a Number Trader entry option at the current text position that takes numerical characters (0-9).
base = FE 00

[Parameter]
name = char
offs = 2
bits = 8
desc = The digit that this option corresponds with.



[Command]
name = menuSelectNumberTrader
mask = FF FF
desc = Lets the player put in a Number Trader code using previously defined options.
base = FE 01



[Command]
name = menuOptionNumber
mask = FF FF 00
desc = Creates a password entry option at the current text position that takes numerical characters (0-9).
base = FE 02

[Parameter]
name = char
offs = 2
bits = 8
desc = The digit that this option corresponds with.



[Command]
name = menuSelectBufferedPassword
mask = FF FF 00 00 00
desc = Lets the player put in a previously buffered password, and jumps to a different script depending on the player's input.
base = FE 03

[Parameter]
name = jumpIfCorrect
offs = 2
bits = 8
desc = The script to jump to if the player entered the incorrect password, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfIncorrect
offs = 3
bits = 8
desc = The script to jump to if the player entered an incorrect password, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfCancelled
offs = 4
bits = 8
desc = The script to jump to if the player cancelled the password entry, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = menuOptionName
mask = FF FF 00
desc = Creates a password entry option at the current text position that takes name characters (0-9, A-Z, some special characters).
base = FE 04

[Parameter]
name = char
offs = 2
bits = 8
desc = The character that this option corresponds with.



[Command]
name = menuSelectName
mask = FF FF 00 00 00
desc = Lets the player put in their name using previously defined options, and jumps to a different script depending on the player's input.
base = FE 05

[Parameter]
name = jumpIfConfirmed
offs = 2
bits = 8
desc = The script to jump to if the player confirmed their entry (and it did not match a known bad word), or 255 to continue with the currect script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfBadWord
offs = 3
bits = 8
desc = The script to jump to if the player entered a bad word, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfCancelled
offs = 4
bits = 8
desc = The script to jump to if the player cancelled their entry, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = menuSelectStoryData
mask = FF FF 00 00 00
desc = Lets the player select one of their collected story data in the Toy Robot Comp, and jumps to a different script depending on the player's input.
base = FE 06

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the story data that is to be inserted.

[Parameter]
name = jumpIfConfirmed
offs = 3
bits = 8
desc = The script to jump to if the player confirmed their entry, or 255 to continue with the currect script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfCancelled
offs = 4
bits = 8
desc = The script to jump to if the player cancelled their entry, or 255 to continue with the current script.



[Command]
name = menuCheckStoryDataInput
mask = FF FF 00 00
desc = Checks the Toy Robot Comp story data entered by the player, and jumps to a different script depending on if it matches the current Toy Robot Comp story or not.
base = FE 07

[Parameter]
name = jumpIfCorrect
offs = 2
bits = 8
desc = The script to jump to if the player entered the right story data, or 255 to continue with the current script.

[Parameter]
name = jumpIfIncorrect
offs = 3
bits = 8
desc = The script to jump to if the player entered the wrong story data, or 255 to continue with the current script.



[Command]
name = menuBufferCorrectStoryData
mask = FF FF
desc = Buffers the correct Toy Robot Comp story data for the current Toy Robot Comp story.
base = FE 08



[Command]
name = menuFinishStory
mask = FF FF
desc = Finishes the current story in the Toy Robot Comp.
base = FE 09



[Command]
name = menuDeleteStoryData
mask = FF FF
desc = Deletes the Toy Robot Comp story data that the player has collected.
base = FE 0A



[Command]
name = menuCancelStory
mask = FF FF
desc = Cancels story data inputs for the current Toy Robot Comp story.
base = FE 0B



[Command]
name = menuNextStory
mask = FF FF
desc = Advances the current Toy Robot Comp story.
base = FE 0C



[Command]
name = menuOptionLetter
mask = FF FF 00
desc = Creates a password entry option at the current text position that takes alphabetical characters (A-Z).
base = FE 0D

[Parameter]
name = char
offs = 2
bits = 8
desc = The character that this option corresponds with.



[Command]
name = menuBufferCorrectRiddleAnswer
mask = FF FF 00
desc = Buffers the correct answer for the specified NumberMan scenario door riddle.
base = FE 0E

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the riddle to buffer the correct answer for.



[Command]
name = menuRegisterName
mask = FF FF
desc = Registers the player's input as their name.
base = FE 0F



[Command]
name = ereaderName
mask = FF FF 00
desc = Prints the specified name script data that was received from the e-Reader.
base = FF 00
prnt = true

[Parameter]
name = data
offs = 2
bits = 8
desc = The index of the data to print. 0 and 1 pertain to Rare Chip Data.



[Command]
name = ereaderDesc
mask = FF FF 00
desc = Prints the specified description script data that was received from the e-Reader.
base = FF 01
prnt = true

[Parameter]
name = data
offs = 2
bits = 8
desc = The index of the data to print. 0 and 1 pertain to Rare Chip Data, whereas 2 through 7 pertain to Kaizou Cards.