[CommandDatabase]
name = mmsf1
cont = 255
splt = keyWait clearMsg



#[Command]
#name = nop
#mask = FF FF
#desc = Does nothing.
#base = E5 00



[Command]
name = end
mask = FF FF
desc = Closes any open message box and ends script execution.
base = E6 00
ends = always



[Command]
name = keyWait
mask = FF FF
desc = Pauses script execution until a button is pressed.
base = E7 00



[Extension]
name = keyWait
mask = FF FF
base = E7 01



[Extension]
name = keyWait
mask = FF FF
base = E7 02



[Command]
name = msgOpen
mask = FF FF
desc = Opens the message box and waits until the animation finishes.
base = E8 00



[Command]
name = msgClose
mask = FF FF
desc = Closes the message box and waits until the animation finishes. The message box remains on-screen until script execution ends.
base = E8 01



[Command]
name = msgOpenQuick
mask = FF FF
desc = Opens the message box without any animation.
base = E8 02



[Command]
name = msgCloseQuick
mask = FF FF
desc = Closes the message box without any animation. The message box remains on-screen until script execution ends.
base = E8 03



#[Command]
#name = newline
#mask = FF FF
#desc = Continues printing text on the next line.
#base = E9 00



[Command]
name = flagSet
mask = FF FF 00 00
desc = Sets the specified flag.
base = EA 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to set.
type = hex



[Command]
name = flagClear
mask = FF FF 00 00
desc = Clears the specified flag.
base = EA 01

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to clear.
type = hex



[Command]
name = flagNextDay
mask = FF FF
desc = Prepares a save, and advances the game story to the next day. This command only functions at specific points in the story when the player must go to sleep.
base = EA 02



[Command]
name = flagSetBuffered
mask = FF FF 00
desc = Sets a buffered flag stored in memory.
base = EA 03

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the flag from.



[Command]
name = flagClearBuffered
mask = FF FF 00
desc = Clears a buffered flag stored in memory.
base = EA 04

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the flag from.



[Command]
name = optionButtonSmall8
mask = FF FF 00 00 00 00
desc = Prepares a half width option button for later display. The following 8 characters of text will be printed to the button.
base = EB 00
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.

[Parameter]
name = string
desc = The string to print on the button. Must be exactly 8 character long.
stro = 6
stru = char
strl = 8


[Command]
name = optionButtonWide16
mask = FF FF 00 00 00 00
desc = Prepares a full width option button for later display. The following 16 characters of text will be printed to the button.
base = EB 01
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.

[Parameter]
name = string
desc = The string to print on the button. Must be exactly 16 character long.
stro = 6
stru = char
strl = 16



[Command]
name = optionText
mask = FF FF 00 00 00 00
desc = Creates a cursor menu option at the current text position.
base = EB 02
prnt = true

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButtonSmall
mask = FF FF 00 00 00 00 00
desc = Prepares a half width option button for later display. The specified amount of characters will be printed to the button.
base = EB 03
prnt = true

[Parameter]
name = up
offs = 3
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 4
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 5
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 6
bits = 8
desc = Which option to go to when Right is pressed.

[Parameter]
name = string
offs = 2
bits = 8
desc = The string to print on the button.
stro = 7
stru = char



[Command]
name = optionButtonWide
mask = FF FF 00 00 00 00 00
desc = Prepares a full width option button for later display. The specified amount of characters will be printed to the button.
base = EB 04
prnt = true

[Parameter]
name = up
offs = 3
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 4
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 5
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 6
bits = 8
desc = Which option to go to when Right is pressed.

[Parameter]
name = string
offs = 2
bits = 8
desc = The string to print on the button.
stro = 7
stru = char



[Command]
name = space
mask = FF FF 00
desc = Moves the text position to the right in blocks of space widths.
base = EC 00
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to insert.



[Command]
name = spacePx
mask = FF FF 00
desc = Moves the text position to the right a number of pixels.
base = EC 01
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of pixels to insert.



[Command]
name = selectButtonRow2
mask = FF FF 00 00 00 00
desc = Displays a button layout with 2 half width buttons in a row. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 00
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonColumn2
mask = FF FF 00 00 00 00
desc = Displays a button layout with 2 full width buttons in a column. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 01
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonColumn3
mask = FF FF 00 00 00 00 00
desc = Displays a button layout with 3 full width buttons in a column. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 02
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonSquare4
mask = FF FF 00 00 00 00 00 00
desc = Displays a button layout with 4 half width buttons in a square. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 03
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 7
bits = 8
desc = The script to jump to when option 5 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectText
mask = FF FF 00 00 00 00 00 00 00 00 00
desc = Displays options in the text box. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 04
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = unused
offs = 2.6
bits = 2
desc = Unused parameter.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 7
bits = 8
desc = The script to jump to when option 5 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump6
offs = 8
bits = 8
desc = The script to jump to when option 6 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump7
offs = 9
bits = 8
desc = The script to jump to when option 7 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump8
offs = 10
bits = 8
desc = The script to jump to when option 8 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonSingle
mask = FF FF 00 00
desc = Displays a button layout with 1 single button. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = ED 05
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last defined option.
valn = bool

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = wait
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames.
base = EE 00
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The amount of frames to wait.



[Command]
name = waitFlag
mask = FF FF 00 00
desc = Pauses script execution until the specified flag is set.
base = EE 01
prnt = true

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag that must be set before script execution may continue.
type = hex



[Command]
name = waitHold
; NOTE: unlike MMBN, this command is only 2 bytes long
mask = FF FF
desc = Pauses script execution indefinitely.
base = EE 02
ends = always



[Command]
name = waitOWVar
mask = FF FF 00 00
desc = Pauses script execution until the specified overworld variable equals a specific value.
base = EE 03
prnt = true

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value the variable must be equal to before script execution may continue.



[Command]
name = waitSkip
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames, unless the A or B button has been pressed.
base = EE 04
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The maximum amount of frames to wait.



[Command]
name = checkFlag
mask = FF FF 00 00 00 00
desc = Checks the specified flag, and jumps to a different script depending on if it is true or false.
base = EF 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to check.
type = hex

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChapter
mask = FF FF 00 00 00 00
desc = Checks the current story chapter, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EF 01

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the current story chapter falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the current story chapter falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSubArea
mask = FF FF 00 00 00 00
desc = Checks the current subarea, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EF 02

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the subarea falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the subarea falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkArea
mask = FF FF 00 00 00 00
desc = Checks the current area, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EF 03

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the area falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the area falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGameVersion
mask = FF FF 00 00 00
desc = Checks the current game version, and jumps to a different script depending on if the current game is Pegasus, Leo or Dragon.
base = EF 04

[Parameter]
name = jumpIfPegasus
offs = 2
bits = 8
desc = The script to jump to if the current game is Pegasus, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLeo
offs = 3
bits = 8
desc = The script to jump to if the current game is Leo, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDragon
offs = 4
bits = 8
desc = The script to jump to if the current game is Dragon, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = check05
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 05

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check06
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 06

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check07
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 07

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check08
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 08

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check09
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 09

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check0A
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 0A

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = checkSaveExists
mask = FF FF 00 00
desc = Checks if save data already exists, and jumps to a different script depending on if it does.
base = EF 0B

[Parameter]
name = jumpIfExists
offs = 2
bits = 8
desc = The script to jump to if save data already exists, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotExists
offs = 3
bits = 8
desc = The script to jump to if there is no save data yet, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveFinished
mask = FF FF 00 00
desc = Waits until the save finishes, and jumps to a different script depending on if it was successful or not.
base = EF 0C

[Parameter]
name = jumpIfSuccessful
offs = 2
bits = 8
desc = The script to jump to if the save succeeded, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFailed
offs = 3
bits = 8
desc = The script to jump to if the save failed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveStart
mask = FF FF 00
desc = Starts a game save and jumps to a different script once the save has started.
base = EF 0D

[Parameter]
name = jumpIfStarted
offs = 2
bits = 8
desc = The script to jump to once the save has started.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveInitFinished
mask = FF FF 00
desc = Waits until the save data initialization finishes, and jumps to a different script if it was successful. Otherwise, continues with the current script.
base = EF 0E
ends = never

[Parameter]
name = jumpIfSuccessful
offs = 2
bits = 8
desc = The script to jump to if save data initialization was successful, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveInit
mask = FF FF 00
desc = Initializes the save data, and jumps to a different script if it failed. Otherwise, continues with the current script.
base = EF 0F
ends = never

[Parameter]
name = jumpIfFailed
offs = 2
bits = 8
desc = The script to jump to if save data initialization failed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkItem
mask = FF FF 00 00 00 00 00
desc = Checks how many of the specified item are in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EF 10

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to check the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 5
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 6
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBoxBattleCard
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how many of the specified Battle Card with the specified color are in the player's Card Box, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EF 11

[Parameter]
name = card
offs = 2
bits = 16
desc = The Battle Card to check.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the Battle Card to check.
valn = mmsf-color

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the number of Battle Cards is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the number of Battle Cards is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the number of Battle Cards is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkMultiFlag
mask = FF FF 00 00 00 00 00 00
desc = Checks a series of flags starting at the specified flag, and jumps to a different script depending on if they are all set.
base = EF 12

[Parameter]
name = flag
offs = 2
bits = 16
desc = The first flag to check.
type = hex

[Parameter]
name = count
offs = 4
bits = 16
desc = The amount of subsequent flags to check.

[Parameter]
name = jumpIfAllSet
offs = 6
bits = 8
desc = The script to jump to if all flags are set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotAllSet
offs = 7
bits = 8
desc = The script to jump to if not all flags are set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkRandom
mask = FF FF 00 00 00 00 00 00 00 00
desc = Picks a random number between 1 and 8, and jumps to a different script depending on the chosen number. Each has an equal chance of being chosen.
base = EF 13

[Parameter]
name = jump1
offs = 2
bits = 8
desc = The script to jump to if the random number 1 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 3
bits = 8
desc = The script to jump to if the random number 2 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 4
bits = 8
desc = The script to jump to if the random number 3 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 5
bits = 8
desc = The script to jump to if the random number 4 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 6
bits = 8
desc = The script to jump to if the random number 5 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump6
offs = 7
bits = 8
desc = The script to jump to if the random number 6 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump7
offs = 8
bits = 8
desc = The script to jump to if the random number 7 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump8
offs = 9
bits = 8
desc = The script to jump to if the random number 8 was picked, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShopStock
mask = FF FF 00 00 00
desc = Checks the stock of the specified shop, and jumps to a different script depending on if the shop is all sold out.
base = EF 14

[Parameter]
name = shop
offs = 2
bits = 8
desc = The shop to check the stock of.

[Parameter]
name = jumpIfStocked
offs = 3
bits = 8
desc = The script to jump to if the shop still has stock, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSoldOut
offs = 4
bits = 8
desc = The script to jump to if the shop is all sold out, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkZenny
mask = FF FF 00 00 00 00
desc = Checks how much Zenny is in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EF 15

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount to compare to.

[Parameter]
name = jumpIfEnough
offs = 4
bits = 8
desc = The script to jump to if the amount of Zenny is equal to or greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 5
bits = 8
desc = The script to jump to if the amount of Zenny is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkRealBrothers
mask = FF FF 00 00 00 00 00 00 00
desc = Checks the amount of real, non-ingame Brothers the player has, and jumps to a different script depending on the amount.
base = EF 16

[Parameter]
name = jumpIf0
offs = 2
bits = 8
desc = The script to jump to if the player has 0 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf1
offs = 3
bits = 8
desc = The script to jump to if the player has 1 real Brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf2
offs = 4
bits = 8
desc = The script to jump to if the player has 2 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf3
offs = 5
bits = 8
desc = The script to jump to if the player has 3 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf4
offs = 6
bits = 8
desc = The script to jump to if the player has 4 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf5
offs = 7
bits = 8
desc = The script to jump to if the player has 5 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIf6
offs = 8
bits = 8
desc = The script to jump to if the player has 6 real Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSatelliteRegistration
mask = FF FF 00 00 00
desc = Checks if the player or one of their Brothers is registered with the specified Satellite, and jumps to a different script depending on if they are.
base = EF 17

[Parameter]
name = satellite
offs = 2
bits = 8
desc = The Satellite to check registration with.

[Parameter]
name = jumpIfRegistered
offs = 3
bits = 8
desc = The script to jump to if the player or one of their Brothers is registered with the Satellite, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotRegistered
offs = 4
bits = 8
desc = The script to jump to if neither the player nor one of their Brothers is registered with the Satellite, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBoxCards
mask = FF FF 00 00 00 00
desc = Checks if the player has at least the specified amount of Battle Cards in their Card Box, and jumps to a different script depending on if they do.
base = EF 18

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of Battle Cards to compare to.

[Parameter]
name = jumpIfEnough
offs = 4
bits = 8
desc = The script to jump to if the player has at least the amount of Battle Cards in their Card Box, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 5
bits = 8
desc = The script to jump to if the player has less than the amount of Battle Cards in their Card Box, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBattleResult
mask = FF FF 00 00 00
desc = Jumps to a different script depending on the result of the last battle.
base = EF 19

[Parameter]
name = jumpIfWon
offs = 2
bits = 8
desc = The script to jump to if the player won the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLost
offs = 3
bits = 8
desc = The script to jump to if the player lost the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOther
offs = 4
bits = 8
desc = The script to jump to if the battle ended in some other way (such as escaping), or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBoktaiDSBrother
mask = FF FF 00 00
desc = Checks if the Brother in the specified Brother slot is a Boktai DS Brother, and jumps to a different script if it is. Otherwise, continues with the current script.
base = EF 1A
ends = never

[Parameter]
name = brother
offs = 2
bits = 8
desc = The Brother slot to check.

[Parameter]
name = jumpIfFalse
offs = 3
bits = 8
desc = The script to jump to if there is no Brother in the specified slot or it is not a Boktai DS Brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkMarkFlag
mask = FF FF 00 00 00
desc = Checks the specified title screen mark flag, and jumps to a different script depending on if it is true or false.
base = EF 1B

[Parameter]
name = markFlag
offs = 2
bits = 8
desc = The title screen mark flag to check.

[Parameter]
name = jumpIfTrue
offs = 3
bits = 8
desc = The script to jump to if the title screen mark flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 4
bits = 8
desc = The script to jump to if the title screen mark flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibrary
mask = FF FF 00 00 00 00
desc = Checks the amount of Battle Cards in the player's specified Library, and jumps to a different script depending on if it is at least the specified amount.
base = EF 1C

[Parameter]
name = library
offs = 2
bits = 8
desc = The library to check. Possible values include: 0 = Standard, 1 = Mega, 2 = Giga.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of Battle Cards to compare to.

[Parameter]
name = jumpifEnough
offs = 4
bits = 8
desc = The script to jump to if the player's Library contains at least the specified amount of Battle Cards, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEnough
offs = 5
bits = 8
desc = The script to jump to if the player's Library contains less than the specified amount of Battle Cards, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNoBrothers
mask = FF FF 00 00
desc = Checks if the player has no Brothers, and jumps to a different script depending on if they do.
base = EF 1D

[Parameter]
name = jumpIfNone
offs = 2
bits = 8
desc = The script to jump to if the player has no Brothers, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfAny
offs = 3
bits = 8
desc = The script to jump to if the player at least one Brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkAreaType
mask = FF FF 00 00 00
desc = Checks the type of area the player is currently in, and jumps to a different script depending on which it is.
base = EF 1E

[Parameter]
name = jumpIfRealWorld
offs = 2
bits = 8
desc = The script to jump to if the player is in the real world, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfWaveRoad
offs = 3
bits = 8
desc = The script to jump to if the player is on the Wave Road, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfComp
offs = 4
bits = 8
desc = The script to jump to if the player is in a Comp, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveStartOW
mask = FF FF 00
desc = Starts a game save on the overworld and jumps to a different script once the save has started. A save buffer must be previously allocated.
base = EF 1F

[Parameter]
name = jumpIfStarted
offs = 2
bits = 8
desc = The script to jump to once the save has started.
type = jump
valn = mmbn-jump



[Command]
name = checkSaveAccess
mask = FF FF 00
desc = Initializes save data access, and jumps to a different script if an error occurred. Otherwise, continues with the current script.
base = EF 20
ends = never

[Parameter]
name = jumpIfError
offs = 2
bits = 8
desc = The script to jump to if there is an error accessing the save data, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkReceiveAllMail
mask = FF FF 00
desc = Makes the player receive all story-related e-mails after the current script finishes. This command does not exist in the Japanese version of the game.
base = EF 21

[Parameter]
name = unused
offs = 2
bits = 8
desc = Unused parameter.



[Command]
name = jump
mask = FF FF 00
desc = Jumps to a different script.
base = F0 00

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jumpStored
mask = FF FF
desc = Jumps to a previously stored script. If the script is 255, execution continues with the current script.
base = F0 01



[Command]
name = jumpBuffered
mask = FF FF 00
desc = Jumps to previously buffered different script. If the script is 255, execution continues with the current script.
base = F0 02

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the target script from.
type = jump
valn = mmbn-jump



[Command]
name = jumpBufferedSkip
mask = FF FF 00
desc = Jumps to previously buffered different script and skips to the end of the text box. If the script is 255, execution continues with the current script.
base = F0 03

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the target script from.
type = jump
valn = mmbn-jump



[Command]
name = jumpSkip
mask = FF FF 00
desc = Jumps to a different script and skips to the end of the text box.
base = F0 04

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = textSpeed
mask = FF FF 00
desc = Changes the speed at which text is printed to the screen.
base = F1 00

[Parameter]
name = delay
offs = 2
bits = 8
desc = The amount of frames to wait after printing a character. The default is 2 frames. If set to 0, will only last until text printing stops.



[Command]
name = clearMsg
mask = FF FF
desc = Clears any currently open message box and resets the text printer position.
base = F2 00



[Command]
name = controlLock
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = F3 00



[Command]
name = controlUnlock
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = F3 01



[Command]
name = itemGive
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded.
base = F4 00

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give, or 255 to load from a previously buffered Mystery Data and buffer a value based on which item that was.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.



[Command]
name = itemTake
mask = FF FF 00 00
desc = Takes from the player's inventory a specified amount of the specified item, but only if the player has enough.
base = F4 01

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.



[Command]
name = itemGiveCard
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and adds to the player's Card Box a specified amount of the specified card with the specified color, or sets it to the maximum if that is exceeded.
base = F4 02

[Parameter]
name = card
offs = 2
bits = 16
desc = The card to give.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the card to give.
valn = mmsf-color

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of cards to give.



[Command]
name = itemTakeCard
mask = FF FF 00 00 00 00
desc = Takes from the player's Card Box a specified amount of the specified card with the specified color, but only if the player has enough.
base = F4 03

[Parameter]
name = card
offs = 2
bits = 16
desc = The card to take.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the card to take.
valn = mmsf-color

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of card to take.



[Command]
name = itemGiveBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a previously buffered item, or sets it to the maximum if that is exceeded.
base = F4 04

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the item and amount from.



[Command]
name = itemTakeBuffered
mask = FF FF 00
desc = Takes from the player's inventory a previously buffered item, but only if the player has enough.
base = F4 05

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the item and amount from.



[Command]
name = itemGiveCardBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's Card Box a previously buffered card, or sets it to the maximum if that is exceeded.
base = F4 06

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the card, color and amount from.



[Command]
name = itemTakeCardBuffered
mask = FF FF 00
desc = Takes from the player's Card Box a previously buffered card, but only if the player has enough.
base = F4 07

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the card, color and amount from.



[Command]
name = itemGiveZennyBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a previously buffered amount of Zenny, or sets it to the maximum if that is exceeded.
base = F4 08

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the amount of Zenny from.



[Command]
name = itemTakeZennyBuffered
mask = FF FF 00
desc = Takes from the player's inventory a previously buffered amount of Zenny, but only if the player has enough.
base = F4 09

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the amount of Zenny from.



[Command]
name = itemBrotherSonia
mask = FF FF FF
desc = Plays the "item get" sound effect, and registers Sonia Strumm in the middle left BrotherBand slot, overwriting any other Brother in that slot.
base = F4 0A 04



[Command]
name = itemBrotherLuna
mask = FF FF FF
desc = Plays the "item get" sound effect, and registers Luna Platz in the top left BrotherBand slot, overwriting any other Brother in that slot.
base = F4 0A 05



[Command]
name = itemBrotherBud
mask = FF FF FF
desc = Plays the "item get" sound effect, and registers Bud Bison in the bottom left BrotherBand slot, overwriting any other Brother in that slot.
base = F4 0A 06



[Command]
name = itemBrotherZack
mask = FF FF FF
desc = Plays the "item get" sound effect, and registers Zack Temple in the middle left BrotherBand slot, overwriting any other Brother in that slot.
base = F4 0A 07



[Command]
name = itemStarForceCard
mask = FF FF 00 00 00 00
desc = Sets the Star Force card in the player's folder to the specified Battle Card.
base = F4 0B

[Parameter]
name = card
offs = 2
bits = 16
desc = The index of the Battle Card. This MUST be a valid Star Force card or the game will freeze!

[Parameter]
name = unused
offs = 4
bits = 16
desc = Unused parameter.



[Command]
name = itemSetZenny
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and sets the amount of Zenny in the player's inventory to the specified amount.
base = F4 0C

[Parameter]
name = amount
offs = 2
bits = 16
desc = The new amount of Zenny.



[Command]
name = itemGiveZenny
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory the specified amount of Zenny, or sets it to the maximum if that is exceeded.
base = F4 0D

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of Zenny.



[Command]
name = itemTakeZenny
mask = FF FF 00 00
desc = Takes from the player's inventory the specified amount of Zenny, but only if the player has enough.
base = F4 0E

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of Zenny.



[Command]
name = itemGiveFolder
mask = FF FF 00
desc = Gives the player the specified folder registers all its cards in the library.
base = F4 0F

[Parameter]
name = folder
offs = 2
bits = 8
desc = The folder to give.



[Command]
name = mugshotShowNPC
mask = FF FF 00
desc = Displays the mugshot of an NPC in the current map in the message box.
base = F5 00
mugs = npc

[Parameter]
name = npc
offs = 2
bits = 8
desc = The NPC to show the mugshot of.



[Command]
name = mugshotHide
mask = FF FF
desc = Hides any mugshot being displayed in the current message box.
base = F5 01
# intentionally empty
mugs = 



[Command]
name = mugshotAnimation
mask = FF FF 00
desc = Changes the animation of the mugshot currently being displayed.
base = F5 02

[Parameter]
name = animation
offs = 2
bits = 8
desc = The mugshot animation to use.



[Command]
name = mugshotAnimationReset
mask = FF FF
desc = Resets the animation of the mugshot currently being displayed.
base = F5 03



[Command]
name = mugshotShow
mask = FF FF 00 00
desc = Displays a mugshot in the current message box.
base = F5 04
mugs = mugshot

[Parameter]
name = mugshot
offs = 2
bits = 16
desc = The mugshot to use.
valn = mmsf1-mugshots



[Command]
name = mugshotShowBrotherBuffered
mask = FF FF 00
desc = Displays a previously buffered Brother's face pic in the current message box.
base = F5 05
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Brother's face pic index.



[Command]
name = mugshotShowBuffered
mask = FF FF 00
desc = Displays a previously buffered mugshot in the current message box.
base = F5 06
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the mugshot's sprite number.



[Command]
name = mugshotShowStaticBuffered
mask = FF FF 00
desc = Displays a previously buffered static, unanimated mugshot in the current message box.
base = F5 07
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the mugshot's sprite number.



#[Command]
#name = mugshot08
#mask = FF FF 00 00
#desc = nop
#base = F5 08

#[Parameter]
#name = unused
#offs = 2
#bits = 16



#[Command]
#name = mugshot09
#mask = FF FF 00
#desc = nop
#base = F5 09

#[Parameter]
#name = unused
#offs = 2
#bits = 8



[Command]
name = mugshot0A
mask = FF FF
desc = TODO (0B disables?)
base = F5 0A



[Command]
name = mugshot0B
mask = FF FF
desc = TODO (0A enables?)
base = F5 0B



#[Command]
#name = mugshot0C
#mask = FF FF
#desc = nop
#base = F5 0C



[Command]
name = mugshotShowLegendForce
mask = FF FF 00
desc = Displays the face pic associated with a Legend Force Battle Card loaded from the specified buffer in the message box.
base = F5 0D
# should change mugshot...

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Battle Card index number of the Legend Force.



[Command]
name = mugshotShowGeo
mask = FF FF
desc = Displays Geo's mugshot in the message box according to his current mood and Visualizer state.
base = F5 0E
# should change mugshot...



[Command]
name = mugshotShowBrotherLegendForce
mask = FF FF 00
desc = Displays the specified Real Brother's Legend Force face pic in the message box. This command only functions properly in battle.
base = F5 0F
mugs = brother

[Parameter]
name = brother
offs = 2
bits = 8
desc = The Real Brother to display the Legend Force face pic of.
valn = mmsf-mugshots-brothers



[Command]
name = mugshotShowBrotherLegendForceBuffered
mask = FF FF 00
desc = Displays a buffered Real Brother's Legend Force face pic in the message box. This command only functions properly in battle.
base = F5 10
# should change mugshot...

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Real Brother to display the Legend Force face pic of.



[Command]
name = positionBox
mask = FF FF 00 00
desc = Changes the position of the message box and printed text. If this command is invoked when the message box is already displayed, the message box background will be removed.
base = F7 00

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the message box and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the message box and the top edge of the screen.



[Command]
name = positionBoxReset
mask = FF FF
desc = Resets the position of the message box and printed text. If this command is invoked when the message box is already displayed, the message box background will be removed.
base = F7 01



[Command]
name = positionArrow
mask = FF FF 00 00
desc = Changes the position of the message box arrow.
base = F7 02

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the arrow and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the arrow and the top edge of the screen.



[Command]
name = positionArrowReset
mask = FF FF
desc = Resets the position of the message box arrow.
base = F7 03



[Command]
name = positionText
mask = FF FF 00 00
desc = Changes the position of the printed text.
base = F7 04

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the text and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the text and the top edge of the screen.



[Command]
name = positionTextReset
mask = FF FF
desc = Resets the position of the printed text.
base = F7 05



[Command]
name = positionOptionFromCenter
mask = FF FF 00
desc = Allocates space for a number of menu options from the center of the text area.
base = F7 06
prnt = true

[Parameter]
name = width
offs = 2
bits = 8
desc = The amount of characters to be centered.



[Command]
name = positionMugshot
mask = FF FF 00 00
desc = Changes the position where a mugshot is drawn. This must be used before drawing the mugshot.
base = F7 07

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the mugshot and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the mugshot and the top edge of the screen.



[Command]
name = positionMugshotReset
mask = FF FF
desc = Resets the position where a mugshot is drawn to its default position. This must be used before drawing the mugshot.
base = F7 08



[Command]
name = playerAnimate0
mask = FF FF 00
desc = Sets the player's current animation.
base = F8 00

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Command]
name = playerAnimate1
mask = FF FF 00
desc = TODO: Check unused
base = F8 01

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



#[Extension]
#name = playerAnimate
#mask = FF FF 00
#base = F8 01



[Command]
name = playerResetScene2
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set.
base = F8 02



[Command]
name = playerResetScene3
mask = FF FF
desc = TODO: Check unused
base = F8 03



#[Extension]
#name = playerResetScene
#mask = FF FF
#base = F8 03



[Command]
name = playerFinish
mask = FF FF
desc = Pauses script execution until the player's current animation finishes. If the player's current animation loops, this command waits forever.
base = F8 04



[Command]
name = storeOWVar
mask = FF FF 00 00
desc = Sets the specified overworld variable to the specified value.
base = F9 00

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value to set the variable to.



[Command]
name = store01
mask = FF FF 00 00 00 00 00
desc = Sets the specified overworld variable to the specified value.
base = F9 01

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable.

[Parameter]
name = value
offs = 3
bits = 32
desc = The value to set the variable to.



[Command]
name = printItem
mask = FF FF 00 00
desc = Prints the name of the specified item.
base = FA 00
prnt = true

[Parameter]
name = item
offs = 2
bits = 16
desc = The item to print.



[Command]
name = printCard
mask = FF FF 00 00
desc = Prints the name of the specified Battle Card.
base = FA 01
prnt = true

[Parameter]
name = card
offs = 2
bits = 16
desc = The Battle Card to print.



[Command]
name = printColor
mask = FF FF 00 00
desc = Prints the name of the specified card color.
base = FA 02
prnt = true

[Parameter]
name = color
offs = 2
bits = 16
desc = The card color to print.
valn = mmsf-color



[Command]
name = printEnemy
mask = FF FF 00 00
desc = Prints the name of the specified enemy.
base = FA 03
prnt = true

[Parameter]
name = enemy
offs = 2
bits = 16
desc = The enemy to print.



[Command]
name = printPlayerName1
mask = FF FF FF
desc = Prints the player's family name (in the Japanese version) or given name (in the international version).
base = FA 04 00
prnt = true



[Command]
name = printPlayerName2
mask = FF FF FF
desc = Prints the player's given name (in the Japanese version) or family name (in the international version).
base = FA 04 01
prnt = true



[Command]
name = printNameBuffer1
mask = FF FF FF
desc = Prints a buffered family name (in the Japanese version) or given name (in the international version).
base = FA 04 02
prnt = true



[Command]
name = printNameBuffer2
mask = FF FF FF
desc = Prints a buffered given name (in the Japanese version) or family name (in the international version).
base = FA 04 03
prnt = true



[Command]
name = printBrotherBuffer1
mask = FF FF FF
desc = Prints a buffered Brother string, such as message, secret, Friend Code, or NPC family name.
base = FA 04 04
prnt = true



[Command]
name = printBrotherBuffer2
mask = FF FF FF
desc = Prints a buffered Brother string, such as message, secret, or NPC given name.
base = FA 04 05
prnt = true



[Command]
name = printBrotherBuffer3
mask = FF FF FF
desc = Prints a buffered Brother string, such as message or secret.
base = FA 04 06
prnt = true



[Command]
name = printMailSubjectBuffer
mask = FF FF FF
desc = Prints a buffered E-Mail subject.
base = FA 04 07
prnt = true



[Command]
name = printBestComboBuffer
mask = FF FF FF
desc = Prints a buffered Best Combo name.
base = FA 04 08
prnt = true



[Command]
name = printBuffer
mask = FF FF 00 00
desc = Prints the contents of the specified buffer as a decimal number. 
base = FA 05
prnt = true

[Parameter]
name = buffer
offs = 3
bits = 8
desc = The buffer to print. Only values up to 3 are accepted.

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. Only values up to 8 are accepted.

[Parameter]
name = padMode
offs = 2.4
bits = 4
desc = How to apply padding. Accepted values are: 0 = no padding, 1 = pad left with spaces, 2 = pad left with zeroes.
valn = mmsf-padmode



[Command]
name = printItemBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered item.
base = FA 06
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the item to print.



[Command]
name = printCardBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered Battle Card.
base = FA 07
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Battle Card to print.



[Command]
name = printColorBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered Battle Card color.
base = FA 08
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Battle Card color to print.



[Command]
name = printBrotherName
mask = FF FF 00 00
desc = Prints one of the player's Brothers' names.
base = FA 09
prnt = true

[Parameter]
name = brother
offs = 2
bits = 8
desc = The Brother to print the name of (0 = the player).

[Parameter]
name = part
offs = 3
bits = 8
desc = The part of the Brother's name to print (first or last name).



[Command]
name = printEnemyBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered enemy.
base = FA 0A
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the enemy to print.



[Command]
name = printBrotherNameBuffered
mask = FF FF 00 00
desc = Prints one of the player's previously buffered Brothers' names.
base = FA 0B
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Brother to print the name of.

[Parameter]
name = part
offs = 3
bits = 8
desc = The part of the Brother's name to print. In-game Brothers follow the Japanese name order in the international versions.



[Command]
name = printLegendForce
mask = FF FF 00 00
desc = Prints the name of the specified Legend Force card.
base = FA 0C
prnt = true

[Parameter]
name = index
offs = 2
bits = 16
desc = The index of the Legend Force to print.



[Command]
name = printLegendForceBuffered
mask = FF FF 00
desc = Prints the name of a buffered Legend Force card.
base = FA 0D
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the index of the Legend Force card to print.



[Command]
name = callEnableVisualizer
mask = FF FF FF 00
desc = Enables use of the Visualizer.
base = FC 00 00



[Command]
name = callTextTransparent
mask = FF FF
desc = Makes the text printing area background transparent. Takes effect from the next character that is printed.
base = FC 01



[Command]
name = callTextOpaque
mask = FF FF
desc = Makes the text printing area background opaque (white). Takes effect from the next character that is printed.
base = FC 02



[Command]
name = callResetFieldObject
mask = FF FF 00
desc = Resets the specified field object.
base = FC 03

[Parameter]
name = object
offs = 2
bits = 8
desc = The index of the field object to reset.



[Command]
name = callStoreJump
mask = FF FF 00
desc = Stores a jump value to be used with the jumpStored command later.
base = FC 04

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callWarp
mask = FF FF 00
desc = Invokes a warp that exists in the current map.
base = FC 05
ends = always

[Parameter]
name = warp
offs = 2
bits = 8
desc = The warp in the current map to invoke.



[Command]
name = callShop
mask = FF FF 00
desc = Opens the shop screen with the specified shop.
base = FC 06
ends = always

[Parameter]
name = shop
offs = 2
bits = 8
desc = The index of the shop to load.



[Command]
name = callGiveLegendForce
mask = FF FF 00 00 00
desc = Tries to add a Legend Force Battle Card to the player's Card Box based on their equipped Personal Best Combo, and jumps to a different script depending on the result.
base = FC 07

[Parameter]
name = jumpIfSuccessful
offs = 2
bits = 8
desc = The script to jump to if the Legend Force was successfully added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNoPBCombo
offs = 3
bits = 8
desc = The script to jump to if the player does not have a Personal Best Combo equipped, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNoRoom
offs = 4
bits = 8
desc = The script to jump to if the player already has 10 Legend Forces, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBeginHelpSignal
mask = FF FF 00
desc = Starts the specified help signal quest if it was not yet completed.
base = FC 08

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the help signal quest to start.



[Command]
name = callFinishHelpSignal
mask = FF FF 00
desc = Finishes the specified help signal quest if the requisites for it have been met.
base = FC 09

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the help signal quest to finish.



[Command]
name = callReceiveMemo
mask = FF FF 00 00 00
desc = Makes the player receive a specific memo e-mail after the current script finishes.
base = FC 0A

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the mail to receive.

[Parameter]
name = markRead
offs = 4
bits = 8
desc = If true, marks the e-mail as read. Otherwise, it is left unread.
valn = bool



[Command]
name = callCardTrader
mask = FF FF 00
desc = Opens the Card Trader screen with the specified parameters after script execution ends.
base = FC 0B

[Parameter]
name = trader
offs = 2
bits = 6
desc = The index of the Card Trader payout list to use.

[Parameter]
name = isCardTrader5
offs = 2.6
bits = 1
desc = If true, the Card Trader takes 5 Battle Cards.
valn = bool

[Parameter]
name = isCardTraderSP
offs = 2.7
bits = 1
desc = If true, the Card Trader takes 10 Battle Cards. This flag takes priority over isCardTrader5.
valn = bool



[Command]
name = callInitSaveSpinner
mask = FF FF 00
desc = Initializes the SAVE spinner that shows when the game is saving.
base = FC 0C

[Parameter]
name = vramSettings
offs = 2
bits = 8
desc = Chooses a set of VRAM settings for loading the SAVE spinner into memory where the game expects it.



[Command]
name = callDestroySaveSpinner
mask = FF FF
desc = Destroys and frees memory for the SAVE spinner that shows when the game is saving.
base = FC 0D



[Command]
name = callTransferNotifcation
mask = FF FF
desc = Triggers a Transfer notification overworld effect.
base = FC 0E



[Command]
name = callReceiveMail
mask = FF FF 00 00 00
desc = Makes the player receive a specific e-mail after the current script finishes.
base = FC 0F

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the mail to receive.

[Parameter]
name = markRead
offs = 4
bits = 8
desc = If true, marks the e-mail as read. Otherwise, it is left unread.
valn = bool



[Command]
name = callSetMarkFlag
mask = FF FF 00
desc = Sets the specified title screen mark flag.
base = FC 10

[Parameter]
name = markFlag
offs = 2
bits = 8
desc = The title screen mark flag to set.



[Command]
name = callAllocSaveBuffer
mask = FF FF
desc = Allocates a save buffer for performing a save.
base = FC 11



[Command]
name = callFreeSaveBuffer
mask = FF FF
desc = Frees a save buffer for performing a save.
base = FC 12



[Command]
name = callSaveFieldObjectStates
mask = FF FF
desc = Copies the states of all active field objects to the save buffer.
base = FC 13



[Command]
name = soundPlay
mask = FF FF 00 00
desc = Plays the specified sound.
base = FD 00

[Parameter]
name = sound
offs = 2
bits = 16
desc = The sound to play.



[Command]
name = soundPlayBGM
mask = FF FF 00 00
desc = Plays the specified background music.
base = FD 01

[Parameter]
name = music
offs = 2
bits = 16
desc = The background music to play.



[Command]
name = soundEnableTextSFX
mask = FF FF
desc = Enables the sound effect that plays when a text character is printed on the screen.
base = FD 02



[Command]
name = soundDisableTextSFX
mask = FF FF
desc = Disables the sound effect that plays when a text character is printed on the screen.
base = FD 03



[Command]
name = soundEnableChoiceSFX
mask = FF FF
desc = Enables the sound effect that plays when an option is selected with the A Button.
base = FD 04



[Command]
name = soundDisableChoiceSFX
mask = FF FF
desc = Disables the sound effect that plays when an option is selected with the A Button.
base = FD 05



[Command]
name = soundStop
mask = FF FF
desc = Stops playback of the current background music.
base = FD 06



[Command]
name = soundFadeInBGM
mask = FF FF 00 00 00 00
desc = Fades in the specified background music over the specified amount of time.
base = FD 07

[Parameter]
name = music
offs = 2
bits = 16
desc = The background music to fade in.

[Parameter]
name = length
offs = 4
bits = 16
desc = The length of the fade-in in frames.



[Command]
name = soundFadeOutBGM
mask = FF FF 00 00
desc = Fades out the current background music over the specified amount of time.
base = FD 08

[Parameter]
name = length
offs = 2
bits = 16
desc = The length of the fade-in in frames.