# [Command]/[Extension]
# name = Name of command (to extend)
# desc = Description of command
# mask = Mask bytes
# base = Base bytes
# ends = default/always/never
# prnt = Whether the command prints text
# mugs = If command sets mugshot: name of mugshot parameter (cannot be data parameter)
#        If command hides mugshot: empty value
#        If command does not affect mugshot: not declared
# dadd = Amount to add to length parameter
#
# [Parameter]/[Data]
# name = Name of (data) parameter (to extend)
# desc = Description of (data) parameter
# offs = Offset in command mask
# bits = Bits length
# type = dec/hex/jump
# valn = Name of value names plugin to use
# extb = Extension base value (only valid for [Extension] parameter)
#
# [Length]
# offs = Offset
# bits = Bits length

[CommandDatabase]
name = mmbn1
cont = 255
splt = keyWait clearMsg delay=0



[Command]
name = end
mask = FF 00 00
desc = After a certain amount of frames, closes any open message box and ends script execution.
base = E7
ends = always

[Parameter]
name = delay
offs = 1
bits = 16
desc = The amount of frames to wait.



#[Command]
#name = newline
#mask = FF
#desc = Continues printing text on the next line.
#base = E8



[Command]
name = clearMsg
mask = FF 00 00
desc = After a certain amount of frames, clears any currently open message box and resets the text printer position.
base = E9

[Parameter]
name = delay
offs = 1
bits = 16
desc = The amount of frames to wait.



[Command]
name = wait
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames.
base = EA 00
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The amount of frames to wait.



[Command]
name = waitSkip
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames, unless the A or B button has been pressed.
base = EA 01
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The maximum amount of frames to wait.



[Command]
name = waitHold
; NOTE: only is 2 bytes long strictly speaking, but the game reserves 4 bytes
mask = FF FF 00 00
desc = Pauses script execution indefinitely.
base = EA FF
ends = always



[Command]
name = keyWait
mask = FF
desc = Pauses script execution until the A or B button is pressed.
base = EB



[Command]
name = textSpeed
mask = FF FF 00
desc = Changes the speed at which text is printed to the screen.
base = EC 00

[Parameter]
name = delay
offs = 2
bits = 8
desc = The amount of frames to wait after printing a character. The default is 2 frames.



[Command]
name = textEnableSkip
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = EC 01



[Command]
name = textDisableSkip
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = EC 02



[Command]
name = mugshotShow
mask = FF FF 00 00
desc = Displays a mugshot in the current message box.
base = ED 00
mugs = mugshot

[Parameter]
name = mugshot
offs = 2
bits = 8
desc = The mugshot to use.
valn = mmbn1-mugshots

[Parameter]
name = palette
offs = 3
bits = 8
desc = The mugshot palette to use.



[Command]
name = mugshotHide
mask = FF FF
desc = Hides any mugshot being displayed in the current message box.
base = ED 01
# Intentionally empty; sets mugshot to disabled
mugs = 



[Command]
name = mugshotPalette
mask = FF FF 00
desc = Changes the palette of the mugshot currently being displayed.
base = ED 02

[Parameter]
name = palette
offs = 2
bits = 8
desc = The mugshot palette to use.



[Command]
name = mugshotAnimate
mask = FF 00
desc = Changes the animation of the mugshot currently being displayed.
base = EE 00
prnt = true

[Parameter]
name = animation
offs = 1
bits = 8
desc = The mugshot animation to use.



[Command]
name = space
mask = FF FF 00
desc = Moves the text position to the right in blocks of eight pixels.
base = EF 00
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to insert.



[Command]
name = spaceLeft
mask = FF FF 00
desc = Moves the text position to the specified position from the left edge of the text, in blocks of eight pixels.
base = EF 01
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to start from the left.



[Command]
name = option
mask = FF 00 00
desc = Creates an array cursor menu option at the current text position.
base = F0
prnt = true

[Parameter]
name = left
offs = 1.4
bits = 4
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 1.0
bits = 4
desc = Which option to go to when Right is pressed.

[Parameter]
name = up
offs = 2.4
bits = 4
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 2.0
bits = 4
desc = Which option to go to when Down is pressed.



[Command]
name = select
mask = FF 00 00
desc = Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = F1
ends = never

[Parameter]
name = default
offs = 2
bits = 6
desc = The option that is selected by default.

[Parameter]
name = disableB
offs = 2.6
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = clear
offs = 2.7
bits = 1
desc = If true, clears the current message box after choosing an option.
valn = bool

[Parameter]
name = targets
offs = 1
bits = 8
addv = -3

[Parameter]
name = targets.jump
rela = $
bits = 8
desc = A script that execution can jump to depending on the chosen option, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = msgOpen
mask = FF FF
desc = Opens the message box and waits until the animation finishes.
base = F2 00



[Command]
name = msgClose
mask = FF FF
desc = Closes the message box and waits until the animation finishes.
base = F2 01



[Command]
name = msgOpenQuick
mask = FF FF
desc = Opens the message box without any animation.
base = F2 02



[Command]
name = msgCloseQuick
mask = FF FF
desc = Closes the message box without any animation.
base = F2 03



[Command]
name = flagSet
mask = FF FF 00 00
desc = Sets the specified flag.
base = F3 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to set.
type = hex



[Command]
name = flagClear
mask = FF FF 00 00
desc = Clears the specified flag.
base = F3 04

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to clear.
type = hex



[Command]
name = flagAddMail
mask = FF FF 00 00
desc = Makes the player receive the e-mail with the specified flag.
base = F3 08

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the e-mail to give.
type = hex



[Command]
name = checkFlag
mask = FF FF 00 00 00 00
desc = Checks the specified flag, and jumps to a different script depending on if it is true or false.
base = F4 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to check.
type = hex

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChapter
mask = FF FF 00 00 00 00
desc = Checks the current story chapter, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F4 04

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the current story chapter falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the current story chapter falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShopStock
mask = FF FF 00 00 00
desc = Checks the stock of the specified shop, and jumps to a different script depending on if the shop is all sold out.
base = F4 08

[Parameter]
name = shop
offs = 2
bits = 8
desc = The shop to check the stock of.

[Parameter]
name = jumpIfStocked
offs = 3
bits = 8
desc = The script to jump to if the shop still has stock, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSoldOut
offs = 4
bits = 8
desc = The script to jump to if the shop is all sold out, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChipCodeFolder
mask = FF FF 00 00 00 00
desc = Checks whether the player's folder contains the specified chip with the specified code, and jumps to a different script depending on if it does or not.
base = F4 0C

[Parameter]
name = chip
offs = 2
bits = 8
desc = The chip to search for.

[Parameter]
name = code
offs = 3
bits = 8
desc = The code of the chip to search for.
valn = mmbn-code

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the folder contains the chip, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the folder does not contain the chip, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLevel
mask = FF FF 00 00 00 00
desc = Checks the player's Level, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F4 10

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the player's Level falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the player's Level falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBustingLevel
mask = FF FF 00 00 00 00
desc = Checks the Busting Level of the player's last battle, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F4 14

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the Busting Level falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the Busting Level falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibrary
mask = FF FF 00 00 00 00
desc = Checks the amount of chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F4 18

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = controlLock
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = F5 00



[Command]
name = controlUnlock
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = F5 01



[Command]
name = jump
mask = FF FF 00
desc = Jumps to a different script.
base = F6 00
# Takes priority over jumpRandom.
plen = 2

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jumpRandom
mask = FF 00
desc = Jumps to a random different script. Each script has an equal chance of being chosen. The amount of possible target scripts MUST be a power of 2!
base = F6 00

[Parameter]
name = targets
offs = 1
bits = 8
addv = 1

[Parameter]
name = targets.jump
desc = A script that execution can randomly jump to.
rela = $
bits = 8
type = jump
valn = mmbn-jump



[Command]
name = checkGiveItem
mask = FF FF 00 00 00 00 00
desc = Attempts to adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded, plays a sound effect, and jumps to a different script depending on how many were added.
base = F7 00

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.

[Parameter]
name = jumpIfAll
offs = 4
bits = 8
desc = The script to jump to if all items could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 5
bits = 8
desc = The script to jump to if no items at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 6
bits = 8
desc = The script to jump to if some, but not all items could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeItem
mask = FF FF 00 00 00 00 00
desc = Attempts to take from the player's inventory a specified amount of the specified item, but only if the player has enough, and jumps to a different script depending on how many the player had.
base = F7 01

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.

[Parameter]
name = jumpIfAll
offs = 4
bits = 8
desc = The script to jump to if there were enough items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 5
bits = 8
desc = The script to jump to if there were no items at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 6
bits = 8
desc = The script to jump to if there were some, but not enough items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setItem
mask = FF FF 00 00
desc = Sets the count of the specified item in the player's inventory to the specified amount, and plays a sound effect.
base = F7 02

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to change the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The new amount of items.



[Command]
name = checkItem
mask = FF FF 00 00 00 00 00
desc = Checks how many of the specified item are in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = F7 04

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to check the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 5
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 6
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGiveChipCode
mask = FF FF 00 00 00 00 00 00
desc = Attempts to adds to the player's Pack a specified amount of the specified chip with the specified code, or sets it to the maximum if that is exceeded, plays a sound effect, and jumps to a different script depending on how many were added.
base = F7 10

[Parameter]
name = chip
offs = 2
bits = 8
desc = The chip to give.

[Parameter]
name = code
offs = 3
bits = 8
desc = The code of the chip to give.
valn = mmbn-code

[Parameter]
name = amount
offs = 4
bits = 8
desc = The amount of chips to give.

[Parameter]
name = jumpIfAll
offs = 5
bits = 8
desc = The script to jump to if all chips could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 6
bits = 8
desc = The script to jump to if no chips at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 7
bits = 8
desc = The script to jump to if some, but not all chips could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeChipCode
mask = FF FF 00 00 00 00 00 00
desc = Attempts to take from the player's Pack a specified amount of the specified chip with the specified code, but only if the player has enough, and jumps to a different script depending on how many the player had.
base = F7 11

[Parameter]
name = chip
offs = 2
bits = 8
desc = The chip to take.

[Parameter]
name = code
offs = 3
bits = 8
desc = The code of the chip to take.
valn = mmbn-code

[Parameter]
name = amount
offs = 4
bits = 8
desc = The amount of chips to take.

[Parameter]
name = jumpIfAll
offs = 5
bits = 8
desc = The script to jump to if there were enough chips, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 6
bits = 8
desc = The script to jump to if there were no chips at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 7
bits = 8
desc = The script to jump to if there were some, but not enough chips, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setChipCode
mask = FF FF 00 00 00
desc = Sets the count of the specified chip with the specified code in the player's Pack to the specified amount, and plays a sound effect.
base = F7 12

[Parameter]
name = chip
offs = 2
bits = 8
desc = The chip to change the amount of.

[Parameter]
name = code
offs = 3
bits = 8
desc = The code of the chip to change the amount of.
valn = mmbn-code

[Parameter]
name = amount
offs = 4
bits = 8
desc = The new amount of chips.



[Command]
name = checkChipCode
mask = FF FF 00 00 00 00 00 00
desc = Checks how many of the specified chip with the specified code are in the player's pack as well as folders, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = F7 14

[Parameter]
name = chip
offs = 2
bits = 8
desc = The chip to check.

[Parameter]
name = code
offs = 3
bits = 8
desc = The code of the chip to check.
valn = mmbn-code

[Parameter]
name = amount
offs = 4
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 5
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 6
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 7
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChipCodePack
mask = FF FF 00 00 00 00 00 00
desc = Checks whether the player's Pack contains the specified chip with the specified code, and jumps to a different script depending on if it does or not.
base = F7 15

[Parameter]
name = chip
offs = 2
bits = 8
desc = The chip to check the amount of.

[Parameter]
name = code
offs = 3
bits = 8
desc = The code of the chip to check the amount of.
valn = mmbn-code

[Parameter]
name = amount
offs = 4
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 5
bits = 8
desc = The script to jump to if the number of chips is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 6
bits = 8
desc = The script to jump to if the number of chips is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 7
bits = 8
desc = The script to jump to if the number of chips is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = passcodeStart
mask = FF FF 00 00
desc = Buffers a specified or random 2-digit passcode, and shows the passcode entry interface.
base = F8 00

[Parameter]
name = pickRandom
offs = 2
bits = 8
desc = If true, chooses a random passcode, otherwise, uses the specified solution.
valn = bool

[Parameter]
name = solution
offs = 3
bits = 8
desc = The solution passcode. Only used if pickRandom is false.



[Command]
name = passcodeSelect
mask = FF FF 00 00 00 00
desc = Lets the player choose a 2-digit password with the D-pad, and jumps to a different script if the entry is confirmed or aborted.
base = F8 04
ends = never

[Parameter]
name = jumpIfConfirmed
offs = 2
bits = 8
desc = The script to jump to if passcode entry is confirmed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfAborted
offs = 3
bits = 8
desc = The script to jump to if passcode entry is aborted, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpUnused1
offs = 4
bits = 8
desc = Unused jump target.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpUnused2
offs = 5
bits = 8
desc = Unused jump target.
type = jump
valn = mmbn-jump



[Command]
name = passcodeCheck
mask = FF FF 00 00 00 00 00 00 00
desc = Checks whether the last passcode entered by the player matches the previously buffered passcode solution, and jumps to a different script depending on which digits are correct or not.
base = F8 08

[Parameter]
name = jumpIfTooLow
offs = 2
bits = 8
desc = The script to jump to if neither digit matches and the passcode is too low, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfTooHigh
offs = 3
bits = 8
desc = The script to jump to if neither digit matches and the passcode is too high, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSecondDigitTooLow
offs = 4
bits = 8
desc = The script to jump to if the first digit matches but the second digit is too low, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFirstDigitTooLow
offs = 5
bits = 8
desc = 	The script to jump to if the second digit matches but the first digit is too low, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSecondDigitTooHigh
offs = 6
bits = 8
desc = The script to jump to if the first digit matches but the second digit is too high, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFirstDigitTooHigh
offs = 7
bits = 8
desc = The script to jump to if the second digit matches but the first digit is too high, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfCorrect
offs = 8
bits = 8
desc = The script to jump to if both digits match, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = passcodeHide
mask = FF FF
desc = Hides the passcode entry interface.
base = F8 0C



[Command]
name = passcodeIncrement
mask = FF FF 00 00 00 00
desc = Increments the passcode try counter. If the try counter is now 6 or more, adjusts one of the digits, and jumps to a different script depending on which digit changed and how. Otherwise, continues with the current script.
base = F8 10

[Parameter]
name = jumpIfFirstDigitRaised
offs = 2
bits = 8
desc = The script to jump to if the first digit was raised, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFirstDigitLowered
offs = 3
bits = 8
desc = The script to jump to if the first digit was lowered, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSecondDigitRaised
offs = 4
bits = 8
desc = The script to jump to if the second digit was raised, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSecondDigitLowered
offs = 5
bits = 8
desc = The script to jump to if the second digit was lowered, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = color
mask = FF 00
desc = Changes the text palette for all characters printed after it.
base = F9 00

[Parameter]
name = palette
offs = 1
bits = 8
desc = The palette to use.



[Command]
name = playerLock
mask = FF FF
desc = Locks the player's movement.
base = FA 00



[Command]
name = playerAnimate
mask = FF FF 00
desc = Sets the player's current animation.
base = FA 04

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Command]
name = playerUnlock
mask = FF FF
desc = Unlocks the player's movement.
base = FA 08



[Command]
name = playerFinish
mask = FF FF
desc = Pauses script execution until the player's current animation finishes or loops.
base = FA 0C



[Command]
name = playerReset
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set.
base = FA 10



[Command]
name = printItem
mask = FF FF 00 0F
desc = Prints the name of an item, either specified or loaded from a buffer.
base = FB 00 00 00
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the item index from, plus one.

[Parameter]
name = item
offs = 2
bits = 8
desc = If the buffer is not set, the item name to print.



[Command]
name = printChip
mask = FF FF 00 0F
desc = Prints the name of a chip, either specified or loaded from a buffer.
base = FB 00 00 01
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the chip index from, plus one.

[Parameter]
name = chip
offs = 2
bits = 8
desc = If the buffer is not set, the chip name to print.



[Command]
name = printCode
mask = FF FF 00 0F
desc = Prints a chip code, either specified or loaded from a buffer.
base = FB 00 00 02
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the chip code index from plus one.

[Parameter]
name = code
offs = 2
bits = 8
desc = If the buffer is not set, the code to print.
valn = mmbn-code



[Command]
name = printItemAmount
mask = FF FF 00 00
desc = Prints the amount of the specified item in the player's inventory, with optional padding.
base = FB 04
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the number with zeros instead of spaces, if necessary; otherwise, pads the number with spaces.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the number; otherwise, places it to the right of the number.
valn = bool

[Parameter]
name = item
offs = 3
bits = 8
desc = The item to print the amount of.



[Command]
name = printChipCodeAmount
mask = FF FF 00 00 00
desc = Prints the amount of the specified chip with the specified code in the player's Folder and Pack, with optional padding.
base = FB 08
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the number with zeros instead of spaces, if necessary; otherwise, pads the number with spaces.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the number; otherwise, places it to the right of the number.
valn = bool

[Parameter]
name = chip
offs = 3
bits = 8
desc = The chip to print the amount of.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to print the amount of.
valn = mmbn-code



[Command]
name = printZenny
mask = FF FF 00 FF
desc = Prints the current amount of Zenny the player has.
base = FB 0C 00 00
# Takes priority over printBuffer.
plen = 4
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the number with zeros instead of spaces, if necessary; otherwise, pads the number with spaces.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the number; otherwise, places it to the right of the number.
valn = bool



[Command]
name = printBuffer
mask = FF FF 00 00
desc = Prints the contents of the specified 32-bit buffer as a decimal number.
base = FB 0C 00 00
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the number with zeros instead of spaces, if necessary; otherwise, pads the number with spaces.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the number; otherwise, places it to the right of the number.
valn = bool

[Parameter]
name = buffer
offs = 3
bits = 8
desc = The buffer to print the contents of.



[Command]
name = soundPlay
mask = FF FF 00 00
desc = Loads the specified sound track into its designated track slot and starts playback.
base = FC 00

[Parameter]
name = track
offs = 2
bits = 16
desc = The sound track to play.



[Command]
name = soundPlayBGM
mask = FF FF 00 00
desc = Loads the specified sound track into its designated track slot, sets the BGM track number to the specified sound track and starts playback.
base = FC 04

[Parameter]
name = track
offs = 2
bits = 16
desc = The sound track to play.



[Command]
name = soundEnableTextSFX
mask = FF FF
desc = Enables the sound effect that plays when a text character is printed on the screen.
base = FC 08



[Command]
name = soundDisableTextSFX
mask = FF FF
desc = Disables the sound effect that plays when a text character is printed on the screen.
base = FC 0C



[Command]
name = soundStop
mask = FF FF
desc = Stops playback of all track groups and clears the BGM track number.
base = FC 10



[Command]
name = soundFadeOut
mask = FF FF 00 00
desc = Fades out the specified track slot over the specified length of time.
base = FC 14

[Parameter]
name = slot
offs = 2
bits = 8
desc = The track slot to fade out.

[Parameter]
name = length
offs = 3
bits = 8
desc = The length of the fade-out.



[Command]
name = soundPlayVoice
mask = FF FF 00 00
desc = Plays a random one of two voice clips starting from the specified voice clip index. Only available in Operate Shooting Star.
base = FC 18

[Parameter]
name = voice
offs = 2
bits = 16
desc = The base index of the voice clip to play.



[Command]
name = startGiveRandomZenny
mask = FF FF 00 00 00 00
desc = Adds to the player's inventory and buffers a randomly selected amount of Zenny, plays a sound effect, and jumps to a different script. Each amount has an equal chance of being chosen. The amount of possible Zenny amounts MUST be a power of 2!
base = FD 00

[Parameter]
name = jump
offs = 3
bits = 8
desc = The script to jump to afterwards, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpUnused1
offs = 4
bits = 8
desc = Unused jump target.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpUnused2
offs = 5
bits = 8
desc = Unused jump target.
type = jump
valn = mmbn-jump

[Parameter]
name = pool
offs = 2
bits = 8
addv = 1

[Parameter]
name = pool.amount
desc = A random amount of Zenny to give.
rela = $
bits = 32



[Command]
name = startGiveRandomChipCode
mask = FF FF 00 00 00 00
desc = Adds to the player's pack and buffers a randomly selected chip with code, plays a sound effect, and jumps to a different script depending on how many were added. Each chip has an equal chance of being chosen. The amount of possible chips MUST be a power of 2!
base = FD 04

[Parameter]
name = jumpIfAll
offs = 3
bits = 8
desc = The script to jump to if the chip could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 4
bits = 8
desc = The script to jump to if the chip could not be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpUnused
offs = 5
bits = 8
desc = Unused jump target.
type = jump
valn = mmbn-jump

[Parameter]
name = pool
offs = 2
bits = 8
addv = 1

[Parameter]
name = pool.chip
desc = A random chip to give.
rela = $
bits = 8

[Parameter]
name = pool.code
desc = The code of the random chip to give.
rela = $
bits = 8
valn = mmbn-code



[Command]
name = startRandomBattle
mask = FF FF
desc = Starts a random battle from the current area.
base = FD 08



[Command]
name = startShop
mask = FF FF 00
desc = Opens the shop screen with the specified shop.
base = FD 0C
ends = always

[Parameter]
name = shop
offs = 2
bits = 8
desc = The index of the shop to load.



[Command]
name = startFixedBattle
mask = FF FF 00 00 00 00 00 00 00
desc = Starts the specified fixed battle with optional specified background, battle mode, preset folder, folder randomization, overworld settings and escapability. Note that several of this command's parameters are bugged.
base = FD 10
ends = always

[Parameter]
name = background
offs = 2
bits = 8
desc = The background to use, or 255 to use the current area's default background.

[Parameter]
name = mode
offs = 3
bits = 8
desc = The battle mode to use.

[Parameter]
name = folderPtr
offs = 4
bits = 8
desc = The pointer of the preset folder to use, or 0 to use the player's custom folder. This parameter is bugged; as it is 8-bit and pointers are 32-bit, this parameter cannot be used.

[Parameter]
name = shuffleFolder
offs = 5
bits = 8
desc = If true, the folder is shuffled prior to the battle; otherwise, chips appear in the same order they were put into the folder. This parameter is bugged; the folder is always shuffled.
valn = bool

[Parameter]
name = saveOWPosition
offs = 6
bits = 1
desc = If true, the player's current position on the map is restored after the battle; otherwise, the player moves back to the starting position of the map.
valn = bool

[Parameter]
name = hideOWObjects
offs = 6.7
bits = 1
desc = If true, all map objects including the player are hidden during the screen transition to the battle; otherwise, they are shown.
valn = bool

[Parameter]
name = noEscape
offs = 7
bits = 8
desc = If true, the player cannot escape from the battle; otherwise, the player can escape.
valn = bool

[Parameter]
name = battle
offs = 8
bits = 8
desc = The fixed battle to start.



[Command]
name = startChipTrader
mask = FF FF 00 00
desc = Checks if the player has at least the specified number of chips, jumping to a different script if they don't, and opens the chip trader screen with the specified number of chips.
base = FD 14
ends = never

[Parameter]
name = amount
offs = 2
bits = 8
desc = The amount of chips the chip trader takes.

[Parameter]
name = jumpIfNotEnoughChips
offs = 3
bits = 8
desc = The script to jump to if the player has less than the specified number of chips, or 255 to continue with the current script. This parameter is bugged; if 255 is set, the script pointer is advanced by an additional 2 + amount * 2 bytes.
type = jump
valn = mmbn-jump



[Command]
name = startVirusMachineBattle
mask = FF FF
desc = Starts a battle from the virus machine.
base = FD 18



[Command]
name = save
mask = FF 00 00
desc = Saves the game, and jumps to a different script depending on whether the save was successful or not.
base = FE
ends = never

[Parameter]
name = jumpIfSuccessful
offs = 1
bits = 8
desc = The script to jump to if the save was successful, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFailed
offs = 2
bits = 8
desc = The script to jump to if the save failed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = return
mask = FF
desc = Returns to a previous script that called this script, for instance with a print command.
base = FF