# [Command]/[Extension]
# name = Name of command (to extend)
# desc = Description of command
# mask = Mask bytes
# base = Base bytes
# ends = default/always/never
# prnt = Whether the command prints text
# mugs = If command sets mugshot: name of mugshot parameter (cannot be data parameter)
#        If command hides mugshot: empty value
#        If command does not affect mugshot: not declared
# dadd = Amount to add to length parameter
#
# [Parameter]/[Data]
# name = Name of (data) parameter (to extend)
# desc = Description of (data) parameter
# offs = Offset in command mask
# bits = Bits length
# type = dec/hex/jump
# valn = Name of value names plugin to use
# extb = Extension base value (only valid for [Extension] parameter)
#
# [Length]
# offs = Offset
# bits = Bits length

[CommandDatabase]
name = mmbn45
cont = 255
splt = keyWait any=0 clearMsg



[Command]
name = end
mask = FF
desc = Closes any open message box and ends script execution.
base = E5
ends = always



[Command]
name = keyWait
mask = FF 00
desc = Pauses script execution until a button is pressed.
base = E6

[Parameter]
name = any
offs = 1
bits = 8
desc = If true, any button can be pressed; otherwise, only A and B will have an effect.
valn = bool



[Command]
name = msgOpen
mask = FF FF
desc = Opens the message box and waits until the animation finishes.
base = E7 00



[Command]
name = msgClose
mask = FF FF
desc = Closes the message box and waits until the animation finishes.
base = E7 01



[Command]
name = msgOpenQuick
mask = FF FF
desc = Opens the message box without any animation.
base = E7 02



[Command]
name = msgCloseQuick
mask = FF FF
desc = Closes the message box without any animation.
base = E7 03



#[Command]
#name = newline
#mask = FF
#desc = Continues printing text on the next line.
#base = E8



[Command]
name = flagSet
mask = FF FF 00 00
desc = Sets the specified flag.
base = E9 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to set.
type = hex



[Command]
name = flagClear
mask = FF FF 00 00
desc = Clears the specified flag.
base = E9 01

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to clear.
type = hex



[Command]
name = flagToggle
mask = FF FF 00 00
desc = Toggles the specified flag.
base = E9 02

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to toggle.
type = hex



[Command]
name = flagMultiSet
mask = FF FF 00 00 00
desc = Sets a series of flags starting at the specified flag.
base = E9 03

[Parameter]
name = flag
offs = 2
bits = 16
desc = The first flag to set.
type = hex

[Parameter]
name = count
offs = 4
bits = 8
desc = The amount of subsequent flags to set.



[Command]
name = flagMultiClear
mask = FF FF 00 00 00
desc = Clears a series of flags starting at the specified flag.
base = E9 04

[Parameter]
name = flag
offs = 2
bits = 16
desc = The first flag to clear.
type = hex

[Parameter]
name = count
offs = 4
bits = 8
desc = The amount of subsequent flags to clear.



[Command]
name = flagSetBuffered
mask = FF FF 00
desc = Set a buffered flag stored in memory.
base = E9 06

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the flag from.



[Command]
name = flagAddMail
mask = FF FF 00 00
desc = Makes the player receive the e-mail with the specified flag.
base = E9 07

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the e-mail to give.
type = hex



[Command]
name = flagSetBBSMessage
mask = FF FF 00 00
desc = Unlocks the BBS message with the specified flag.
base = E9 09

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the BBS message to unlock.
type = hex



[Command]
name = flagSetNavi
mask = FF FF 00 00
desc = Adds the current Navi value to a base flag and sets it.
base = E9 0B

[Parameter]
name = flag
offs = 2
bits = 16
desc = The base flag to set.
type = hex



[Command]
name = flagClearNavi
mask = FF FF 00 00
desc = Adds the current Navi value to a base flag and clears it.
base = E9 0C

[Parameter]
name = flag
offs = 2
bits = 16
desc = The base flag to clear.
type = hex



[Command]
name = flagToggleNavi
mask = FF FF 00 00
desc = Adds the current Navi value to a base flag and toggles it.
base = E9 0D

[Parameter]
name = flag
offs = 2
bits = 16
desc = The base flag to toggle.
type = hex



[Command]
name = flagMultiSetNavi
mask = FF FF 00 00 00
desc = Adds the current Navi value to a base flag and sets a series of flags starting from it.
base = E9 0E

[Parameter]
name = flag
offs = 2
bits = 16
desc = The base flag to set.
type = hex

[Parameter]
name = count
offs = 4
bits = 8
desc = The amount of subsequent flags to set.



[Command]
name = flagMultiClearNavi
mask = FF FF 00 00 00
desc = Adds the current Navi value to a base flag and clears a series of flags starting from it.
base = E9 0F

[Parameter]
name = flag
offs = 2
bits = 16
desc = The base flag to set.
type = hex

[Parameter]
name = count
offs = 4
bits = 8
desc = The amount of subsequent flags to set.



[Command]
name = option
mask = FF 00 00 00
desc = Creates a cursor menu option at the current text position.
base = EA
prnt = true

[Parameter]
name = brackets
offs = 1
bits = 1
desc = If true, uses a brackets cursor instead of the standard arrow cursor.
valn = bool

[Parameter]
name = left
offs = 2.4
bits = 4
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 2.0
bits = 4
desc = Which option to go to when Right is pressed.

[Parameter]
name = up
offs = 3.4
bits = 4
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3.0
bits = 4
desc = Which option to go to when Down is pressed.



[Command]
name = space
mask = FF FF 00
desc = Moves the text position to the right in blocks of space widths.
base = EB 00
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to insert.



[Command]
name = spacePx
mask = FF FF 00
desc = Moves the text position to the right a number of pixels.
base = EB 01
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of pixels to insert.



[Command]
name = select
mask = FF 00 00
desc = Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default.
base = EC

[Parameter]
name = default
offs = 2
bits = 3
desc = The option that is selected by default.

[Parameter]
name = lastCancelSFX
offs = 2.3
bits = 1
desc = If true, the last option defined plays the "cancel" sound effect when chosen; otherwise, the "confirm" sound effect is played.
valn = bool

[Parameter]
name = noDelay
offs = 2.4
bits = 1
desc = If true, the selection marker appears immediately; otherwise, there is a delay before it appears.
valn = bool

[Parameter]
name = BSeparate
offs = 2.5
bits = 1
desc = If true, pressing the B button is treated as a separate option; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.6
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = clear
offs = 2.7
bits = 1
desc = If true, clears the message box after choosing an option.
valn = bool

[Parameter]
name = targets
offs = 1
bits = 8
addv = -3

[Parameter]
name = targets.jump
rela = $
bits = 8
desc = A script that execution can jump to depending on the chosen option, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = wait
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames.
base = ED 00
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The amount of frames to wait.



[Command]
name = waitSkip
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames, unless the A or B button has been pressed.
base = ED 01
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The maximum amount of frames to wait.



[Command]
name = waitFlag
mask = FF FF 00 00
desc = Pauses script execution until the specified flag is set.
base = ED 02
prnt = true

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag that must be set before script execution may continue.
type = hex



[Command]
name = waitOWVar
mask = FF FF 00 00
desc = Pauses script execution until the specified overworld variable equals a specific value.
base = ED 03
prnt = true

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value the variable must be equal to before script execution may continue.



[Command]
name = waitHold
; NOTE: only is 2 bytes long strictly speaking, but the game reserves 4 bytes
mask = FF FF 00 00
desc = Pauses script execution indefinitely.
base = ED FF
ends = always



[Command]
name = checkFlag
mask = FF FF 00 00 00 00
desc = Checks the specified flag, and jumps to a different script depending on if it is true or false.
base = EE 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to check.
type = hex

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChapter
mask = FF FF 00 00 00 00
desc = Checks the current story chapter, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 01

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the current story chapter falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the current story chapter falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSubArea
mask = FF FF 00 00 00 00
desc = Checks the current subarea, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 02

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the subarea falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the subarea falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGlobal
mask = FF FF 00 00 00 00
desc = Checks a global variable in memory, and jumps to a different script depending on if it is equal to the specified value or not.
base = EE 03

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable to load.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the values are equal, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotEqual
offs = 5
bits = 8
desc = The script to jump to if the values are not equal, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkPlaythrough
mask = FF FF 00 00 00 00
desc = Checks the current playthrough count, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 06

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the playthrough count falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the playthrough count falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkItem
mask = FF FF 00 00 00 00 00
desc = Checks how many of the specified item are in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EE 07

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to check the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 4
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 5
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 6
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChipCode
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how many of the specified chip with the specified code are in the player's Pack as well as folders, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EE 08

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to check.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to check.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkPackChipCode
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how many of the specified chip with the specified code are in the player's Pack, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EE 09

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to check.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to check.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the number of chips is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the number of chips is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the number of chips is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGiveItem
mask = FF FF 00 00 00 00 00
desc = Attempts to adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded, plays a sound effect if any were added, and jumps to a different script depending on how many were added.
base = EE 0A

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give, or 255 to give a buffered item.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.

[Parameter]
name = jumpIfAll
offs = 4
bits = 8
desc = The script to jump to if all items could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 5
bits = 8
desc = The script to jump to if no items at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 6
bits = 8
desc = The script to jump to if some, but not all items could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeItem
mask = FF FF 00 00 00 00 00
desc = Attempts to take from the player's inventory a specified amount of the specified item, but only if the player has enough, and jumps to a different script depending on how many the player had.
base = EE 0B

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.

[Parameter]
name = jumpIfAll
offs = 4
bits = 8
desc = The script to jump to if there were enough items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 5
bits = 8
desc = The script to jump to if there were no items at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 6
bits = 8
desc = The script to jump to if there were some, but not enough items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setItem
mask = FF FF 00 00
desc = Sets the count of the specified item in the player's inventory to the specified amount, and plays a sound effect.
base = EE 0C

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to change the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The new amount of items.



[Extension]
name = checkItem
mask = FF FF 00 00 00 00 00
base = EE 0D



[Command]
name = checkGiveZenny
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to adds to the player's inventory and buffers a specified amount of Zenny, or sets it to the maximum if that is exceeded, plays a sound effect if any was added, and jumps to a different script depending on how much was added.
base = EE 0E

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny to give and buffer, or 4294967295 to use a previously buffered amount.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if all Zenny could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if no Zenny at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if some, but not all Zenny could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeZenny
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to take from the player's inventory a specified amount of Zenny, but only if the player has enough, and jumps to a different script depending on how much the player had.
base = EE 0F

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of Zenny to take.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if there was enough Zenny, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if there was no Zenny at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if there was some, but not enough Zenny, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setZenny
mask = FF FF 00 00 00 00
desc = Sets the amount of Zenny in the player's inventory to the specified amount, and plays a sound effect.
base = EE 10

[Parameter]
name = amount
offs = 2
bits = 32
desc = The new amount of Zenny.



[Command]
name = checkZenny
mask = FF FF 00 00 00 00 00 00 00
desc = Checks how much Zenny is in the player's inventory, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount.
base = EE 11

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the amount of Zenny is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the amount of Zenny is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the amount of Zenny is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGiveBugFrags
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to adds to the player's inventory and buffers a specified amount of BugFrags, or sets it to the maximum if that is exceeded, plays a sound effect if any were added, and jumps to a different script depending on how many were added.
base = EE 12

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of BugFrags to give and buffer, or 4294967295 to use a previously buffered amount.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if all BugFrags could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if no BugFrags at all could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if some, but not all BugFrags could be added, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTakeBugFrags
mask = FF FF 00 00 00 00 00 00 00
desc = Attempts to take from the player's inventory and buffers a specified amount of BugFrags, but only if the player has enough, and jumps to a different script depending on how many the player had.
base = EE 13

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount of BugFrags to take and buffer, or -1 to use a previously buffered amount.

[Parameter]
name = jumpIfAll
offs = 6
bits = 8
desc = The script to jump to if there were enough BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 7
bits = 8
desc = The script to jump to if there were no BugFrags at all, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSome
offs = 8
bits = 8
desc = The script to jump to if there were some, but not enough BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setBugFrags
mask = FF FF 00 00 00 00
desc = Sets the amount of BugFrags in the player's inventory to the specified amount, buffers it, and plays a sound effect.
base = EE 14

[Parameter]
name = amount
offs = 2
bits = 32
desc = The new amount of BugFrags to set and buffer, or -1 to use a previously buffered amount.



[Command]
name = checkBugFrags
mask = FF FF 00 00 00 00 00 00 00
desc = Compares and buffers the specified amount to the amount of BugFrags in the player's inventory, and jumps to a different script depending on if it is equal, greater or less.
base = EE 15

[Parameter]
name = amount
offs = 2
bits = 32
desc = The amount to compare to and buffer, or -1 to use a previously buffered amount.

[Parameter]
name = jumpIfEqual
offs = 6
bits = 8
desc = The script to jump to if the amount of BugFrags is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 7
bits = 8
desc = The script to jump to if the amount of BugFrags is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 8
bits = 8
desc = The script to jump to if the amount of BugFrags is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkHaveOneItem
mask = FF FF 00 00 00 00
desc = Checks the player's inventory for the specified range of items, and jumps to a different script depending on if the player has any of them.
base = EE 1A

[Parameter]
name = item
offs = 2
bits = 8
desc = The first item to check for.

[Parameter]
name = count
offs = 3
bits = 8
desc = The amount of subsequent items to check for.

[Parameter]
name = jumpIfOne
offs = 4
bits = 8
desc = The script to jump to if the player has at least one of the specified items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 5
bits = 8
desc = The script to jump to if the player does not have any of the specified items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkHaveTwoItem
mask = FF FF 00 00 00 00
desc = Checks the player's inventory for the specified range of items, and jumps to a different script depending on if the player has at least two of them.
base = EE 20

[Parameter]
name = item
offs = 2
bits = 8
desc = The first item to check for.

[Parameter]
name = count
offs = 3
bits = 8
desc = The amount of subsequent items to check for.

[Parameter]
name = jumpIfTwo
offs = 4
bits = 8
desc = The script to jump to if the player has at least two of the specified items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 5
bits = 8
desc = The script to jump to if the player has less than two of the specified items, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBattleResult
mask = FF FF 00 00 00 00
desc = Jumps to a different script depending on the result of the last battle.
base = EE 21

[Parameter]
name = jumpIfWon
offs = 2
bits = 8
desc = The script to jump to if the player won the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLost
offs = 3
bits = 8
desc = The script to jump to if the player lost the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfTie
offs = 4
bits = 8
desc = The script to jump to if the last battle resulted in a tie, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfEscaped
offs = 5
bits = 8
desc = The script to jump to if the player escaped from the last battle, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShopStock
mask = FF FF 00 00 00
desc = Checks the stock of the specified shop, and jumps to a different script depending on if the shop is all sold out.
base = EE 22

[Parameter]
name = shop
offs = 2
bits = 8
desc = The shop to check the stock of.

[Parameter]
name = jumpIfStocked
offs = 3
bits = 8
desc = The script to jump to if the shop still has stock, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSoldOut
offs = 4
bits = 8
desc = The script to jump to if the shop is all sold out, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryStandard
mask = FF FF 00 00 00 00
desc = Checks the amount of Standard chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 24

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of Standard chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of Standard chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryMega
mask = FF FF 00 00 00 00
desc = Checks the amount of Mega chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 25

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of Mega chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of Mega chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryGiga
mask = FF FF 00 00 00 00
desc = Checks the amount of Giga chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 26

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of Giga chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of Giga chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibraryPA
mask = FF FF 00 00 00 00
desc = Checks the amount of Program Advances in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 27

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of ProgramAdvances in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of ProgramAdvances in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkMultiFlag
mask = FF FF 00 00 00 00 00
desc = Checks a series of flags starting at the specified flag, and jumps to a different script depending on if they are all set.
base = EE 28

[Parameter]
name = flag
offs = 2
bits = 16
desc = The first flag to check.
type = hex

[Parameter]
name = count
offs = 4
bits = 8
desc = The amount of subsequent flags to check.

[Parameter]
name = jumpIfAllSet
offs = 5
bits = 8
desc = The script to jump to if all flags are set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNotAllSet
offs = 6
bits = 8
desc = The script to jump to if not all flags are set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkWaterGodProgram
mask = FF FF 00
desc = Jumps to a script index loaded from the WaterGod Program buffer. As the WaterGod Program is not in this game, the command does not function correctly.
base = EE 29

[Parameter]
name = index
offs = 2
bits = 8
desc = The index of the jump buffer to read from. This should always be zero.



[Command]
name = checkChip
mask = FF FF 00 00 00 00 00 00
desc = Checks how many of the specified chip with any code are in the player's Pack as well as folders, and jumps to a different script depending on if it is equal to, greater than or less than the specified amount. This command has a bug where the first byte after it is skipped/not printed.
base = EE 2A

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to check.

[Parameter]
name = amount
offs = 4
bits = 8
desc = The amount to compare to.

[Parameter]
name = jumpIfEqual
offs = 5
bits = 8
desc = The script to jump to if the number of items is equal to the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGreater
offs = 6
bits = 8
desc = The script to jump to if the number of items is greater than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLess
offs = 7
bits = 8
desc = The script to jump to if the number of items is less than the specified amount, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkKarma
mask = FF FF 00 00
desc = Checks the player's karma, and jumps to a different script depending on if they are Light or Dark.
base = EE 2C

[Parameter]
name = jumpIfLight
offs = 2
bits = 8
desc = The script to jump to if the player's karma is 500 or more, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDark
offs = 3
bits = 8
desc = The script to jump to if the player's karma is less than 500, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkDateYear
mask = FF FF FF 00 00 00 00
desc = Checks the year of the current date, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 00

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the current year falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the current year falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkDateMonth
mask = FF FF FF 00 00 00 00
desc = Checks the month of the current date, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 04

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the current month falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the current month falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkDateDay
mask = FF FF FF 00 00 00 00
desc = Checks the day of the month of the current date, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 08

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the current day of the month falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the current day of the month falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkDateWeekday
mask = FF FF FF 00 00 00 00
desc = Checks the day of the week of the current date, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 0C

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the current day of the week falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the current day of the week falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTimeHour
mask = FF FF FF 00 00 00 00
desc = Checks the hour value of the current time, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 10

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the current hour value falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the current hour value falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTimeMinutes
mask = FF FF FF 00 00 00 00
desc = Checks the minutes value of the current time, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 14

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the current minutes value falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the current minutes value falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNetDateYear
mask = FF FF FF 00 00 00 00
desc = Checks the year of the last date the player was on the Net, or the current date if the player is on the Net, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 18

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the year falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the year falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNetDateMonth
mask = FF FF FF 00 00 00 00
desc = Checks the month of the last date the player was on the Net, or the current date if the player is on the Net, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 1C

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the month falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the month falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNetDateDay
mask = FF FF FF 00 00 00 00
desc = Checks the day of the month of the last date the player was on the Net, or the current date if the player is on the Net, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 20

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the day of the month falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the day of the month falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNetDateWeekday
mask = FF FF FF 00 00 00 00
desc = Checks the day of the week of the last date the player was on the Net, or the current date if the player is on the Net, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 24

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the day of the week falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the day of the week falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNetTimeHour
mask = FF FF FF 00 00 00 00
desc = Checks the hour value of the last time the player was on the Net, or the current time if the player is on the Net, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 28

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the hour value falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the hour value falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNetTimeMinutes
mask = FF FF FF 00 00 00 00
desc = Checks the minutes value of the last time the player was on the Net, or the current time if the player is on the Net, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 2C

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the minutes value falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the minutes value falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkJackInDateYear
mask = FF FF FF 00 00 00 00
desc = Checks the year of the last date the player jacked in, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 30

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the year falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the year falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkJackInDateMonth
mask = FF FF FF 00 00 00 00
desc = Checks the month of the last date the player jacked in, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 34

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the month falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the month falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkJackInDateDay
mask = FF FF FF 00 00 00 00
desc = Checks the day of the month of the last date the player jacked in, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 38

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the day of the month falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the day of the month falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkJackInDateWeekday
mask = FF FF FF 00 00 00 00
desc = Checks the day of the week of the last date the player jacked in, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 3C

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the day of the week falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the day of the week falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkJackInTimeHour
mask = FF FF FF 00 00 00 00
desc = Checks the hour value of the last time the player jacked in, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 40

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the hour value falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the hour value falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkJackInTimeMinutes
mask = FF FF FF 00 00 00 00
desc = Checks the minutes value of the last time the player jacked in, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2D 44

[Parameter]
name = lower
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 4
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 5
bits = 8
desc = The script to jump to if the minutes value falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 6
bits = 8
desc = The script to jump to if the minutes value falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTime
mask = FF FF FF 00 00 00 00 00 00
desc = Checks the current time, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2E 00

[Parameter]
name = lowerHour
offs = 4
bits = 8
desc = The hour value of the lower boundary of the range.

[Parameter]
name = lowerMinutes
offs = 3
bits = 8
desc = The minutes value of the lower boundary of the range.

[Parameter]
name = upperHour
offs = 6
bits = 8
desc = The hour value of the upper boundary of the range.

[Parameter]
name = upperMinutes
offs = 5
bits = 8
desc = The minutes value of the upper boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 7
bits = 8
desc = The script to jump to if the time falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 8
bits = 8
desc = The script to jump to if the time falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNetTime
mask = FF FF FF 00 00 00 00 00 00
desc = Checks the last time the player was on the Net, or the current time if the player is on the Net, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2E 04

[Parameter]
name = lowerHour
offs = 4
bits = 8
desc = The hour value of the lower boundary of the range.

[Parameter]
name = lowerMinutes
offs = 3
bits = 8
desc = The minutes value of the lower boundary of the range.

[Parameter]
name = upperHour
offs = 6
bits = 8
desc = The hour value of the upper boundary of the range.

[Parameter]
name = upperMinutes
offs = 5
bits = 8
desc = The minutes value of the upper boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 7
bits = 8
desc = The script to jump to if the time falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 8
bits = 8
desc = The script to jump to if the time falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkJackInTime
mask = FF FF FF 00 00 00 00 00 00
desc = Checks the last time the player jacked in, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EE 2E 08

[Parameter]
name = lowerHour
offs = 4
bits = 8
desc = The hour value of the lower boundary of the range.

[Parameter]
name = lowerMinutes
offs = 3
bits = 8
desc = The minutes value of the lower boundary of the range.

[Parameter]
name = upperHour
offs = 6
bits = 8
desc = The hour value of the upper boundary of the range.

[Parameter]
name = upperMinutes
offs = 5
bits = 8
desc = The minutes value of the upper boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 7
bits = 8
desc = The script to jump to if the time falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 8
bits = 8
desc = The script to jump to if the time falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkTournament
mask = FF FF 00 00 00 00
desc = Checks the player's tournament registration, and jumps to a different script depending on if they have entered the specified tournament, if they have entered a different tournament or if they have not entered a tournament at all.
base = EE 2F

[Parameter]
name = bitmask
offs = 2
bits = 8
desc = The bit mask of the tournament registration to check.
type = hex

[Parameter]
name = jumpIfNone
offs = 3
bits = 8
desc = The script to jump to if the player has not registered for any tournament, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the player has registered for the specified tournament, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the player has registered for a tournament other than the specified tournament, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNavi
mask = FF FF 00 00 00
desc = Checks the player's current Navi, and jumps to a different script depending on if it is the specified Navi or if it is a different Navi.
base = EE 30

[Parameter]
name = navi
offs = 2
bits = 8
desc = The Navi to check for.

[Parameter]
name = jumpIfTrue
offs = 3
bits = 8
desc = The script to jump to if the player is using the specified Navi, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 4
bits = 8
desc = The script to jump to if the player is using a Navi other than the specified Navi, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = setTournament
mask = FF FF 00
desc = Registers the player for the specified tournament.
base = EE 31

[Parameter]
name = bitmask
offs = 2
bits = 8
desc = The bit mask of the tournament to enter.
type = hex



[Command]
name = checkFlagNavi
mask = FF FF 00 00 00 00
desc = Adds the current Navi value to a base flag and checks it, then jumps to a different script depending on if it is true or false.
base = EE 32

[Parameter]
name = flag
offs = 2
bits = 16
desc = The base flag to check.
type = hex

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the flag is true, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the flag is false, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkHeartDataLocation
mask = FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
desc = Checks the current location of Roll's Heart Data and jumps to a different script depending on in which area it is.
base = EE 33

[Parameter]
name = jumpIfInternet1
offs = 2
bits = 8
desc = The script to jump to if the Heart Data is in Internet1, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet2
offs = 3
bits = 8
desc = The script to jump to if the Heart Data is in Internet2, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet3
offs = 4
bits = 8
desc = The script to jump to if the Heart Data is in Internet3, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet4
offs = 5
bits = 8
desc = The script to jump to if the Heart Data is in Internet4, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet5
offs = 6
bits = 8
desc = The script to jump to if the Heart Data is in Internet5, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet6
offs = 7
bits = 8
desc = The script to jump to if the Heart Data is in Internet6, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet7
offs = 8
bits = 8
desc = The script to jump to if the Heart Data is in Internet7, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet8
offs = 9
bits = 8
desc = The script to jump to if the Heart Data is in Internet8, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet9
offs = 10
bits = 8
desc = The script to jump to if the Heart Data is in Internet9, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet10
offs = 11
bits = 8
desc = The script to jump to if the Heart Data is in Internet10, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet11
offs = 12
bits = 8
desc = The script to jump to if the Heart Data is in Internet11, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet12
offs = 13
bits = 8
desc = The script to jump to if the Heart Data is in Internet12, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUndernet1
offs = 14
bits = 8
desc = The script to jump to if the Heart Data is in Undernet1, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUndernet2
offs = 15
bits = 8
desc = The script to jump to if the Heart Data is in Undernet2, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUndernet3
offs = 16
bits = 8
desc = The script to jump to if the Heart Data is in Undernet3, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUndernet4
offs = 17
bits = 8
desc = The script to jump to if the Heart Data is in Undernet4, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkStarDataLocation
mask = FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
desc = Checks the current location of StarMan's Star Data and jumps to a different script depending on in which area it is.
base = EE 34

[Parameter]
name = jumpIfInternet1
offs = 2
bits = 8
desc = The script to jump to if the Star Data is in Internet1, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet2
offs = 3
bits = 8
desc = The script to jump to if the Star Data is in Internet2, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet3
offs = 4
bits = 8
desc = The script to jump to if the Star Data is in Internet3, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet4
offs = 5
bits = 8
desc = The script to jump to if the Star Data is in Internet4, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet5
offs = 6
bits = 8
desc = The script to jump to if the Star Data is in Internet5, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet6
offs = 7
bits = 8
desc = The script to jump to if the Star Data is in Internet6, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet7
offs = 8
bits = 8
desc = The script to jump to if the Star Data is in Internet7, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet8
offs = 9
bits = 8
desc = The script to jump to if the Star Data is in Internet8, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet9
offs = 10
bits = 8
desc = The script to jump to if the Star Data is in Internet9, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet10
offs = 11
bits = 8
desc = The script to jump to if the Star Data is in Internet10, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet11
offs = 12
bits = 8
desc = The script to jump to if the Star Data is in Internet11, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInternet12
offs = 13
bits = 8
desc = The script to jump to if the Star Data is in Internet12, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUndernet1
offs = 14
bits = 8
desc = The script to jump to if the Star Data is in Undernet1, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUndernet2
offs = 15
bits = 8
desc = The script to jump to if the Star Data is in Undernet2, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUndernet3
offs = 16
bits = 8
desc = The script to jump to if the Star Data is in Undernet3, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUndernet4
offs = 17
bits = 8
desc = The script to jump to if the Star Data is in Undernet4, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkNaviAll
mask = FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
desc = Checks the player's current Navi, and jumps to a different script depending on which it is.
base = EE 35
ends = never

[Parameter]
name = jumpIfMegaMan
offs = 2
bits = 8
desc = The script to jump to if the player's current Navi is MegaMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfRoll
offs = 3
bits = 8
desc = The script to jump to if the player's current Navi is Roll, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfGutsMan
offs = 4
bits = 8
desc = The script to jump to if the player's current Navi is GutsMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfWindMan
offs = 5
bits = 8
desc = The script to jump to if the player's current Navi is WindMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSearchMan
offs = 6
bits = 8
desc = The script to jump to if the player's current Navi is SearchMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFireMan
offs = 7
bits = 8
desc = The script to jump to if the player's current Navi is FireMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfThunderMan
offs = 8
bits = 8
desc = The script to jump to if the player's current Navi is ThunderMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfProtoMan
offs = 9
bits = 8
desc = The script to jump to if the player's current Navi is ProtoMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNumberMan
offs = 10
bits = 8
desc = The script to jump to if the player's current Navi is NumberMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMetalMan
offs = 11
bits = 8
desc = The script to jump to if the player's current Navi is MetalMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfJunkMan
offs = 12
bits = 8
desc = The script to jump to if the player's current Navi is JunkMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfAquaMan
offs = 13
bits = 8
desc = The script to jump to if the player's current Navi is AquaMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfWoodMan
offs = 14
bits = 8
desc = The script to jump to if the player's current Navi is WoodMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUnused1
offs = 15
bits = 8
desc = The script to jump to if the player's current Navi is unused Navi 1, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfUnused2
offs = 16
bits = 8
desc = The script to jump to if the player's current Navi is unused Navi 2, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfStarMan
offs = 17
bits = 8
desc = The script to jump to if the player's current Navi is StarMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfShadowMan
offs = 18
bits = 8
desc = The script to jump to if the player's current Navi is ShadowMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfKnightMan
offs = 19
bits = 8
desc = The script to jump to if the player's current Navi is KnightMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNapalmMan
offs = 20
bits = 8
desc = The script to jump to if the player's current Navi is NapalmMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfIceMan
offs = 21
bits = 8
desc = The script to jump to if the player's current Navi is IceMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfElecMan
offs = 22
bits = 8
desc = The script to jump to if the player's current Navi is ElecMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfPlantMan
offs = 23
bits = 8
desc = The script to jump to if the player's current Navi is PlantMan, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfBass
offs = 24
bits = 8
desc = The script to jump to if the player's current Navi is Bass, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkProtoManMission
mask = FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
desc = Checks ProtoMan's currently active mission, and jumps to a different script depending on which it is, or if there is no active mission.
base = EE 36

[Parameter]
name = jumpIfMission1
offs = 2
bits = 8
desc = The script to jump to if the current mission is mission 1, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission2
offs = 3
bits = 8
desc = The script to jump to if the current mission is mission 2, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission3
offs = 4
bits = 8
desc = The script to jump to if the current mission is mission 3, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission4
offs = 5
bits = 8
desc = The script to jump to if the current mission is mission 4, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission5
offs = 6
bits = 8
desc = The script to jump to if the current mission is mission 5, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission6
offs = 7
bits = 8
desc = The script to jump to if the current mission is mission 6, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission7
offs = 8
bits = 8
desc = The script to jump to if the current mission is mission 7, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission8
offs = 9
bits = 8
desc = The script to jump to if the current mission is mission 8, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission9
offs = 10
bits = 8
desc = The script to jump to if the current mission is mission 9, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission10
offs = 11
bits = 8
desc = The script to jump to if the current mission is mission 10, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission11
offs = 12
bits = 8
desc = The script to jump to if the current mission is mission 11, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission12
offs = 13
bits = 8
desc = The script to jump to if the current mission is mission 12, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission13
offs = 14
bits = 8
desc = The script to jump to if the current mission is mission 13, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission14
offs = 15
bits = 8
desc = The script to jump to if the current mission is mission 14, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission15
offs = 16
bits = 8
desc = The script to jump to if the current mission is mission 15, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission16
offs = 17
bits = 8
desc = The script to jump to if the current mission is mission 16, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission17
offs = 18
bits = 8
desc = The script to jump to if the current mission is mission 17, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission18
offs = 19
bits = 8
desc = The script to jump to if the current mission is mission 18, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission19
offs = 20
bits = 8
desc = The script to jump to if the current mission is mission 19, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission20
offs = 21
bits = 8
desc = The script to jump to if the current mission is mission 20, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission21
offs = 22
bits = 8
desc = The script to jump to if the current mission is mission 21, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission22
offs = 23
bits = 8
desc = The script to jump to if the current mission is mission 22, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission23
offs = 24
bits = 8
desc = The script to jump to if the current mission is mission 23, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission24
offs = 25
bits = 8
desc = The script to jump to if the current mission is mission 24, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission25
offs = 26
bits = 8
desc = The script to jump to if the current mission is mission 25, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission26
offs = 27
bits = 8
desc = The script to jump to if the current mission is mission 26, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission27
offs = 28
bits = 8
desc = The script to jump to if the current mission is mission 27, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission28
offs = 29
bits = 8
desc = The script to jump to if the current mission is mission 28, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission29
offs = 30
bits = 8
desc = The script to jump to if the current mission is mission 29, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission30
offs = 31
bits = 8
desc = The script to jump to if the current mission is mission 30, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission31
offs = 32
bits = 8
desc = The script to jump to if the current mission is mission 31, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission32
offs = 33
bits = 8
desc = The script to jump to if the current mission is mission 32, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 34
bits = 8
desc = The script to jump to if there is no currently active mission, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShadowManMission
mask = FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
desc = Checks ShadowMan's currently active hit request, and jumps to a different script depending on which it is, or if there is no active hit request.
base = EE 37

[Parameter]
name = jumpIfMission1
offs = 2
bits = 8
desc = The script to jump to if the current hit request is request 1, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission2
offs = 3
bits = 8
desc = The script to jump to if the current hit request is request 2, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission3
offs = 4
bits = 8
desc = The script to jump to if the current hit request is request 3, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission4
offs = 5
bits = 8
desc = The script to jump to if the current hit request is request 4, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission5
offs = 6
bits = 8
desc = The script to jump to if the current hit request is request 5, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission6
offs = 7
bits = 8
desc = The script to jump to if the current hit request is request 6, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission7
offs = 8
bits = 8
desc = The script to jump to if the current hit request is request 7, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission8
offs = 9
bits = 8
desc = The script to jump to if the current hit request is request 8, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission9
offs = 10
bits = 8
desc = The script to jump to if the current hit request is request 9, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission10
offs = 11
bits = 8
desc = The script to jump to if the current hit request is request 10, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission11
offs = 12
bits = 8
desc = The script to jump to if the current hit request is request 11, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission12
offs = 13
bits = 8
desc = The script to jump to if the current hit request is request 12, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission13
offs = 14
bits = 8
desc = The script to jump to if the current hit request is request 13, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission14
offs = 15
bits = 8
desc = The script to jump to if the current hit request is request 14, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission15
offs = 16
bits = 8
desc = The script to jump to if the current hit request is request 15, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission16
offs = 17
bits = 8
desc = The script to jump to if the current hit request is request 16, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission17
offs = 18
bits = 8
desc = The script to jump to if the current hit request is request 17, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission18
offs = 19
bits = 8
desc = The script to jump to if the current hit request is request 18, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission19
offs = 20
bits = 8
desc = The script to jump to if the current hit request is request 19, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission20
offs = 21
bits = 8
desc = The script to jump to if the current hit request is request 20, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission21
offs = 22
bits = 8
desc = The script to jump to if the current hit request is request 21, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission22
offs = 23
bits = 8
desc = The script to jump to if the current hit request is request 22, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission23
offs = 24
bits = 8
desc = The script to jump to if the current hit request is request 23, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission24
offs = 25
bits = 8
desc = The script to jump to if the current hit request is request 24, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission25
offs = 26
bits = 8
desc = The script to jump to if the current hit request is request 25, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission26
offs = 27
bits = 8
desc = The script to jump to if the current hit request is request 26, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission27
offs = 28
bits = 8
desc = The script to jump to if the current hit request is request 27, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission28
offs = 29
bits = 8
desc = The script to jump to if the current hit request is request 28, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission29
offs = 30
bits = 8
desc = The script to jump to if the current hit request is request 29, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission30
offs = 31
bits = 8
desc = The script to jump to if the current hit request is request 30, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission31
offs = 32
bits = 8
desc = The script to jump to if the current hit request is request 31, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMission32
offs = 33
bits = 8
desc = The script to jump to if the current hit request is request 32, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 34
bits = 8
desc = The script to jump to if there is no currently active hit request, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkProtoManMissionReward
mask = FF FF 00 00 00
desc = Determines the reward of ProtoMan's currently active mission, buffers the amount, and jumps to a different script depending on what kind of reward it is.
base = EE 38

[Parameter]
name = jumpIfHPMemory
offs = 2
bits = 8
desc = The script to jump to if the reward is an HP Memory, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfZenny
offs = 3
bits = 8
desc = The script to jump to if the reward is Zenny, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfBugFrags
offs = 4
bits = 8
desc = The script to jump to if the reward is BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShadowManMissionReward
mask = FF FF 00 00 00
desc = Determines the reward of ShadowMan's currently active hit request, buffers the amount, and jumps to a different script depending on what kind of reward it is.
base = EE 39

[Parameter]
name = jumpIfHPMemory
offs = 2
bits = 8
desc = The script to jump to if the reward is an HP Memory, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfZenny
offs = 3
bits = 8
desc = The script to jump to if the reward is Zenny, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfBugFrags
offs = 4
bits = 8
desc = The script to jump to if the reward is BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkProtoManMissionTime
mask = FF FF 00 00
desc = Checks how much time is left for ProtoMan's currently active mission, and jumps to a different script depending on if less than 180 seconds are left.
base = EE 3A

[Parameter]
name = jumpIfMuchTime
offs = 2
bits = 8
desc = The script to jump to if the player has 180 seconds or more left, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLittleTime
offs = 3
bits = 8
desc = The script to jump to if the player has less than 180 seconds left, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShadowManMissionTime
mask = FF FF 00 00
desc = Checks how much time is left for ShadowMan's currently active hit request, and jumps to a different script depending on if less than 180 seconds are left.
base = EE 3B

[Parameter]
name = jumpIfMuchTime
offs = 2
bits = 8
desc = The script to jump to if the player has 180 seconds or more left, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLittleTime
offs = 3
bits = 8
desc = The script to jump to if the player has less than 180 seconds left, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jump
mask = FF FF 00
desc = Jumps to a different script.
base = EF 00
# Takes priority over jumpRandom.
plen = 2

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jumpRandom
mask = FF 00
desc = Jumps to a random different script.
base = EF 00

[Parameter]
name = unused
offs = 1.6
bits = 1
desc = An unused parameter with unknown intended purpose.
valn = bool

[Parameter]
name = untrap
offs = 1.7
bits = 1
desc = If set to true, the first jump target will be ignored if Untrap is active.
valn = bool

[Parameter]
name = targets
offs = 1
bits = 6
addv = 1
dgrp = 1,1

[Parameter]
name = targets.ratio
desc = The ratio for this entry to be picked randomly.
rela = $
bits = 8

[Parameter]
name = targets.jump
desc = A script that execution can randomly jump to.
rela = $
bits = 8
type = jump
valn = mmbn-jump



[Command]
name = textSpeed
mask = FF FF 00
desc = Changes the speed at which text is printed to the screen.
base = F0 00

[Parameter]
name = delay
offs = 2
bits = 8
desc = The amount of frames to wait after printing a character. The default is 2 frames.



[Command]
name = clearMsg
mask = FF
desc = Clears any currently open message box and resets the text printer position.
base = F1



[Command]
name = controlLock
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = F2 00



[Command]
name = controlUnlock
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = F2 01



[Command]
name = controlSet
mask = FF FF 00
desc = Sets the specified overworld control bits.
base = F2 02

[Parameter]
name = bitmask
offs = 2
bits = 8
desc = The overworld control bits to set.



[Command]
name = itemGive
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded.
base = F3 00

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give, or 255 to load from a previously buffered Mystery Data and buffer a value based on which item that was.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.



[Command]
name = itemTake
mask = FF FF 00 00
desc = Takes from the player's inventory a specified amount of the specified item, but only if the player has enough.
base = F3 01

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.



[Command]
name = itemSet
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and sets the count of the specified item in the player's inventory to the specified amount.
base = F3 02

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to change the amount of.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The new amount of items.



[Command]
name = itemGiveChip
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and adds to the player's Pack a specified amount of the specified chip with the specified code, or sets it to the maximum if that is exceeded.
base = F3 10

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to give, or 65535 to load from a previously buffered Mystery Data.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to give, or 255 to load from a previously buffered Mystery Data.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of chips to give.



[Command]
name = itemTakeChip
mask = FF FF 00 00 00 00
desc = Takes from the player's inventory a specified amount of the specified chip with the specified code, but only if the player has enough.
base = F3 11

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to take.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to take.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of chips to take.



[Command]
name = itemSetChip
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and sets the count of the specified chip with the specified code in the player's Pack to the specified amount.
base = F3 12

[Parameter]
name = chip
offs = 2
bits = 16
desc = The chip to change the amount of.

[Parameter]
name = code
offs = 4
bits = 8
desc = The code of the chip to change the amount of.
valn = mmbn-code

[Parameter]
name = amount
offs = 5
bits = 8
desc = The new amount of chips.



[Command]
name = itemGiveAllChips
mask = FF FF
desc = Plays the "item get" sound effect, and adds to the player's Pack 3 of every chip in the Library.
base = F3 15



[Command]
name = mugshotShow
mask = FF FF 00
desc = Displays a mugshot in the current message box.
base = F4 00
mugs = mugshot

[Parameter]
name = mugshot
offs = 2
bits = 8
desc = The mugshot to use.
valn = exe45-mugshots



[Command]
name = mugshotHide
mask = FF FF
desc = Hides any mugshot being displayed in the current message box.
base = F4 01
# intentionally empty
mugs = 



[Command]
name = mugshotPalette
mask = FF FF 00
desc = Changes the palette of the mugshot currently being displayed.
base = F4 02

[Parameter]
name = palette
offs = 2
bits = 8
desc = The mugshot palette to use.



[Command]
name = mugshotAnimation
mask = FF FF 00
desc = Changes the animation of the mugshot currently being displayed.
base = F4 03

[Parameter]
name = animation
offs = 2
bits = 8
desc = The mugshot animation to use.



[Command]
name = mugshotOAMPalette
mask = FF FF 00
desc = Changes which OAM palette will be used to store the next mugshot's palette.
base = F4 04

[Parameter]
name = palette
offs = 2
bits = 8
desc = The OAM palette to use.



[Command]
name = color
mask = FF FF 00
desc = Changes the palette of the message box text and arrow.
base = F5 00

[Parameter]
name = palette
offs = 2
bits = 8
desc = The palette to use.



[Command]
name = colorBuffered
mask = FF FF 00
desc = Changes the palette of the message box text and arrow to a previously buffered palette.
base = F5 01

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The palette buffer to load from.



[Command]
name = colorText
mask = FF FF 00
desc = Changes which colors in the palette the message box text will use.
base = F5 02

[Parameter]
name = block
offs = 2
bits = 8
desc = The 4-color block in the palette to use.



[Command]
name = positionBox
mask = FF FF 00 00 00
desc = Changes the position and type of the message box background, whether it is currently being displayed or not.
base = F6 00

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the message box and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the message box and the top edge of the screen.

[Parameter]
name = type
offs = 4
bits = 8
desc = The type of message box to use.



[Command]
name = positionText
mask = FF FF 00 00 00
desc = Changes the position of the text, as well as the relative distance of the message box arrow, whether it is currently being displayed or not.
base = F6 02

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the text and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the text and the top edge of the screen.

[Parameter]
name = arrowDistance
offs = 4
bits = 8
desc = The vertical distance, in increments of 12 pixels, between the top edge of the text and the top edge of the message box arrow.



[Command]
name = positionArrow
mask = FF FF 00 00
desc = Changes the position of the message box arrow, whether it is currently being displayed or not.
base = F6 04

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the arrow and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the arrow and the top edge of the screen.



[Command]
name = positionMugshot
mask = FF FF 00 00
desc = Changes the position of the mugshot, unless it is currently being displayed.
base = F6 05

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the center of the mugshot and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the center of the mugshot and the top edge of the screen.



[Command]
name = positionTextCenter
mask = FF FF 00 00
desc = Centers the text in the screen given the specified width and height, and places the message box arrow in the bottom right corner of the text.
base = F6 06

[Parameter]
name = width
offs = 2
bits = 8
desc = The horizontal distance, in increments of a single character width, between the left edge of the text and the right edge of the text.

[Parameter]
name = height
offs = 3
bits = 8
desc = The vertical distance, in increments of 14 pixels, between the top edge of the text and the bottom edge of the text.



[Command]
name = positionOptionHorizontal
mask = FF FF 00
desc = Allocates space for a number of horizontally oriented menu options from the right side of the text area, taking into account the current state of the message box.
base = F6 07
prnt = true

[Parameter]
name = width
offs = 2
bits = 8
desc = The horizontal distance, in increments of a single character width, between the right edge of the text area and the left edge of the menu option.



[Command]
name = positionOptionVertical
mask = FF FF 00
desc = Allocates space for a menu option in a vertically oriented menu from the right side of the text area, taking into account the current state of the message box.
base = F6 08
prnt = true

[Parameter]
name = width
offs = 2
bits = 8
desc = The horizontal distance, in increments of a single character width, between the right edge of the text area and the left edge of the menu option.



[Command]
name = positionOptionFromCenter
mask = FF FF 00
desc = Allocates space for a number of menu options from the center of the text area.
base = F6 09
prnt = true

[Parameter]
name = width
offs = 2
bits = 8
desc = The horizontal distance, in increments of a single character width, between the center of the text area and the left edge of the menu option.



[Command]
name = playerLock
mask = FF FF
desc = Locks the player's movement.
base = F7 00



[Command]
name = playerAnimateScene
mask = FF FF 00
desc = Sets the player's current animation. Does not work if the player is interacting with an object.
base = F7 01

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Command]
name = playerUnlock
mask = FF FF
desc = Unlocks the player's movement.
base = F7 02



[Command]
name = playerFinish
mask = FF FF
desc = Pauses script execution until the player's current animation finishes or loops.
base = F7 03



[Command]
name = playerResetScene
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set. Does not work if the player is interacting with an object.
base = F7 04



[Command]
name = playerAnimateObject
mask = FF FF 00
desc = Sets the player's current animation. Only works if the player is interacting with an object.
base = F7 05

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Command]
name = playerResetObject
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set. Only works if the player is interacting with an object.
base = F7 06



[Command]
name = storeTimer
mask = FF FF 00 00
desc = Writes the specified value into the specified timer.
base = F8 00

[Parameter]
name = timer
offs = 2
bits = 8
desc = The timer to change the value of.

[Parameter]
name = value
offs = 3
bits = 8
desc = The new value for the timer.



[Command]
name = storeGlobal8
mask = FF FF 00 00
desc = Writes the specified 8-bit value into the specified global variable.
base = F8 01

[Parameter]
name = global
offs = 2
bits = 8
desc = The global variable to change the value of.

[Parameter]
name = value
offs = 3
bits = 8
desc = The new value for the global variable.



[Command]
name = storeGlobal16
mask = FF FF 00 00 00
desc = Writes the specified 16-bit value into the specified global variable.
base = F8 02

[Parameter]
name = global
offs = 2
bits = 8
desc = The global variable to change the value of.

[Parameter]
name = value
offs = 3
bits = 16
desc = The new value for the global variable.



[Command]
name = storeGlobal32
mask = FF FF 00 00 00 00 00
desc = Writes the specified 32-bit value into the specified global variable.
base = F8 03

[Parameter]
name = global
offs = 2
bits = 8
desc = The global variable to change the value of.

[Parameter]
name = value
offs = 3
bits = 32
desc = The new value for the global variable.



[Command]
name = printItem
mask = FF FF 00 0F
desc = Prints the name of an item, either specified or loaded from a buffer.
base = F9 00 00 00
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the item index from, plus one.

[Parameter]
name = item
offs = 2
bits = 8
desc = The buffer to load the item from, plus one. If zero, uses the specified item instead.



[Command]
name = printChip
mask = FF FF 00 0F
desc = Prints the name of a chip, either specified or loaded from a buffer.
base = F9 00 00 01
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the chip index from, plus one.

[Parameter]
name = chip
offs = 2
bits = 8
desc = If the buffer is not set, the chip name to print.



[Extension]
name = printChip
mask = FF FF 00 0F
base = F9 00 00 02
prnt = true

[Parameter]
name = chip
extb = 256



[Command]
name = printCode
mask = FF FF 00 0F
desc = Prints a chip code, either specified or loaded from a buffer.
base = F9 00 00 03
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the chip code index from plus one.

[Parameter]
name = code
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the chip code to print.
valn = mmbn-code



[Command]
name = printFolderName
mask = FF FF 00 0F
desc = Prints the name of a folder, either specified or loaded from a buffer.
base = F9 00 00 04
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the folder name index from plus one.

[Parameter]
name = entry
offs = 2
bits = 4
desc = If the buffer is not set, the entry index of the folder name to print.



[Command]
name = printNaviCustProgram
mask = FF FF 00 0F
desc = Prints the name of a NaviCust program, either specified or loaded from a buffer.
base = F9 00 00 05
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the folder name index from plus one.

[Parameter]
name = program
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the NaviCust program name to print.



[Extension]
name = printNaviCustProgram
mask = FF FF 00 0F
base = F9 00 00 06



[Command]
name = printEnemy
mask = FF FF 00 0F
desc = Prints the name of an enemy, either specified or loaded from a buffer.
base = F9 00 00 07
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the enemy name index from plus one.

[Parameter]
name = enemy
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the enemy name to print.



[Command]
name = printTournament
mask = FF FF 00 0F
desc = Prints a tournament name, either specified or loaded from a buffer.
base = F9 00 00 08
prnt = true

[Parameter]
name = buffer
offs = 3.4
bits = 4
desc = If greater than zero, the buffer to load the tournament name index from plus one.

[Parameter]
name = entry
offs = 2
bits = 8
desc = If the buffer is not set, the entry index of the tournament name to print.



[Command]
name = printZenny
mask = FF FF 00 FF
desc = Prints the current amount of Zenny the player has.
base = F9 03 00 00
# Takes priority over printBuffer.
plen = 4
prnt = true

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the amount of Zenny consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the amount of Zenny with zeros instead of spaces, if necessary.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the amount of Zenny instead of to the right.
valn = bool



[Extension]
name = printZenny
mask = FF FF 00 FF
base = F9 04 00 00



[Command]
name = printBuffer
mask = FF FF 00 00
desc = Prints the contents of the specified 32-bit buffer as a decimal number.
base = F9 03
prnt = true

[Parameter]
name = buffer
offs = 3
bits = 8
desc = The buffer to print.

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. If the number consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 2.6
bits = 1
desc = If true, pads the amount of Zenny with zeros instead of spaces, if necessary.
valn = bool

[Parameter]
name = padLeft
offs = 2.7
bits = 1
desc = If true, places the padding, if any, to the left of the amount of Zenny instead of to the right.
valn = bool



[Extension]
name = printBuffer
mask = FF FF 00 00
base = F9 04



[Command]
name = printCurrentNavi
mask = FF FF FF
desc = Prints the name of the current Navi.
base = F9 06 00
plen = 3
prnt = true



[Command]
name = printBufferedNavi
mask = FF FF 00
desc = Prints the name of a Navi, either the current one or loaded from a buffer.
base = F9 06
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = If greater than zero, the buffer to load the Navi index from plus one.



[Command]
name = printBufferedShortString
mask = FF FF 00
desc = Prints a script of at most 3 bytes from a buffered pointer.
base = F9 0A
prnt = true

[Parameter]
name = bufferOffset
offs = 2
bits = 8
desc = The offset in the buffer to load the script pointer from.



[Command]
name = printShortString
mask = FF FF 00
desc = Prints a script of at most 3 bytes from the buffer.
base = F9 0B
prnt = true

[Parameter]
name = bufferOffset
offs = 2
bits = 8
desc = The offset in the buffer from which to start printing.



[Command]
name = printTextInput
mask = FF FF FF
desc = Prints the input text that has currently been entered.
base = F9 0C 00
plen = 3
prnt = true



[Command]
name = printPlayerNickname
mask = FF FF FF
desc = Prints the name of the player, followed by the appropriate honorific suffix.
base = F9 0C 01
plen = 3
prnt = true



[Command]
name = printSchool
mask = FF FF FF
desc = Prints the player's entered school name.
base = F9 0C 02
plen = 3
prnt = true



[Command]
name = printOlderBro
mask = FF FF FF
desc = Prints the buffered name of one of the player's entered older brothers.
base = F9 0C 03
plen = 3
prnt = true



[Command]
name = printYoungerBro
mask = FF FF FF
desc = Prints the buffered name of one of the player's entered younger brothers.
base = F9 0C 04
plen = 3
prnt = true



[Command]
name = printOlderSis
mask = FF FF FF
desc = Prints the buffered name of one of the player's entered older sisters.
base = F9 0C 05
plen = 3
prnt = true



[Command]
name = printYoungerSis
mask = FF FF FF
desc = Prints the buffered name of one of the player's entered younger sisters.
base = F9 0C 06
plen = 3
prnt = true



[Command]
name = printFriend
mask = FF FF FF
desc = Prints the buffered name of one of the player's entered friends.
base = F9 0C 07
plen = 3
prnt = true



[Command]
name = printFavFood
mask = FF FF FF
desc = Prints the player's entered favorite food.
base = F9 0C 08
plen = 3
prnt = true



[Command]
name = printHobby
mask = FF FF FF
desc = Prints the buffered player's entered hobby.
base = F9 0C 09
plen = 3
prnt = true



[Command]
name = printDream
mask = FF FF FF
desc = Prints the player's entered dream.
base = F9 0C 0A
plen = 3
prnt = true



[Command]
name = printCrush
mask = FF FF FF
desc = Prints the player's entered crush.
base = F9 0C 0B
plen = 3
prnt = true



[Command]
name = printIdol
mask = FF FF FF
desc = Prints the player's entered idol.
base = F9 0C 0C
plen = 3
prnt = true



[Command]
name = printPlayerEnemy
mask = FF FF FF
desc = Prints the player's entered enemy.
base = F9 0C 0D
plen = 3
prnt = true



[Command]
name = printFavShow
mask = FF FF FF
desc = Prints the buffered player's entered favorite TV show.
base = F9 0C 0E
plen = 3
prnt = true



[Command]
name = printBestSubject
mask = FF FF FF
desc = Prints the player's entered best subject.
base = F9 0C 0F
plen = 3
prnt = true



[Command]
name = printWorstSubject
mask = FF FF FF
desc = Prints the player's entered worst subject.
base = F9 0C 10
plen = 3
prnt = true



[Command]
name = printWish
mask = FF FF FF
desc = Prints the buffered player's entered wish.
base = F9 0C 11
plen = 3
prnt = true



[Command]
name = printMostFrequentOpponent
mask = FF FF FF
desc = Prints the name of the player's most frequent multiplayer opponent.
base = F9 0C 12
plen = 3
prnt = true



[Command]
name = printLostToOpponent
mask = FF FF FF
desc = Prints the buffered name of one of the multiplayer opponents the player frequently lost to.
base = F9 0C 13
plen = 3
prnt = true



[Command]
name = printMostLostToOpponentsChip
mask = FF FF FF
desc = Prints the name of the chip that was most frequently used by the multiplayer opponent the player most frequently lost to, during the last battle.
base = F9 0C 14
plen = 3
prnt = true



[Command]
name = printDefeatedOpponent
mask = FF FF FF
desc = Prints the buffered name of one of the multiplayer opponents the player frequently defeated.
base = F9 0C 15
plen = 3
prnt = true



[Command]
name = printMostDefeatedOpponentsChip
mask = FF FF FF
desc = Prints the name of the chip that was most frequently used by the multiplayer opponent the player most frequently defeated, during the last battle.
base = F9 0C 16
plen = 3
prnt = true



[Command]
name = printFavStandardChip1
mask = FF FF FF
desc = Prints the name of the player's most frequently used Standard chip.
base = F9 0C 17
plen = 3
prnt = true



[Command]
name = printFavStandardChip2
mask = FF FF FF
desc = Prints the name of the player's second most frequently used Standard chip.
base = F9 0C 18
plen = 3
prnt = true



[Command]
name = printFavStandardChip3
mask = FF FF FF
desc = Prints the name of the player's third most frequently used Standard chip.
base = F9 0C 19
plen = 3
prnt = true



[Command]
name = printFavMegaChip
mask = FF FF FF
desc = Prints the name of the player's most frequently used Mega chip.
base = F9 0C 1A
plen = 3
prnt = true



[Command]
name = printFavGigaChip
mask = FF FF FF
desc = Prints the name of the player's most frequently used Giga chip.
base = F9 0C 1B
plen = 3
prnt = true



[Command]
name = printStringBuffer1
mask = FF FF FF
desc = Prints the contents of string buffer 1.
base = F9 0C 1C
plen = 3
prnt = true



[Command]
name = printStringBuffer2
mask = FF FF FF
desc = Prints the contents of string buffer 2.
base = F9 0C 1D
plen = 3
prnt = true



[Command]
name = printStringBuffer3
mask = FF FF FF
desc = Prints the contents of string buffer 3.
base = F9 0C 1E
plen = 3
prnt = true



[Command]
name = printPlayerName
mask = FF FF FF
desc = Prints the name of the player.
base = F9 0C 1F
plen = 3
prnt = true



[Command]
name = printOlderBro1
mask = FF FF FF
desc = Prints the name of the first of the player's entered older brothers.
base = F9 0C 20
plen = 3
prnt = true



[Command]
name = printOlderBro2
mask = FF FF FF
desc = Prints the name of the second of the player's entered older brothers.
base = F9 0C 21
plen = 3
prnt = true



[Command]
name = printOlderBro3
mask = FF FF FF
desc = Prints the name of the third of the player's entered older brothers.
base = F9 0C 22
plen = 3
prnt = true



[Command]
name = printOlderBro4
mask = FF FF FF
desc = Prints the name of the fourth of the player's entered older brothers.
base = F9 0C 23
plen = 3
prnt = true



[Command]
name = printYoungerBro1
mask = FF FF FF
desc = Prints the name of the first of the player's entered younger brothers.
base = F9 0C 24
plen = 3
prnt = true



[Command]
name = printYoungerBro2
mask = FF FF FF
desc = Prints the name of the second of the player's entered younger brothers.
base = F9 0C 25
plen = 3
prnt = true



[Command]
name = printYoungerBro3
mask = FF FF FF
desc = Prints the name of the third of the player's entered younger brothers.
base = F9 0C 26
plen = 3
prnt = true



[Command]
name = printYoungerBro4
mask = FF FF FF
desc = Prints the name of the fourth of the player's entered younger brothers.
base = F9 0C 27
plen = 3
prnt = true



[Command]
name = printOlderSis1
mask = FF FF FF
desc = Prints the name of the first of the player's entered older sisters.
base = F9 0C 28
plen = 3
prnt = true



[Command]
name = printOlderSis2
mask = FF FF FF
desc = Prints the name of the second of the player's entered older sisters.
base = F9 0C 29
plen = 3
prnt = true



[Command]
name = printOlderSis3
mask = FF FF FF
desc = Prints the name of the third of the player's entered older sisters.
base = F9 0C 2A
plen = 3
prnt = true



[Command]
name = printOlderSis4
mask = FF FF FF
desc = Prints the name of the fourth of the player's entered older sisters.
base = F9 0C 2B
plen = 3
prnt = true



[Command]
name = printYoungerSis1
mask = FF FF FF
desc = Prints the name of the first of the player's entered younger sisters.
base = F9 0C 2C
plen = 3
prnt = true



[Command]
name = printYoungerSis2
mask = FF FF FF
desc = Prints the name of the second of the player's entered younger sisters.
base = F9 0C 2D
plen = 3
prnt = true



[Command]
name = printYoungerSis3
mask = FF FF FF
desc = Prints the name of the third of the player's entered younger sisters.
base = F9 0C 2E
plen = 3
prnt = true



[Command]
name = printYoungerSis4
mask = FF FF FF
desc = Prints the name of the fourth of the player's entered younger sisters.
base = F9 0C 2F
plen = 3
prnt = true



[Command]
name = printFriend1
mask = FF FF FF
desc = Prints the name of the first of the player's entered friends.
base = F9 0C 30
plen = 3
prnt = true



[Command]
name = printFriend2
mask = FF FF FF
desc = Prints the name of the second of the player's entered friends.
base = F9 0C 31
plen = 3
prnt = true



[Command]
name = printFriend3
mask = FF FF FF
desc = Prints the name of the third of the player's entered friends.
base = F9 0C 32
plen = 3
prnt = true



[Command]
name = printFriend4
mask = FF FF FF
desc = Prints the name of the fourth of the player's entered friends.
base = F9 0C 33
plen = 3
prnt = true



[Command]
name = printFriend5
mask = FF FF FF
desc = Prints the name of the fifth of the player's entered friends.
base = F9 0C 34
plen = 3
prnt = true



[Command]
name = printFriend6
mask = FF FF FF
desc = Prints the name of the sixth of the player's entered friends.
base = F9 0C 35
plen = 3
prnt = true



[Command]
name = printFriend7
mask = FF FF FF
desc = Prints the name of the seventh of the player's entered friends.
base = F9 0C 36
plen = 3
prnt = true



[Command]
name = printFriend8
mask = FF FF FF
desc = Prints the name of the eight of the player's entered friends.
base = F9 0C 37
plen = 3
prnt = true



[Command]
name = printHobby1
mask = FF FF FF
desc = Prints the first of the player's entered hobbies.
base = F9 0C 38
plen = 3
prnt = true



[Command]
name = printHobby2
mask = FF FF FF
desc = Prints the second of the player's entered hobbies.
base = F9 0C 39
plen = 3
prnt = true



[Command]
name = printHobby3
mask = FF FF FF
desc = Prints the third of the player's entered hobbies.
base = F9 0C 3A
plen = 3
prnt = true



[Command]
name = printFavShow1
mask = FF FF FF
desc = Prints the name of the first of the player's entered favorite TV shows.
base = F9 0C 3B
plen = 3
prnt = true



[Command]
name = printFavShow2
mask = FF FF FF
desc = Prints the name of the second of the player's entered favorite TV shows.
base = F9 0C 3C
plen = 3
prnt = true



[Command]
name = printFavShow3
mask = FF FF FF
desc = Prints the name of the third of the player's entered favorite TV shows.
base = F9 0C 3D
plen = 3
prnt = true



[Command]
name = printWish1
mask = FF FF FF
desc = Prints the first of the player's entered wishes.
base = F9 0C 3E
plen = 3
prnt = true



[Command]
name = printWish2
mask = FF FF FF
desc = Prints the second of the player's entered wishes.
base = F9 0C 3F
plen = 3
prnt = true



[Command]
name = printWish3
mask = FF FF FF
desc = Prints the third of the player's entered wishes.
base = F9 0C 40
plen = 3
prnt = true



[Command]
name = printMailBuffer
mask = FF FF FF
desc = Prints the buffered e-mail string.
base = F9 0C 41
plen = 3
prnt = true



[Command]
name = printScheduleBuffer
mask = FF FF FF
desc = Prints the buffered reminder name.
base = F9 0C 43
plen = 3
prnt = true



[Command]
name = printEntryBuffer
mask = FF FF FF
desc = Prints the last entered string.
base = F9 0C 44
plen = 3
prnt = true



[Command]
name = printMostDefeatedOpponent
mask = FF FF FF
desc = Prints the name of the multiplayer opponent the player most frequently defeated.
base = F9 0C 45
plen = 3
prnt = true



[Command]
name = printMostLostToOpponent
mask = FF FF FF
desc = Prints the name of the multiplayer opponent the player most frequently lost to.
base = F9 0C 46
plen = 3
prnt = true



[Command]
name = printString
mask = FF FF 00
desc = Prints a player profile string from memory.
base = F9 0C
prnt = true

[Parameter]
name = index
offs = 2
bits = 7
desc = The index of the string to print (or the buffer to use, if the buffer parameter is true).

[Parameter]
name = buffer
offs = 2.7
bits = 1
desc = If true, the index parameter is treated as a buffer index instead.
valn = bool



[Command]
name = printProtoManMissionMinutes
mask = FF FF FF 00
desc = Prints the amount of minutes left for ProtoMan's current mission, rounded up.
base = F9 0D 00
prnt = true

[Parameter]
name = minLength
offs = 3
bits = 4
desc = The minimum amount of characters to print. If the amount of Zenny consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 3.6
bits = 1
desc = If true, pads the amount of Zenny with zeros instead of spaces, if necessary.
valn = bool

[Parameter]
name = padLeft
offs = 3.7
bits = 1
desc = If true, places the padding, if any, to the left of the amount of Zenny instead of to the right.
valn = bool



[Command]
name = printShadowManMissionMinutes
mask = FF FF FF 00
desc = Prints the amount of minutes left for ShadowMan's current mission, rounded up.
base = F9 0D 04
prnt = true

[Parameter]
name = minLength
offs = 3
bits = 4
desc = The minimum amount of characters to print. If the amount of Zenny consists of less digits, additional spaces are printed.

[Parameter]
name = padZeros
offs = 3.6
bits = 1
desc = If true, pads the amount of Zenny with zeros instead of spaces, if necessary.
valn = bool

[Parameter]
name = padLeft
offs = 3.7
bits = 1
desc = If true, places the padding, if any, to the left of the amount of Zenny instead of to the right.
valn = bool



[Command]
name = startRandomBattle
mask = FF FF
desc = Starts a random battle from the current area.
base = FB 00
ends = never



[Command]
name = startShop
mask = FF FF 00
desc = Opens the shop screen with the specified shop.
base = FB 01
ends = always

[Parameter]
name = shop
offs = 2
bits = 8
desc = The index of the shop to load.



[Command]
name = startBugFragTrader
mask = FF FF FF 00
desc = Checks if the player has at least 10 BugFrags, and jumps to a different script if they don't.
base = FB 02 01
plen = 3
ends = never

[Parameter]
name = jumpIfNotEnoughBugFrags
offs = 3
bits = 8
desc = The script to jump to if the player has less than 10 BugFrags, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = startChipTrader
mask = FF FF 00 00
desc = Checks if the player has at least the specified number of chips, jumping to a different script if they don't, and opens the chip trader screen with the specified number of chips.
base = FB 02
ends = never

[Parameter]
name = amount
offs = 2
bits = 8
desc = The amount of chips the chip trader takes.

[Parameter]
name = jumpIfNotEnoughChips
offs = 3
bits = 8
desc = The script to jump to if the player has less than the specified number of chips, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = startHeal
mask = FF FF 00 00
desc = Heals the player by the specified amount of HP (but no more than their maximum HP) and plays a sound effect.
base = FB 03

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of HP to recover.



[Command]
name = startBBS
mask = FF FF 00
desc = Opens the BBS screen with the specified BBS.
base = FB 04
ends = always

[Parameter]
name = bbs
offs = 2
bits = 8
desc = The index of the BBS to load.



[Command]
name = startGiveFolder
mask = FF FF 00
desc = Replaces the Player's folder in the specified slot with the specified folder and registers all its chips in the Library.
base = FB 05

[Parameter]
name = slot
offs = 2.4
bits = 4
desc = The folder slot to place the new folder in.

[Parameter]
name = folder
offs = 2
bits = 4
desc = The new folder to place in the specified slot.



[Command]
name = startProfileEdit
mask = FF FF
desc = Opens the profile editor screen.
base = FB 06
ends = always



[Command]
name = startNumberManMinigame
mask = FF FF 00
desc = Starts NumberMan's minigame, Number Drill, on the specified difficulty.
base = FB 07
ends = always

[Parameter]
name = hard
offs = 2
bits = 8
desc = If true, starts a harder version of the minigame; otherwise, starts an easy version.
valn = bool



[Command]
name = startMetalManMinigame
mask = FF FF 00
desc = Starts MetalMan's minigame on the specified difficulty.
base = FB 08
ends = always

[Parameter]
name = hard
offs = 2
bits = 8
desc = If true, starts a harder version of the minigame; otherwise, starts an easy version.
valn = bool



[Command]
name = startIceManMinigame
mask = FF FF 00
desc = Starts IceMan's minigame, Ice Letter, on the specified difficulty.
base = FB 09
ends = always

[Parameter]
name = hard
offs = 2
bits = 8
desc = If true, starts a harder version of the minigame; otherwise, starts an easy version.
valn = bool



[Command]
name = startSearchManMinigame
mask = FF FF 00
desc = Starts SearchMan's minigame, Target Practice, on the specified difficulty.
base = FB 0A

[Parameter]
name = hard
offs = 2
bits = 8
desc = If true, starts a harder version of the minigame; otherwise, starts an easy version.
valn = bool



[Command]
name = startNapalmManMinigame
mask = FF FF 00
desc = Starts NapalmMan's minigame on the specified difficulty.
base = FB 0B

[Parameter]
name = hard
offs = 2
bits = 8
desc = If true, starts a harder version of the minigame; otherwise, starts an easy version.
valn = bool



[Command]
name = startWindManMinigame
mask = FF FF 00
desc = Starts WindMan's minigame on the specified difficulty.
base = FB 0C

[Parameter]
name = hard
offs = 2
bits = 8
desc = If true, starts a harder version of the minigame; otherwise, starts an easy version.
valn = bool



[Command]
name = callSave
mask = FF FF 00 00 00
desc = Saves the game, and jumps to a different script depending on if the save was successful or not.
base = FC 00

[Parameter]
name = jumpIfSuccessful
offs = 2
bits = 8
desc = The script to jump to if the save was successful, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFailed
offs = 3
bits = 8
desc = The script to jump to if the save failed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpUnused
offs = 4
bits = 8
desc = An unused jump destination, presumably for if the save failed.
type = jump
valn = mmbn-jump



[Command]
name = callTournament
mask = FF FF 00
desc = Prepares and starts the specified tournament.
base = FC 01

[Parameter]
name = tournament
offs = 2
bits = 8
desc = The tournament to start.



[Command]
name = callSaveErase
mask = FF FF 00 00
desc = Erases the current save file, and jumps to a different script depending on if the save was erased successfully.
base = FC 02

[Parameter]
name = jumpIfSuccessful
offs = 2
bits = 8
desc = The script to jump to if the save was successfully erased, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFailed
offs = 3
bits = 8
desc = The script to jump to if the save erasure failed, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callJunkManDailyBugFragIncrement
mask = FF FF FF 00
desc = Increments JunkMan's daily BugFrag to HP Memory conversion counter.
base = FC 03 00



[Command]
name = callRollHeartDataErase
mask = FF FF FF 00
desc = Erases Roll's current Heart Data and removes it from the overworld.
base = FC 03 02



[Command]
name = callStarManStarDataErase
mask = FF FF FF 00
desc = Erases StarMan's current Star Data and removes it from the overworld.
base = FC 03 03



[Command]
name = callProtoManMissionComplete
mask = FF FF FF 00
desc = Completes the current ProtoMan mission and stops the timer.
base = FC 03 04



[Command]
name = callProtoManMissionFail
mask = FF FF FF 00
desc = Fails the current ProtoMan mission and stops the timer.
base = FC 03 05



[Command]
name = callProtoManMissionErase
mask = FF FF FF 00
desc = Erases all current ProtoMan mission data.
base = FC 03 06



[Command]
name = callProtoManMissionBegin
mask = FF FF FF 00
desc = Begins a random new ProtoMan mission based on ProtoMan's base HP, accessible areas and the previous mission.
base = FC 03 07



[Command]
name = callShadowManMissionComplete
mask = FF FF FF 00
desc = Completes the current ShadowMan mission and stops the timer.
base = FC 03 08



[Command]
name = callShadowManMissionFail
mask = FF FF FF 00
desc = Fails the current ShadowMan mission and stops the timer.
base = FC 03 09



[Command]
name = callShadowManMissionErase
mask = FF FF FF 00
desc = Erases all current ShadowMan mission data.
base = FC 03 0A



[Command]
name = callShadowManMissionBegin
mask = FF FF FF 00
desc = Begins a random new ShadowMan mission based on ShadowMan's base HP, accessible areas and the previous mission.
base = FC 03 0B



[Command]
name = callNumberManMinigameDelay
mask = FF FF FF 00
desc = Starts a timer with a random length between 10 and 60 minutes inclusive, with increments of 10, until NumberMan can play his minigame again.
base = FC 03 0C



[Command]
name = callMetalManMinigameDelay
mask = FF FF FF 00
desc = Starts a timer with a random length between 10 and 60 minutes inclusive, with increments of 10, until MetalMan can play his minigame again.
base = FC 03 0D



[Command]
name = callIceManMinigameDelay
mask = FF FF FF 00
desc = Starts a timer with a random length between 10 and 60 minutes inclusive, with increments of 10, until IceMan can play his minigame again.
base = FC 03 0E



[Command]
name = callBufferMinigameResults
mask = FF FF FF 00
desc = Determines the result of the last minigame, and stores it into buffer 0. If the reward type is HP Memory and the current Navi has reached its max HP already, stores a random amount of Zenny or BugFrags into buffer 2.
base = FC 03 0F



[Command]
name = callSetHomepageFloor
mask = FF FF FF 00
desc = Changes the floor of the player's HP to the specified type.
base = FC 03 10

[Parameter]
name = type
offs = 3
bits = 8
desc = The new floor type for the player's HP.



[Command]
name = callSetHomepageBG
mask = FF FF FF 00
desc = Changes the background of the player's HP to the specified type.
base = FC 03 11

[Parameter]
name = type
offs = 3
bits = 8
desc = The new background type for the player's HP.



[Command]
name = callBufferCurrentYear
mask = FF FF FF 00
desc = Stores the current year number into buffer 0.
base = FC 03 12



[Command]
name = callBufferCurrentMonth
mask = FF FF FF 00
desc = Stores the current month number into buffer 0.
base = FC 03 13



[Command]
name = callBufferCurrentDay
mask = FF FF FF 00
desc = Stores the current day of the month number into buffer 0.
base = FC 03 14



[Command]
name = callBufferCurrentHour
mask = FF FF FF 00
desc = Stores the current time hour number into buffer 0, in 24-hour clock format.
base = FC 03 15



[Command]
name = callBufferCurrentMinutes
mask = FF FF FF 00
desc = Buffers the current time minutes number.
base = FC 03 16



[Command]
name = callSearchManMissionBegin
mask = FF FF FF 00
desc = Starts a random new SearchMan mission based on SearchMan's base HP, accessible areas and the previous mission.
base = FC 03 17



[Command]
name = callSearchManMissionReceiveMail
mask = FF FF FF 00
desc = Makes the player receive the e-mail for SearchMan's current mission.
base = FC 03 18



[Command]
name = callSearchManMissionActivate
mask = FF FF FF 00
desc = Activates SearchMan's current mission.
base = FC 03 19



[Command]
name = callNapalmManMissionBegin
mask = FF FF FF 00
desc = Starts a random new NapalmMan mission based on NapalmMan's base HP, accessible areas and the previous mission.
base = FC 03 1A



[Command]
name = callNapalmManMissionReceiveMail
mask = FF FF FF 00
desc = Makes the player receive the e-mail for NapalmMan's current mission.
base = FC 03 1B



[Command]
name = callNapalmManMissionActivate
mask = FF FF FF 00
desc = Activates NapalmMan's current mission.
base = FC 03 1C



[Command]
name = callTournamentRegisterAllOfficial
mask = FF FF FF 00
desc = Registers every Navi for the Official Tournament.
base = FC 03 1D



[Command]
name = callTournamentRegisterAllGold
mask = FF FF FF 00
desc = Registers every Navi for the Gold Tournament.
base = FC 03 1E



[Command]
name = callTournamentRegisterAllSilver
mask = FF FF FF 00
desc = Registers every Navi for the Silver Tournament.
base = FC 03 1F



[Command]
name = callTournamentRegisterAllUnder
mask = FF FF FF 00
desc = Registers every Navi for the Under Tournament.
base = FC 03 20



[Command]
name = callTournamentReceiveMail
mask = FF FF FF 00
desc = Makes the player receive up to 5 e-mails for the most recent active tournament registrations.
base = FC 03 21



[Command]
name = callClearBattleChipGateHistory
mask = FF FF FF 00
desc = Resets the chip usage history of the Battle Chip Gate.
base = FC 03 22



[Command]
name = callChangeTimeDate
mask = FF FF FF 00
desc = Changes the current time and date settings to previously buffered values, cancels all ongoing events, deregisters from all tournaments and clears the player's Zenny.
base = FC 03 23



[Command]
name = callBufferReminders
mask = FF FF FF 00
desc = Moves the start of the schedule reminders list into the schedule buffer.
base = FC 03 24



[Command]
name = callBufferEventYear
mask = FF FF FF 00
desc = Stores the year number for the next event in the schedule buffer into buffer 0.
base = FC 03 25



[Command]
name = callBufferEventMonth
mask = FF FF FF 00
desc = Stores the month number for the next event in the schedule buffer into buffer 0.
base = FC 03 26



[Command]
name = callBufferEventDay
mask = FF FF FF 00
desc = Stores the day of the month number for the next event in the schedule buffer into buffer 0.
base = FC 03 27



[Command]
name = callBufferEventHour
mask = FF FF FF 00
desc = Stores the hour value of the time for the next event in the schedule buffer into buffer 0, in 12-hour clock format.
base = FC 03 28



[Command]
name = callBufferEventMinutes
mask = FF FF FF 00
desc = Stores the minutes value of the time for the next event in the schedule buffer into buffer 0.
base = FC 03 29



[Command]
name = callBufferEventDayName
mask = FF FF FF 00
desc = Stores the name of the weekday for the next event in the schedule buffer into the event string buffer (string buffer 67).
base = FC 03 2A



[Command]
name = callBufferEventAMPM
mask = FF FF FF 00
desc = Stores "AM" or "PM" into the event string buffer (string buffer 67) depending on the time for the next event in the schedule buffer.
base = FC 03 2B



[Command]
name = callBufferEventFrequency
mask = FF FF FF 00
desc = Stores the frequency of the next event in the schedule buffer into the event string buffer (string buffer 67).
base = FC 03 2C



[Command]
name = callBufferEventName
mask = FF FF FF 00
desc = Stores the name of the next event in the schedule buffer into the event string buffer (string buffer 67).
base = FC 03 2D



[Command]
name = callBufferRecordMinigameResults
mask = FF FF FF 00
desc = Determines the result of the last minigame, and stores it into buffer 0. If the minigame was won, records a win for the specified minigame by the current Navi. If the reward type is HP Memory and the current Navi has reached its max HP already, stores a random amount of Zenny or BugFrags into buffer 2.
base = FC 03 2E

[Parameter]
name = minigame
offs = 3
bits = 8
desc = The minigame to record a win for.



[Command]
name = callCancelMenuTransition
mask = FF FF FF 00
desc = Cancels a currently queued PET menu transition.
base = FC 03 2F



[Command]
name = callBufferAnniversaries
mask = FF FF FF 00
desc = Moves the start of the anniversaries list into the schedule buffer.
base = FC 03 30



[Command]
name = callBufferItemCount
mask = FF FF FF 00
desc = Stores the amount of the specified item in the player's inventory into buffer 0.
base = FC 03 31

[Parameter]
name = item
offs = 3
bits = 8
desc = The item to buffer the amount of.



[Command]
name = callFindNowEventType
mask = FF FF 00 00 00 00 00
desc = Searches the schedule buffer from its current position for the next event occurring at this exact moment and jumps to a different script depending on the type of event, and advances the schedule buffer.
base = FC 04

[Parameter]
name = jumpIfTVShow
offs = 2
bits = 8
desc = The script to jump to if the next event is of a TV show or does not exist, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfPromise
offs = 3
bits = 8
desc = The script to jump to if the next event is of a promise with someone, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfMeal
offs = 4
bits = 8
desc = The script to jump to if the next event is of meal time, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSchool
offs = 5
bits = 8
desc = The script to jump to if the next event is of school time, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOther
offs = 6
bits = 8
desc = The script to jump to if the next event is of a miscellaneous event, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callFindTodayEvent
mask = FF FF 00 00
desc = Searches the schedule buffer from its current position for the next event occurring today and jumps to a different script depending on if one was found, and advances the schedule buffer.
base = FC 05

[Parameter]
name = jumpIfExists
offs = 2
bits = 8
desc = The script to jump to if an event occurring today was found, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 3
bits = 8
desc = The script to jump to if no events occurring today were found, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callSkipMugshotFadeIn
mask = FF FF
desc = Disables the fade-in effect for any mugshot displayed from this point onwards, for the duration of this script.
base = FC 06



[Command]
name = callFindSoonEvent
mask = FF FF 00 00
desc = Searches the schedule buffer from its current position for the next event occurring within 10 minutes and jumps to a different script depending on if one was found, and advances the schedule buffer.
base = FC 07

[Parameter]
name = jumpIfExists
offs = 2
bits = 8
desc = The script to jump to if an event occurring within 10 minutes was found, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 3
bits = 8
desc = The script to jump to if no events occurring within 10 minutes was found, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckOutsideJackIn
mask = FF FF 00 00
desc = Checks the map from which the player jacked in, and jumps to a different script depending on if it is an outside map or an inside map.
base = FC 08

[Parameter]
name = jumpIfOutside
offs = 2
bits = 8
desc = The script to jump to if the player jacked in from an outside map, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfInside
offs = 3
bits = 8
desc = The script to jump to if the player jacked in from an inside map, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callFindTournamentRegistration
mask = FF FF 00 00
desc = Finds the next Navi registered for a tournament, starting from the last result, and stores the Navi and tournament indices into buffers 0 and 1 respectively, then jumps to a different script depending on if one was found. If no Navi was found, stores 255 into buffer 0.
base = FC 09
ends = never

[Parameter]
name = unused
offs = 2
bits = 8
desc = An unused parameter with unknown intended purpose.

[Parameter]
name = jumpIfNone
offs = 3
bits = 8
desc = The script to jump to if no Navis with tournament registrations were found, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckJunkDataContents
mask = FF FF 00 00 00 00 00 00 00 00 00 00
desc = Checks the specified Junk Data, and jumps to a different script depending on its contents.
base = FC 0A

[Parameter]
name = junkData
offs = 2
bits = 8
desc = The Junk Data to check.

[Parameter]
name = jumpIfEmpty
offs = 3
bits = 8
desc = The script to jump to if the Junk Data is empty, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfContents1
offs = 4
bits = 8
desc = The script to jump to if the Junk Data has contents 1, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfContents2
offs = 5
bits = 8
desc = The script to jump to if the Junk Data has contents 2, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfContents3
offs = 6
bits = 8
desc = The script to jump to if the Junk Data has contents 3, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfContents4
offs = 7
bits = 8
desc = The script to jump to if the Junk Data has contents 4, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfContents5
offs = 8
bits = 8
desc = The script to jump to if the Junk Data has contents 5, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfContents6
offs = 9
bits = 8
desc = The script to jump to if the Junk Data has contents 6, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfContents7
offs = 10
bits = 8
desc = The script to jump to if the Junk Data has contents 7, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfContents8
offs = 11
bits = 8
desc = The script to jump to if the Junk Data has contents 8, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckMenuSelection
mask = FF FF 00 00 00 00 00 00 00
desc = Checks the current menu item selection on the PET screen, and jumps to a different script depending on which it is.
base = FC 0B

[Parameter]
name = jumpIfTournament
offs = 2
bits = 8
desc = The script to jump to if the Tournament item is selected, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfJackIn
offs = 3
bits = 8
desc = The script to jump to if the Jack In item is selected, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfEquipment
offs = 4
bits = 8
desc = The script to jump to if the Equipment item is selected, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLibrary
offs = 5
bits = 8
desc = The script to jump to if the Library item is selected, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfEMail
offs = 6
bits = 8
desc = The script to jump to if the E-Mail item is selected, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfComm
offs = 7
bits = 8
desc = The script to jump to if the Comm item is selected, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSave
offs = 8
bits = 8
desc = The script to jump to if the Save item is selected, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callFindTodayAnniversary
mask = FF FF 00 00
desc = Searches the schedule buffer from its current position for the next anniversary occurring today and jumps to a different script depending on if one was found, and advances the schedule buffer.
base = FC 0C

[Parameter]
name = jumpIfExists
offs = 2
bits = 8
desc = The script to jump to if an anniversary occurring today was found, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 3
bits = 8
desc = The script to jump to if no anniversaries occurring today were found, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callEnableMysteryDataBufferCheck
mask = FF FF
desc = Enables a Mystery Data contents buffer check whenever its contents are read. If the buffered contents do not match with the actual contents of the Mystery Data, the default contents for that content type is buffered instead.
base = FC 0D



[Command]
name = callCheckNowEvent
mask = FF FF 00 00
desc = Checks the schedule buffer from its current position, and jumps to a different script depending if there are any events occurring at this exact moment, without advancing the schedule buffer.
base = FC 0E

[Parameter]
name = jumpIfExists
offs = 2
bits = 8
desc = The script to jump to if an event occurring at this exact moment was found, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfNone
offs = 3
bits = 8
desc = The script to jump to if no events occurring at this exact moment were found, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedSchool
mask = FF FF FF 00 00
desc = Checks if the player has entered the name of their school, and jumps to a different script depending on if they have or have not.
base = FC 0F 02

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of their school, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of their school, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomOlderBro
mask = FF FF FF 00 00
desc = Stores a random one of the player's entered older brothers' names into string buffer 3 if they have entered any, and jumps to a different script depending on if they have or have not.
base = FC 0F 03

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of an older brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of an older brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomYoungerBro
mask = FF FF FF 00 00
desc = Stores a random one of the player's entered younger brothers' names into string buffer 4 if they have entered any, and jumps to a different script depending on if they have or have not.
base = FC 0F 04

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of a younger brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of a younger brother, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomOlderSis
mask = FF FF FF 00 00
desc = Stores a random one of the player's entered older sisters' names into string buffer 5 if they have entered any, and jumps to a different script depending on if they have or have not.
base = FC 0F 05

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of an older sister, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of an older sister, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomYoungerSis
mask = FF FF FF 00 00
desc = Stores a random one of the player's entered younger sisters' names into string buffer 6 if they have entered any, and jumps to a different script depending on if they have or have not.
base = FC 0F 06

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of a younger sister, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of a younger sister, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomFriend
mask = FF FF FF 00 00
desc = Stores a random one of the player's entered friends' names into string buffer 7 if they have entered any, and jumps to a different script depending on if they have or have not.
base = FC 0F 07

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of a friend, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of a friend, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedFavFood
mask = FF FF FF 00 00
desc = Checks if the player has entered the name of their favorite food, and jumps to a different script depending on if they have or have not.
base = FC 0F 08

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of their favorite food, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of their favorite food, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomHobby
mask = FF FF FF 00 00
desc = Stores a random one of the player's entered hobbies into string buffer 9 if they have entered any, and jumps to a different script depending on if they have or have not.
base = FC 0F 09

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered a hobby, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered a hobby, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedDream
mask = FF FF FF 00 00
desc = Checks if the player has entered their dream, and jumps to a different script depending on if they have or have not.
base = FC 0F 0A

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered their dream, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered their dream, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedCrush
mask = FF FF FF 00 00
desc = Checks if the player has entered the name of their crush, and jumps to a different script depending on if they have or have not.
base = FC 0F 0B

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of their crush, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of their crush, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedIdol
mask = FF FF FF 00 00
desc = Checks if the player has entered the name of their idol, and jumps to a different script depending on if they have or have not.
base = FC 0F 0C

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of their idol, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of their idol, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedEnemy
mask = FF FF FF 00 00
desc = Checks if the player has entered the name of their enemy, and jumps to a different script depending on if they have or have not.
base = FC 0F 0D

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of their enemy, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of their enemy, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomFavShow
mask = FF FF FF 00 00
desc = Stores a random one of the player's entered favorite TV shows' names into string buffer 14 if they have entered any, and jumps to a different script depending on if they have or have not.
base = FC 0F 0E

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered the name of a favorite TV show, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered the name of a favorite TV show, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedBestSubject
mask = FF FF FF 00 00
desc = Checks if the player has entered their best subject, and jumps to a different script depending on if they have or have not.
base = FC 0F 0F

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered their best subject, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered their best subject, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedWorstSubject
mask = FF FF FF 00 00
desc = Checks if the player has entered the name of their worst subject, and jumps to a different script depending on if they have or have not.
base = FC 0F 10

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered their worst subject, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered their worst subject, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomWish
mask = FF FF FF 00 00
desc = Stores a random one of the player's entered wishes into string buffer 17 if they have entered any, and jumps to a different script depending on if they have or have not.
base = FC 0F 11

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the player has not entered a wish, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the player has entered a wish, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedMPRivalName
mask = FF FF FF 00 00
desc = Checks if the name of a multiplayer rival is defined, and jumps to a different script depending on if it is or is not.
base = FC 0F 12

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if no multiplayer rival name is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if a multiplayer rival name is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomMPChip
mask = FF FF FF 00 00
desc = Stores a random one of chips used in multiplayer battles into string buffer 19 if any are defined, and jumps to a different script depending on if they are or are not.
base = FC 0F 13

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if no multiplayer chip is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if a multiplayer chip is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedMPChip1
mask = FF FF FF 00 00
desc = Checks if multiplayer chip 1 is defined, and jumps to a different script depending on if it is or is not.
base = FC 0F 14

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if multiplayer chip 1 is not defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if a multiplayer chip 1 is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBufferRandomMPOpponentName
mask = FF FF FF 00 00
desc = Stores a random one of multiplayer opponents' names into string buffer 21 if any are defined, and jumps to a different script depending on if they are or are not.
base = FC 0F 15

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if the name of a multiplayer opponent is not defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if the name of a multiplayer opponent is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedMPChip2
mask = FF FF FF 00 00
desc = Checks if multiplayer chip 2 is defined, and jumps to a different script depending on if it is or is not.
base = FC 0F 16

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if multiplayer chip 2 is not defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if a multiplayer chip 2 is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedMPChip3
mask = FF FF FF 00 00
desc = Checks if multiplayer chip 3 is defined, and jumps to a different script depending on if it is or is not.
base = FC 0F 17

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if multiplayer chip 3 is not defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if a multiplayer chip 3 is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedMPChip4
mask = FF FF FF 00 00
desc = Checks if multiplayer chip 4 is defined, and jumps to a different script depending on if it is or is not.
base = FC 0F 18

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if multiplayer chip 4 is not defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if a multiplayer chip 4 is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedMPChip5
mask = FF FF FF 00 00
desc = Checks if multiplayer chip 5 is defined, and jumps to a different script depending on if it is or is not.
base = FC 0F 19

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if multiplayer chip 5 is not defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if a multiplayer chip 5 is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedMPChip6
mask = FF FF FF 00 00
desc = Checks if multiplayer chip 6 is defined, and jumps to a different script depending on if it is or is not.
base = FC 0F 1A

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if multiplayer chip 6 is not defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if a multiplayer chip 6 is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callCheckDefinedMPChip7
mask = FF FF FF 00 00
desc = Checks if multiplayer chip 7 is defined, and jumps to a different script depending on if it is or is not.
base = FC 0F 1B

[Parameter]
name = jumpIfUndefined
offs = 3
bits = 8
desc = The script to jump to if multiplayer chip 7 is not defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDefined
offs = 4
bits = 8
desc = The script to jump to if a multiplayer chip 7 is defined, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = callBeginStoryQuest
mask = FF FF 00 00
desc = Begins the story quest with the specified base flag for the current Navi, if it has not yet been started.
base = FC 10

[Parameter]
name = flag
offs = 2
bits = 16
desc = The base flag of the story quest to begin.



[Command]
name = soundPlay
mask = FF FF 00 00
desc = Loads the specified sound track into its designated track slot and starts playback.
base = FD 00

[Parameter]
name = track
offs = 2
bits = 16
desc = The sound track to play.



[Command]
name = soundStopBGM
mask = FF FF FF FF
desc = Stops playback of all track groups if a BGM is currently playing and clears the BGM track number.
# Takes priority over soundPlayBGM.
plen = 4
base = FD 01 FF 00



[Command]
name = soundPlayBGM
mask = FF FF 00 00
desc = Loads the specified sound track into its designated track slot, sets the BGM track number to the specified sound track and starts playback.
base = FD 01

[Parameter]
name = track
offs = 2
bits = 16
desc = The sound track to play.



[Command]
name = soundEnableTextSFX
mask = FF FF
desc = Enables the sound effect that plays when a text character is printed on the screen.
base = FD 02



[Command]
name = soundDisableTextSFX
mask = FF FF
desc = Disables the sound effect that plays when a text character is printed on the screen.
base = FD 03



[Command]
name = soundStop
mask = FF FF
desc = Stops playback of all track slots and clears the BGM track number.
base = FD 04



[Command]
name = soundFadeOut
mask = FF FF 00 00
desc = Creates a fade-out for the specified track slot over the specified length of time.
base = FD 05

[Parameter]
name = slot
offs = 2
bits = 8
desc = The track slot to fade out.

[Parameter]
name = length
offs = 3
bits = 8
desc = The length of the fade-out, where each unit equates 16 frames.



[Extension]
name = soundPlay
mask = FF FF 00 00
base = FD 06



[Extension]
name = soundPlay
mask = FF FF 00 00
base = FD 07



[Command]
name = soundEnableChoiceSFX
mask = FF FF
desc = Enables the sound effect that plays when a menu option is selected or a menu is cancelled.
base = FD 08



[Command]
name = soundDisableChoiceSFX
mask = FF FF
desc = Disables the sound effect that plays when a menu option is selected or a menu is cancelled.
base = FD 09



[Command]
name = soundPlayAreaBGM
mask = FF FF
desc = Starts playing the default sound track for the current area using its assigned track slot.
base = FD 0A



[Command]
name = soundFadeInBGM
mask = FF FF 00 00
desc = If the specified sound track is a BGM, loads it into track slot 31 and sets the BGM track number, then creates a fade-in over the specified length of time.
base = FD 0B

[Parameter]
name = track
offs = 2
bits = 8
desc = The BGM sound track to play.

[Parameter]
name = length
offs = 3
bits = 8
desc = The length of the fade-out, where each unit equates 16 frames.