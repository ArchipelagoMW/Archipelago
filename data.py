from __future__ import annotations

from enum import Enum
from io import StringIO
import pkgutil
from typing import Mapping


ap_id_offset = 0xEC00


class Domain(Enum):
    SYSTEM_BUS = 0x0000000
    ROM = 0x8000000

    def convert_from(self, source: Domain, addr: int) -> int:
        difference = self.value - source.value
        # Doesn't bounds check against top, but that's okay for now
        assert addr > difference, f'{self.name} address {addr} is out of bounds for {source.name}'
        addr -= difference
        return addr


def data_path(file_name: str):
    return pkgutil.get_data(__name__, f"data/{file_name}")


def _get_symbols() -> Mapping[str, int]:
    symbols = {}
    symbol_data = data_path("basepatch.sym").decode("utf-8")
    with StringIO(symbol_data) as stream:
        for line in stream:
            try:
                addr, label, *_ = line.split()
            except ValueError:
                continue

            # These labels are either generated by assembler directives or are
            # file/function local. Either way, not useful here
            if label[0] in ('@', '.'):
                continue

            addr = int(addr, base=16)
            symbols[label] = addr
    return symbols


def _get_charset() -> Mapping[str, int]:
    charset = {}
    symbol_data = data_path("charset.tbl").decode("utf-8")
    with StringIO(symbol_data) as stream:
        for line in stream:
            try:
                byte, character = line.strip().split('=')
            except ValueError:
                continue

            byte = int(byte, base=16)
            charset[character] = byte
    return charset


symbols = _get_symbols()
charset = _get_charset()


def get_symbol(symbol: str, offset: int = 0) -> int:
    '''Convert a label name and offset to an address on GBA system bus.'''

    return symbols[symbol.lower()] + offset


def encode_str(msg: str) -> bytes:
    '''Encode a string into Wario Land 4's text format. Unrecognized characters
    are converted to spaces.'''

    encoded = []
    for c in msg:
        encoded.append(charset.get(c, 0xFF))
    return bytes(encoded)
